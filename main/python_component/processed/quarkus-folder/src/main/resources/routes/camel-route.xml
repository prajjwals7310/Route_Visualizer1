<?xml version="1.0" encoding="UTF-8"?>
<routes xmlns="http://camel.apache.org/schema/spring" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://tempuri.org/" xsi:schemaLocation="http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd" id="Ctx__DirectDMTOrchestration">
    <route id="RT1_DMTOrchestration" streamCache="true" >
        <!--******************************* This component is used to expose the url -->
        <!-- <from uri="restlet:http://{{esbHost}}:{{ESB_DirectDMTOrchestration}}/esb/directdmtorchestration?restletMethod=POST" /> -->
        <from uri="direct:directdmtorchestration" />
        <doTry>
            <!--******************************* call RequestProcessor bean to set X-Correlation-Id , UserId ,X-Auth-Token from request header -->
            <bean ref="requestProcessor" method="processLog" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_1 REQUEST RECEIVED FROM USER_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <setHeader name="NonReversalCodes">
                <simple>{{ESB_IMPSNEFT_NOREVERSALCODES}}</simple>
            </setHeader>
            <setHeader name="NPCIChannels">
                <simple>{{ESB_IMPS_NPCI_CHANNELS}}</simple>
            </setHeader>
            <setHeader name="NPCITranTypes">
                <simple>{{ESB_IMPS_NPCI_TRANTYPES}}</simple>
            </setHeader>
            <setHeader name="NonReversalPPICodes">
                <simple>{{ESB_IMPSNEFT_NOREVERSALPPICODES}}</simple>
            </setHeader>
            <setHeader name="ORG_NonReversalNPCICodes">
                <simple>{{ESB_IMPSNEFT_NOREVERSALNPCICODES_ORG}}</simple>
            </setHeader>
            <setHeader name="VER_ReversalNPCICodes">
                <simple>{{ESB_IMPSNEFT_REVERSALNPCICODES_VER}}</simple>
            </setHeader>
            <setHeader name="ORG_ReversalNPCICodes">
                <simple>{{ESB_IMPSNEFT_REVERSALNPCICODES_ORG}}</simple>
            </setHeader>
            <setHeader name="InquiryCodes">
                <simple>{{ESB_IMPSNEFT_INQUIRYCODES}}</simple>
            </setHeader>
            <setHeader name="InquiryPPICodes">
                <simple>{{ESB_IMPSNEFT_INQUIRYPPICODES}}</simple>
            </setHeader>
            <setHeader name="VerifyPPICodes">
                <simple>{{ESB_IMPSNEFT_VERIFICATIONPPICODES}}</simple>
            </setHeader>
            <setHeader name="NPCIUsers">
                <simple>{{ESB_IMPS_NPCI_Users}}</simple>
            </setHeader>
            <setHeader name="UserCheckFlag">
                <simple>{{ESB_IMPS_NPCI_UserCheckFlag}}</simple>
            </setHeader>
            <setHeader name="impsRouteIdentifer">
                <simple>{{ESB_IMPSRouteIdentifer}}</simple>
            </setHeader>
            <setHeader name="DashBoard_Logging_Flag">
                <simple>{{DashBoard_Logging_Flag}}</simple>
            </setHeader>
            <setHeader name="ServerIP">
                <simple>{{esbHost}}</simple>
            </setHeader>
            <setProperty name="MTARequest"><simple>${body}</simple></setProperty>
            <log message="X-Auth-Token Value = ${header.X-Auth-Token}"/>

            <doTry>
                <setHeader name="emailId">
                    <jsonpath>$.CustomerAuth.emailId</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="ESB_DirectDMTOrchestration Exception While Reading email ${exception}"></log>
                    <setHeader name="emailId">
                        <simple>0</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="VendorIdentifier">
                    <jsonpath>$.VendorIdentifier</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="ESB_DirectDMTOrchestration Exception While Reading VendorIdentifier ${exception}"></log>
                    <setHeader name="VendorIdentifier">
                        <simple>N</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <setHeader name="VendorTemplateMapping">
                <simple>{{PartnerVendorTemplateMapping}}</simple>
            </setHeader>
            <bean ref="requestProcessor" method="VendorTemplateMapping" />
            <doTry>
                <setHeader name="HubbleSMSAccountNumber">
                    <jsonpath>$.PostTransaction[0].acctFundTransferLegs[0].accountNumber</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="ESB_DirectDMTOrchestration Exception While Reading email ${exception}"></log>
                    <setHeader name="HubbleSMSAccountNumber">
                        <simple>0</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <setHeader name="mobNo">
                <jsonpath>$.CustomerAuth.MobileNo</jsonpath>
            </setHeader>
            <doTry>
                <setHeader name="MobileNumForSMS">
                    <jsonpath>$.CustomerAuth.MobileNo</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="ESB_DirectDMTOrchestration Exception While Reading SMS MobileNumber ${exception}"></log>
                    <setHeader name="MobileNumForSMS">
                        <simple>0</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="reqAppId">
                    <jsonpath>$.PostTransaction[0].appId</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_2 Exception While Reading appId ${exception}"></log>
                    <setHeader name="reqAppId">
                        <simple>NA</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <log message="ESB_DirectDMTOrchestration appId ${header.reqAppId}"></log>
            <doTry>
                <setHeader name="traceForLimit">
                    <jsonpath>$.IMPSServiceDataList[0].PaymentRef</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception While Reading traceForLimit ${exception}"></log>
                    <setHeader name="traceForLimit">
                        <simple>NA</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="amountForLimit">
                    <jsonpath>$.IMPSServiceDataList[0].TxnAmount</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception While Reading amountForLimit ${exception}"></log>
                    <setHeader name="amountForLimit">
                        <simple>NA</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="MerchantMobileNum">
                    <jsonpath>$.merchantMobileNumber</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="ESB_DirectDMTOrchestration QUARK_STEP_2 Exception While Reading Merchant SMS MobileNumber ${exception}"></log>
                    <setHeader name="MerchantMobileNum">
                        <simple>0</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="kitNo">
                    <jsonpath>$.kitNumber</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="ESB_DirectDMTOrchestration QUARK_STEP_2 Exception While Reading PGK KitNumber ${exception}"></log>
                    <setHeader name="kitNo">
                        <simple>0</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="headBeneMobNo">
                    <jsonpath>$.IMPSServiceDataList[0].BeneMobNo</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_2 Exception While Reading headBeneMobNo ${exception}"></log>
                    <setHeader name="headBeneMobNo">
                        <simple>NA</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <setHeader name="OrgBody">
                <simple>${body}</simple>
            </setHeader>
            <choice>
                <when>
                    <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                    <setBody>
                        <simple>{"Method_ID":"104","Layer_ID":"4","Request_Flag":"1","Response_Flag":"0","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"0","Node_IP_Address": "{{esbHost}}","RequestIn": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","RequestOut": null,"Response_Message": "","Status_Code": "","Service_ID": "5"}</simple>
                    </setBody>
                    <wireTap uri="direct:dmtDashBoard"/>
                    <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                </when>
            </choice>
            <setBody>
                <simple>${header.OrgBody}</simple>
            </setBody>
            <unmarshal><json/></unmarshal>
            <!---******************************* set headers for input request fields start -->
            <setHeader name="CreateCustomer">
                <simple>${body[CreateCustomer]}</simple>
            </setHeader>
            <setHeader name="CreateAccount">
                <simple>${body[CreateAccount]}</simple>
            </setHeader>
            <setHeader name="AddWalkinCustomer">
                <simple>${body[AddWalkinCustomer]}</simple>
            </setHeader>
            <setHeader name="AddBeneficiary">
                <simple>${body[AddBeneficiary]}</simple>
            </setHeader>
            <setHeader name="PostTransaction">
                <simple>${body[PostTransaction]}</simple>
            </setHeader>
            <setHeader name="AddExternalAccount">
                <simple>${body[AddExternalAccount]}</simple>
            </setHeader>
            <setHeader name="dMSDetails">
                <simple>${body[DMSDetails]}</simple>
            </setHeader>
            <setHeader name="IMPSServiceDataList">
                <simple>${body[IMPSServiceDataList]}</simple>
            </setHeader>
            <setHeader name="BillDeskData">
                <simple>${body[BillDeskData]}</simple>
            </setHeader>
            <setHeader name="asyncFlag">
                <simple>${body[asyncFlag]}</simple>
            </setHeader>
            <setHeader name="totalAmount">
                <simple>${body[totalAmount]}</simple>
            </setHeader>
            <setHeader name="chargeAmount">
                <simple>${body[chargeAmount]}</simple>
            </setHeader>
            <bean ref="postTransactionRequestBean" method="calculateMerchantAmount"></bean>
            <setHeader name="txnType">
                <simple>${body[txnType]}</simple>
            </setHeader>
            <setHeader name="parentRRN">
                <simple>${body[parentRRN]}</simple>
            </setHeader>
            <setHeader name="IMPSPPIIdentifier">
                <simple>${body[impsserviceflag]}</simple>
            </setHeader>
            <!---******************************* set headers for input request fields end -->
            <!--****************************** set header for requestbitmap from input request -->
            <setHeader name="bitmap">
                <simple>${body[requestbitmap]}</simple>
            </setHeader>
            <setHeader name="authResponse">
                <simple>1</simple>
            </setHeader>
            <setHeader name="EkycChargesBody">
                <simple>${body[EkycCharges]}</simple>
            </setHeader>
            <setHeader name="authResponseReturnCode">
                <simple>0</simple>
            </setHeader>
            <choice>
                <when>
                    <simple>${header.txnType} == 'IMPS' </simple>
                    <setHeader name="FRMImpsRequest">
                        <simple>${body}</simple>
                    </setHeader>
                </when>
            </choice>
            <!--******************************* call BitMapReader bean to set requestBitMap bitwise -->
            <bean ref="bitmapReaderBean" method="readBitmap" />
            <marshal><json/></marshal>
            <convertBodyTo type="java.lang.String"></convertBodyTo>
            <choice>
                <when>
                    <simple>${header.PostTransactionBit} == '1'</simple>
                    <doTry>
                        <setHeader name="transType">
                            <jsonpath>$.PostTransaction[1].acctFundTransferLegs[0].transactionType</jsonpath>
                        </setHeader>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <setHeader name="transType">
                                <jsonpath>$.PostTransaction[0].acctFundTransferLegs[0].transactionType</jsonpath>
                            </setHeader>
                        </doCatch>
                    </doTry>
                    <doTry>
                        <setHeader name="IMPS_appId">
                            <jsonpath>$.PostTransaction[0].appId</jsonpath>
                        </setHeader>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <setHeader name="IMPS_appId">
                                <simple>0</simple>
                            </setHeader>
                        </doCatch>
                    </doTry>
                    <doTry>
                        <setHeader name="BillDeskAnalysisFlag">
                            <jsonpath>$.PostTransaction[0].analysisFlag</jsonpath>
                        </setHeader>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <log message="${exception.stacktrace}"></log>
                        </doCatch>
                    </doTry>
                    <setHeader name="impsLimitFlag">
                        <simple>off</simple>
                    </setHeader>


            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration  IMPS PostTransactionRoute Body= ${body} "></log>
            <doTry>
                <setHeader name="cdflag1">
                    <jsonpath>$.PostTransaction[0].acctFundTransferLegs[0].creditDebitFlag</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="cdflag1">
                        <simple>0</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration  IMPS PostTransactionRoute cdflag1= ${header.cdflag1} transType= ${header.transType}"></log>
            <choice>
                <when>
                    <simple>${header.cdflag1} == 'D'</simple>
                    <doTry>
                        <setHeader name="accnoForLimit">
                            <jsonpath>$.PostTransaction[0].acctFundTransferLegs[0].accountNumber</jsonpath>
                        </setHeader>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <setHeader name="accnoForLimit">
                                <simple>0</simple>
                            </setHeader>
                        </doCatch>
                    </doTry>
                </when>
                <otherwise>
                    <doTry>
                    <setHeader name="accnoForLimit">
                        <jsonpath>$.PostTransaction[0].acctFundTransferLegs[1].accountNumber</jsonpath>
                    </setHeader>
                    <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="accnoForLimit">
                        <simple>0</simple>
                    </setHeader>
                    </doCatch>
                    </doTry>
                </otherwise>
            </choice>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration  IMPS AccountNumber Limit= ${header.accnoForLimit}"/>

                </when>
            </choice>
            <unmarshal><json/></unmarshal>
            <choice>
                <when>
                    <simple>${header.IMPS_appId} == 'MB' || ${header.IMPS_appId} == 'IBR'</simple>
                    <setHeader name="frmEventId"><simple>FT_FUNDTRANSFER</simple></setHeader>
                </when>
                <otherwise>
                    <setHeader name="frmEventId"><simple>FT_MBCTXN</simple></setHeader>
                </otherwise>
            </choice>
            <!-- Calling Auth Route -->
            <to uri="direct:DMTAuthRoute"></to>
            <!--************************************** call CombineResonse bean for consolidated response acoording to input request -->
            <setHeader name="Content-Type">
                <simple>application/json</simple>
            </setHeader>
            <doCatch>
                <!--****************************** exception handling code if any exception occur -->
                <exception>java.lang.Exception</exception>
                <!-- <log message="ESB_DirectDMTOrchestration Exception Occured : ${exception.stacktrace}"></log> -->
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_6 EXCEPTION OCCURRED_${exception.stacktrace}" loggingLevel="INFO" />
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <!--***************************** show returnCode 999 in response when exception occor -->
                <setBody>
                    <simple>{"returnCode":"999","responseMessage":"${exception}"}</simple>
                </setBody>
            </doCatch>
            <doFinally>
                <!--****************************** Remove all response headers except breadcrumbId and Content-Type -->
                <bean ref="combineBean" method="combine" />
                <choice>
                    <when>
                        <simple>${header.txnType} == 'IMPS' &amp;&amp; ${header.FinalRespCode} == '0' &amp;&amp; ${header.analysisFlag} != '1'</simple>
                        <setHeader name="FRMImpsResponse">
                            <simple>${body}</simple>
                        </setHeader>
                        <to uri="seda:IMPSFRMQueueInsert?waitForTaskToComplete=Never"/>                        
                    </when>
                </choice>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_7 RESPONSE BODY SENT TO USER_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <choice>
                    <when>
                        <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                        <setBody>
                            <simple>{"Method_ID":"104","Layer_ID":"4","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"0","Node_IP_Address": "{{esbHost}}","RequestIn": null,"RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "${header.FinalRespCode}","Service_ID": "5"}</simple>
                        </setBody>
                        <wireTap uri="direct:dmtDashBoard" />
                        <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                    </when>
                </choice>

                <setBody>
                    <simple>${header.FinalResponse}</simple>
                </setBody>
                <setHeader name="ESB_MTA_ASYNC_POSTING_FLAG"><simple>{{ESB_MTA_ASYNC_POSTING_FLAG}}</simple></setHeader>
                <removeHeaders pattern="*" excludePattern="ESB_MTA_ASYNC_POSTING_FLAG|X-Correlation-Id|breadcrumbId|Content-Type|HubbleSMSAccountNumber|Authorization|X-Auth-Token" />
                <choice>
                    <when>
                        <simple>${header.ESB_MTA_ASYNC_POSTING_FLAG} == '0'</simple>
                        <to pattern="InOnly" uri="seda:MTAPostingRoute?waitForTaskToComplete=Never"/>
                    </when>
                </choice>
                <removeHeader name="Server"></removeHeader>
            </doFinally>
        </doTry>
    </route>
    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh BitMap validations route -->
    <route id="RT2_bitmMapRoute" streamCache="true">
        <from uri="direct:bitmMapValidations" />
        <log message="ESB_DirectDMTOrchestration CreateCustomerBit :${header.CreateCustomerBit}"></log>
        <choice>
            <when>
                <simple>${header.CreateCustomerBit} == '1'</simple>
        <choice>
        <when>
        <simple>${header.ekycChargesBit} == '1' </simple>
        <to uri="direct:ekycCharges" />
        <log message="ESB_DirectDMTOrchestration ekycReturnCode :${header.ekycReturnCode}"></log>
        <choice>
            <when>
                <simple>${header.ekycReturnCode} == '0' </simple>
                <to uri="direct:createCustomer" />
            </when>
        </choice>
        </when>
            <otherwise>
                <to uri="direct:createCustomer" />
            </otherwise>
        </choice>
            </when>
        </choice>
        <choice>
            <when>
                <simple>${header.CreateAccountBit} == '1' &amp;&amp; ${header.rescreateCustomerCombine} == '0'</simple>
                <to uri="direct:createAccount" />
            </when>
        </choice>
        <choice>
            <when>
                <simple>${header.AddBeneficiaryBit} == '1' &amp;&amp; ${header.rescreateCustomerCombine} == '0' &amp;&amp; ${header.rescreateAccountCombine} == '0'</simple>
                <to uri="direct:addBeneficiary" />
            </when>
        </choice>
        <!-- <log message="AddWalkinCustomerBit : ${header.AddWalkinCustomerBit}"></log> <log message="rescreateCustomerCombine : ${header.rescreateCustomerCombine}"></log> <log message="rescreateAccountCombine : ${header.rescreateAccountCombine}"></log> <log message="resAddBenificiaryrCombine : ${header.resAddBenificiaryrCombine}"></log> -->
        <choice>
            <when>
                <simple>${header.AddWalkinCustomerBit} == '1' &amp;&amp; ${header.rescreateCustomerCombine} == '0' &amp;&amp; ${header.rescreateAccountCombine} == '0' &amp;&amp; ${header.resAddBenificiaryrCombine} == '0'</simple>
                <to uri="direct:addWalkinCustomer" />
            </when>
        </choice>
        <!-- <log message="resAddWalkinCustomerrCombine : ${header.resAddWalkinCustomerrCombine}"></log> <log message="PostTransactionBit : ${header.PostTransactionBit}"></log> -->
        <choice>
            <when>
                <simple>${header.PostTransactionBit} == '1' &amp;&amp; ${header.rescreateCustomerCombine} == '0' &amp;&amp; ${header.rescreateAccountCombine} == '0' &amp;&amp; ${header.resAddBenificiaryrCombine} == '0' &amp;&amp; ${header.resAddWalkinCustomerrCombine} == '0'</simple>
                <!-- <log message="in post trans vald..."></log> -->
                <choice>
                    <when>
                        <simple>${header.txnType} == 'BILLPAY' || ${header.txnType} == 'RECHARGE'</simple>
                        <to uri="direct:BillpayBase" />
                    </when>
                    <otherwise>
                        <log message="postTransaction : ${body}"></log>
                        <!--<marshal ref="json" />-->

                        <choice>
                        <when>
                        <simple>${header.reqAppId} == 'MB' || ${header.reqAppId} == 'FINOMB' || ${header.reqAppId} == 'FINOTLR'</simple>

                            <choice>
                                <when>
                                    <simple>${header.transType} == 'IMPSFTP2A' </simple>
                                    <to uri="direct:checkLimitIMPS" />
                                </when>
                            </choice>
                        </when>
                        </choice>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration impsLimitFlag : ${header.impsLimitFlag} "	loggingLevel="INFO" logName="com.fino.asynclog" />
                <choice>
                    <when>
                        <simple>${header.impsLimitFlag} == 'on' </simple>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration impsLimitFlag decline on "	loggingLevel="INFO" logName="com.fino.asynclog" />
                        <setHeader name="TransactionQueryReq">
                            <simple>{"Insert_Type":"0","requestType":"2","ACCTNUM":"${header.accnoForLimit}","PCODE":"NPCIPosting","MSGTYPE":"0","TRACE":"${header.traceForLimit}","AMOUNT":"${header.amountForLimit}","appId":"${header.reqAppId}","X_CORRELATION_ID":"${header.X-Correlation-Id}","Layer":"ESB","TXNDEST":"{{esbHost}}"}</simple>
                        </setHeader>
                        <log
                                message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Request Limit ${header.TransactionQueryReq}"></log>
                        <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>

                        <setHeader name="TransactionQueryReq">
                            <simple>{"Insert_Type":"1","Request_Type":"2","ACCTNUM":"${header.accnoForLimit}","PCODE":"NPCIPosting","MSGTYPE":"0","RESPCODE":"1","Response_Msg":"Retail customer’s account has breached 5 declines in a day limit","TRACE":"${header.traceForLimit}","AMOUNT":"${header.amountForLimit}","X_CORRELATION_ID":"${header.X-Correlation-Id}","IMPSRRN":"${header.traceForLimit}"}</simple>
                        </setHeader>
                        <log
                                message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Response Limit ${header.TransactionQueryReq}"></log>
                        <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                        <bean ref="splitTransactionBean" method="setResponseForLimits" />
                    </when>
                    <otherwise>
                                <to uri="direct:postTransaction" />
                    </otherwise>
                </choice>
                        <!--<to uri="direct:postTransaction" />-->
                    </otherwise>
                </choice>
            </when>
        </choice>
        <choice>
            <when>
                <simple>${header.AddExternalAccountBit} == '1' &amp;&amp; ${header.resCodePostTrans} == '0' &amp;&amp; ${header.rescreateCustomerCombine} == '0' &amp;&amp; ${header.rescreateAccountCombine} == '0' &amp;&amp; ${header.resAddBenificiaryrCombine} == '0' &amp;&amp; ${header.resAddWalkinCustomerrCombine} == '0'</simple>
                <!-- <log message="in post trans vald..."></log> -->
                <to uri="direct:externalAccount" />
            </when>
        </choice>
        <choice>
            <when>
                <simple>${header.DMSDetailsBit} == '1' &amp;&amp; ${header.resCodePostTrans} == '0' &amp;&amp; ${header.rescreateCustomerCombine} == '0' &amp;&amp; ${header.rescreateAccountCombine} == '0' &amp;&amp; ${header.resAddBenificiaryrCombine} == '0' &amp;&amp; ${header.resAddWalkinCustomerrCombine} == '0' &amp;&amp; ${header.resAddExternalResponse} == '0'</simple>
                <!-- <log message="in post trans vald..."></log> -->
                <to uri="direct:dMSDetails" />
            </when>
        </choice>
        <bean ref="combineBean" method="combine" />
    </route>
    <!--************* create customer route -->
    <route id="RT3_createCustomerRoute" streamCache="true">
        <from uri="direct:createCustomer" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh set body for createCustomer request by calling CreateCustomerRequest bean -->
        <!-- <setBody> <method ref="requestRef" method="getCustReq" /> </setBody> -->
        <setBody>
            <simple>${header.CreateCustomer}</simple>
        </setBody>
        <removeHeader name="CreateCustomer" />
        <marshal><json/></marshal>
        <!-- <unmarshal ref="json2" /> -->
        <unmarshal><json unmarshalType="java.util.List" /></unmarshal>
        <setHeader name="createCustomerListSize">
            <simple>0</simple>
        </setHeader>
        <!--******************************* call CreateCustomerRequestBean to set request json without Map -->
        <bean ref="createCustomerRequestBean" method="splitCreateCustomerRequests" />
        <loop>
            <header>createCustomerListSize</header>
            <setBody>
                <simple>${header.newCreateCustomerRequest${header[CamelLoopIndex]}}</simple>
            </setBody>
            <!-- <setHeader name="createCustomerListSize1"> <simple>${header.createCustomerListSize}</simple> </setHeader> -->
            <!-- <bean ref="custProcessor" method="getCustReqBody"/> -->
            <marshal><json/></marshal>
            <!-- <setHeader name="mobNo"><jsonpath>$.contactDetails.mobile</jsonpath></setHeader> -->
            <!-- <log message="MOB:::${header.mobNo}"></log> -->
            <!-- <setHeader name="custMobNo"> <jsonpath>$.contactDetails.mobile</jsonpath> </setHeader> -->
            <removeHeader name="CamelHttpMethod" />
            <removeHeader name="CamelHttpUri" />
            <removeHeader name="CamelRestletRequest" />
            <removeHeader name="CamelRestletResponse" />
            <removeHeader name="Content-Type" />
            <removeHeader name="charset" />
            <removeHeader name="org.restlet.http.headers" />
            <removeHeader name="org.restlet.startTime" />
            <!-- <removeHeader name="UpdateAccountBit" /> -->
            <!-- <removeHeader name="FPDetails" /> -->
            <!-- <removeHeader name="DMSDetails" /> -->
            <!-- <removeHeader name="manageAccountRelationship" /> -->
            <!-- <removeHeader name="transferPGKAccountno" /> -->
            <setHeader name="Content-Type">
                <simple>application/json</simple>
            </setHeader>
            <!-- <marshal><json/></marshal> -->
            <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh call RequestProcessor bean to set token,X-Correlation-Id,RequestorId and request body -->
            <!-- <process ref="requestProcessor" /> -->
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_8 REQUEST SENT TO CBS FOR CREATE CUSTOMER_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <!--***************** called cxf rest to hit CBS url -->

             <process ref="requestProcessor" />
            <!-- <to uri="cxfrs:bean:rsCreateCustomer?headerFilterStrategy=#fisHeaderFilter" /> -->

            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_9 RESPONSE RECEIVED FROM CSB FOR CREATE CUSTOMER_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <setHeader name="returnCode">
                <jsonpath>$.returnCode</jsonpath>
            </setHeader>
            <choice>
                <when>
                    <simple>${header.returnCode} == '0'</simple>
                    <setHeader name="createCustomerCombine">
                        <simple>${body}</simple>
                    </setHeader>
                    <setHeader name="rescreateCustomerCombine">
                        <jsonpath>$.returnCode</jsonpath>
                    </setHeader>
                    <setHeader name="customerNumber">
                        <jsonpath>$.customerNumber</jsonpath>
                    </setHeader>
                    <setHeader name="CreateCustomerBit">
                        <simple>0</simple>
                    </setHeader>
                    <bean ref="createCustomerRequestBean" method="setCustomerResponse" />
                </when>
                <when>
                    <simple>${header.returnCode} != '0'</simple>
                    <setHeader name="createCustomerCombine">
                        <simple>${body}</simple>
                    </setHeader>
                    <setHeader name="rescreateCustomerCombine">
                        <jsonpath>$.returnCode</jsonpath>
                    </setHeader>
                    <setHeader name="CreateCustomerBit">
                        <simple>1</simple>
                    </setHeader>
                    <bean ref="createCustomerRequestBean" method="setCustomerResponse" />
                </when>
            </choice>
        </loop>
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <!-- <choice><when><simple>${header.returnCode} == 0</simple><bean ref="custProcessor" method="createCustomerResponse"></bean></when></choice> -->
        <bean ref="createCustomerRequestBean" method="createCustomerResponse" />
        <!--************************** ste header for createCustomer response which is use in CombineResponse bean to show output response -->
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <removeHeader name="Camel*" />
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
    </route>
    <!-- **************************** accountCreateRoute -->

    <!--************* Ekyc Charges route route -->
    <route id="RT3_ekycChargesRoute" streamCache="true">
        <from uri="direct:ekycCharges"/>
        <setBody>
            <simple>${header.EkycChargesBody}</simple>
        </setBody>
        <removeHeader name="EkycChargesBody"/>
        <marshal><json/></marshal>
        <doTry>

            <!-- Insert Transaction Request Start -->
            <doTry>
                <setHeader name="ekycAccountNumber">
                    <jsonpath>$.acctFundTransferLegs[0].accountNumber</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="ekycAccountNumber">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="ekycPcode">
                    <jsonpath>$.acctFundTransferLegs[0].transactionType</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="ekycPcode">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="ekycTrace">
                    <jsonpath>$.referenceNo</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="ekycTrace">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="ekycChargeAmount">
                    <jsonpath>$.acctFundTransferLegs[0].amount</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="ekycChargeAmount">
                        <simple>0</simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="ekycSupportData">
                    <jsonpath>$.acctFundTransferLegs[0].supportData</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="ekycSupportData">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="ekycCostCenter">
                    <jsonpath>$.acctFundTransferLegs[0].costCenter</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="ekycCostCenter">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="ekycAppId">
                    <jsonpath>$.appId</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="ekycAppId">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <doTry>
                <setHeader name="ekycIsInclusive">
                    <jsonpath>$.isInclusive</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <setHeader name="ekycIsInclusive">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <setHeader name="TransactionQueryReq">
                <simple>{"Insert_Type": "0","requestType": "1","ACCTNUM": "${header.ekycAccountNumber}","PCODE":
                    "${header.ekycPcode}","MSGTYPE": "0","TRACE": "${header.ekycTrace}","AMOUNT":
                    "${header.ekycChargeAmount}","TERMID": "${header.RequestorId}","Support_data":
                    "${header.ekycSupportData}","CostCenter":"${header.ekycCostCenter}","Credit_Debit_Flag":
                    "C","appId": "${header.ekycAppId}","isInclusive": "${header.ekycIsInclusive}","Method_Id":
                    "${header.MethodId}","X_CORRELATION_ID": "${header.X-Correlation-Id}","Layer": "ESB","TXNDEST":
                    "{{esbHost}}"}
                </simple>
            </setHeader>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration EKYC DBrequest Insert_${header.TransactionQueryReq}"
                 loggingLevel="INFO" logName="com.fino.asynclog"/>
            <doTry>
                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"/>
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception Occured while EKYC que insert: ${exception.stacktrace}"></log>
                </doCatch>
            </doTry>
<!--            <bean ref="requestProcessor"/>-->
            <!-- Insert Transaction Request End -->
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_8 REQUEST SENT TO CBS FOR EkycCharges_${body}"
                 loggingLevel="INFO" logName="com.fino.asynclog"/>
            <bean method="rsPostTransaction" ref="requestProcessor"/>
<!--            <to uri="cxfrs:bean:rsPostTransaction?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false"/>-->

            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_8 Response Received CBS FOR EkycCharges_${body}_____RespCode_${header.CamelHttpResponseCode}"
                 loggingLevel="INFO" logName="com.fino.asynclog"/>
            <setHeader name="ekycReturnCode">
                <jsonpath>$.returnCode</jsonpath>
            </setHeader>
            <!-- <setHeader name="ekycReponse">
                 <simple>${body}</simple>
             </setHeader>  -->
            <setProperty name="ekycReponse">
                <simple>${body}</simple>
            </setProperty>
            <bean ref="requestProcessor" method="setFinalProperty"/>
            <log message="::::::::::::::::ekycReponse::::::  ${exchangeProperty.ekycReponse}"/>
            <choice>
                <when>
                    <simple>${header.ekycReturnCode} == '0'</simple>
                    <setHeader name="ekycReponseDB">
                        <simple>Success</simple>
                    </setHeader>
                    <doTry>
                        <setHeader name="ekycLedgerBalance">
                            <jsonpath>$.balancesList[0].ledgerBalance</jsonpath>
                        </setHeader>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <setHeader name="ekycLedgerBalance">
                                <simple></simple>
                            </setHeader>
                        </doCatch>
                    </doTry>
                    <doTry>
                        <setHeader name="ekycAvailableBalance">
                            <jsonpath>$.balancesList[0].availableBalance</jsonpath>
                        </setHeader>
                        <setHeader name="ekycChargesBit">
                            <simple>0</simple>
                        </setHeader>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <setHeader name="ekycAvailableBalance">
                                <simple></simple>
                            </setHeader>
                        </doCatch>
                    </doTry>
                    <doTry>
                        <setHeader name="ekycChargeAmount">
                            <jsonpath>$.chargesList[0].amount</jsonpath>
                        </setHeader>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <setHeader name="ekycChargeAmount">
                                <simple>0</simple>
                            </setHeader>
                        </doCatch>
                    </doTry>

                    <to uri="seda:SendSMSEkyc?waitForTaskToComplete=Never"/>

                </when>
                <otherwise>
                    <doTry>
                        <setHeader name="ekycReponseDB">
                            <jsonpath>$.responseMessage</jsonpath>
                        </setHeader>
                        <setHeader name="ekycChargesBit">
                            <simple>1</simple>
                        </setHeader>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <setHeader name="ekycReponseDB">
                                <simple>Failure From CBS</simple>
                            </setHeader>
                        </doCatch>
                    </doTry>
                </otherwise>
            </choice>

            <doCatch>
                <exception>java.net.SocketTimeoutException</exception>
                <log
                        message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Socket Exception Occurred_${exception}"
                        loggingLevel="INFO" logName="com.fino.asynclog"/>
                <setHeader name="ekycReturnCode">
                    <simple>1</simple>
                </setHeader>
                <setHeader name="ekycReponseDB">
                    <simple>Socket Timeout</simple>
                </setHeader>
                <!-- <setHeader name="ekycReponse">
                    <simple>{"returnCode": "1", "responseMessage" : "Socket timeout from CBS"}</simple>
                </setHeader> -->
                <setHeader name="ekycChargesBit">
                    <simple>1</simple>
                </setHeader>
                <setProperty name="ekycReponse">
                    <simple>{"returnCode": "1", "responseMessage" : "Socket timeout from CBS"}</simple>
                </setProperty>
            </doCatch>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log
                        message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception Occurred_${exception}"
                        loggingLevel="INFO" logName="com.fino.asynclog"/>
                <setHeader name="ekycReturnCode">
                    <simple>999</simple>
                </setHeader>
                <setHeader name="ekycReponseDB">
                    <simple>Error Occured</simple>
                </setHeader>
                <setHeader name="ekycChargesBit">
                    <simple>1</simple>
                </setHeader>
                <!-- <setHeader name="ekycReponse">
                    <simple>{"returnCode": "999", "responseMessage" : "Error Occured"}</simple>
                </setHeader> -->
                <setProperty name="ekycReponse">
                    <simple>{"returnCode": "999", "responseMessage" : "Error Occured"}</simple>
                </setProperty>
            </doCatch>
            <doFinally>
                <bean method="setEkycResponse" ref="requestProcessor"/>
                <log message="ekycReponse************ ${exchangeProperty.ekycReponse}"></log>
                <setHeader name="TransactionQueryReq">
                    <simple>{"Insert_Type": "1","Request_Type": "1","ACCTNUM": "${header.ekycAccountNumber}","PCODE":
                        "${header.ekycPcode}","MSGTYPE": "0","RESPCODE": "${header.ekycReturnCode}","Response_Msg":
                        "${header.ekycReponseDB}","TRACE": "${header.ekycTrace}","REFNUM":
                        "${header.ActualRRN}","AMOUNT": "${header.ekycChargeAmount}","TERMID":
                        "${header.RequestorId}","Ledger_Balance": "${header.ekycAvailableBalance}","GL_Ledger_Balance":
                        "${header.ekycLedgerBalance}","X_CORRELATION_ID": "${header.X-Correlation-Id}"}
                    </simple>
                </setHeader>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration  EKYC DBResponse Insert_${header.TransactionQueryReq}"
                     loggingLevel="INFO" logName="com.fino.asynclog"/>
                <doTry>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"/>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception Occured while EKYC que insert response: ${exception.stacktrace}"></log>
                    </doCatch>
                </doTry>

            </doFinally>
        </doTry>


    </route>
 


    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh accountCreateRoute -->
    <route id="RT3_accountCreateRoute">
        <from uri="direct:createAccount" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh set body for createCustomer request by calling CreateCustomerRequest bean -->
        <setBody>
            <simple>${header.CreateAccount}</simple>
        </setBody>
        <choice>
            <when>
                <simple>${header.CreateCustomerBitForBene} == '1'</simple>
                <bean ref="createAccountRequestBean" method="replaceCustomerNumber" />
            </when>
        </choice>
        <marshal><json/></marshal>
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="charset" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <!-- <removeHeader name="UpdateAccountBit" /> -->
        <!-- <removeHeader name="CreateCustomer" /> -->
        <!-- <removeHeader name="fPDetails" /> -->
        <!-- <removeHeader name="DMSDetails" /> -->
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh call RequestProcessor bean to set token,X-Correlation-Id,RequestorId and request body -->
        <!-- <bean ref="customertNoCreateAcc" method="process"/> -->
        <!-- <log message="customertNoCreateAcc::::${body}" /> -->

        <!-- <process ref="requestProcessor" /> -->

        <!-- <log message="customerNumber::::::::${header.customerNumber}" /> -->
        <choice>
            <when>
                <simple>${header.CreateCustomerBit} == '0'</simple>
                <log message="ESB_DirectDMTOrchestration in customerNumber..."></log>
                <setHeader name="customerNumber">
                    <jsonpath>$.jointUsers[0].customerNumber</jsonpath>
                </setHeader>
                <setHeader name="customerNumber0">
                    <jsonpath>$.jointUsers[0].customerNumber</jsonpath>
                </setHeader>
            </when>
        </choice>
        <!-- <log message="HEADERS::::${header.customerNumber}" /> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_8 Request Sent TO CBS For Account Creation_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <!--***************** called cxf rest to hit CBS url -->
        <bean method="rsNewAccount" ref="requestProcessor"/>
        <!-- <to uri="cxfrs:bean:rsNewAccount?headerFilterStrategy=#fisHeaderFilter" /> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_9 Response Received FROM CBS For Account Creation_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <setHeader name="createAccountCombine">
            <simple>${body}</simple>
        </setHeader>
        <!-- <bean ref="combineBean" method="combine"/> -->
        <setHeader name="rescreateAccountCombine">
            <jsonpath>$.returnCode</jsonpath>
        </setHeader>
        <setHeader name="returnCode">
            <jsonpath>$.returnCode</jsonpath>
        </setHeader>
        <choice>
            <when>
                <simple>${header.returnCode} == '0'</simple>
                <setHeader name="AccountNumber">
                    <jsonpath>$.accountNumber</jsonpath>
                </setHeader>
                <!-- <log message="ACCNO::${header.AccountNumber}"></log> -->
                <setHeader name="CreateAccountBit">
                    <simple>0</simple>
                </setHeader>
                <!-- <setHeader name="createCustomerListSize"> <simple>0</simple> </setHeader> -->
                <choice>
                    <when>
                        <simple>${header.CreateCustomerBit1} == '0'</simple>
                        <setHeader name="createCustomerListSize">
                            <simple>1</simple>
                        </setHeader>
                    </when>
                    <when>
                        <simple>${header.CreateCustomerBit} == '0'</simple>
                        <setHeader name="createCustomerListSize">
                            <simple>1</simple>
                        </setHeader>
                    </when>
                </choice>
                <!-- <log message="createCustomerListSize:::::::::::::Loop:::::::::::${header.mobNo}" /> -->
                <loop>
                    <header>createCustomerListSize</header>
                    <!-- <log message="createCustomerListSize:::::::::::::Loop${header.mobNo${header[CamelLoopIndex]}}" /> -->
                    <!-- <log message="mobileNumber : ${header.mobilenum${header[CamelLoopIndex]}} "></log> -->
                    <choice>
                        <when>
                            <simple>${header.CreateCustomerBit1} == '1' &amp;&amp; ${header.CreateAccountBit1} == '1'</simple>
                            <setBody>
                                <simple> {"MethodId": "3","TellerID": "11","CustomerMobileNo": "${header.mobNo${header[CamelLoopIndex]}}","EventId": "","NotifyParam": {"TemplateId": "39","@CustID":"${header.customerNumber${header[CamelLoopIndex]}}","@AccountNo":"${header.AccountNumber}"}} </simple>
                            </setBody>
                        </when>
                        <when>
                            <simple>${header.CreateCustomerBit1} == '0' &amp;&amp; ${header.CreateAccountBit1} == '1'</simple>
                            <!-- <log message="In second when:::::::::" /> -->
                            <setBody>
                                <simple> {"MethodId": "3","TellerID": "11","CustomerMobileNo": "${header.mobNo}","EventId": "","NotifyParam": {"TemplateId": "39","@CustID":"${header.customerNumber${header[CamelLoopIndex]}}","@AccountNo":"${header.AccountNumber}"}} </simple>
                            </setBody>
                        </when>
                    </choice>
                    <removeHeader name="CamelHttpMethod" />
                    <removeHeader name="CamelHttpUri" />
                    <removeHeader name="CamelRestletRequest" />
                    <removeHeader name="CamelRestletResponse" />
                    <removeHeader name="Content-Type" />
                    <removeHeader name="org.restlet.http.headers" />
                    <removeHeader name="org.restlet.startTime" />
                    <removeHeader name="Camel*" />
                    <setHeader name="Content-Type">
                        <simple>application/json</simple>
                    </setHeader>
                    <to uri="seda:otpCall?waitForTaskToComplete=Never" />
                </loop>
            </when>
            <otherwise>
                <setHeader name="CreateAccountBit">
                    <simple>1</simple>
                </setHeader>
            </otherwise>
        </choice>
    </route>
    <!--********************* Add Benificiary Route -->
    <route id="RT4_AddBenificairyRoute" streamCache="true">
        <from uri="direct:addBeneficiary" />
        <!-- <setHeader name="X-Auth-Token"> <simple>${header.token12}</simple> </setHeader> -->
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh set body for Add Benificiary request -->
        <setBody>
            <simple>${header.AddBeneficiary}</simple>
        </setBody>
        <marshal><json/></marshal>
        <!-- <log message="AddBeneficiary Request ${body}"></log> <log message="Create Customer Header ${header.rescreateCustomerCombine}"></log> <log message="Create Account Header ${header.rescreateAccountCombine}"></log> <log message="Create Customer Bit ${header.CreateCustomerBit}"></log> -->
        <doTry>
            <setHeader name="SMSbeneficiaryName">
                <jsonpath>$.beneficiaryName</jsonpath>
            </setHeader>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <setHeader name="SMSbeneficiaryName">
                    <simple>-</simple>
                </setHeader>
            </doCatch>
        </doTry>
        <doTry>
            <setHeader name="SMSbeneficiaryAccount">
                <jsonpath>$.beneficiaryAccount</jsonpath>
            </setHeader>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <setHeader name="SMSbeneficiaryAccount">
                    <simple> </simple>
                </setHeader>
            </doCatch>
        </doTry>
        <doTry>
            <setHeader name="SMSbeneficiaryBank">
                <jsonpath>$.beneficiaryBank</jsonpath>
            </setHeader>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <setHeader name="SMSbeneficiaryBank">
                    <simple>-</simple>
                </setHeader>
            </doCatch>
        </doTry>
        <choice>
            <when>
                <simple>${header.rescreateCustomerCombine} == '0' &amp;&amp; ${header.rescreateAccountCombine} == '0' &amp;&amp; ${header.CreateCustomerBitForBene} == '1'</simple>
                <!-- <log message="Replacing CustomerNumber "></log> -->
                <unmarshal><json/></unmarshal>
                <bean ref="addBeneficiaryBean" method="replaceCustomerForAddBeneficiary"></bean>
                <marshal><json/></marshal>
            </when>
        </choice>
        <!-- <choice> <when> <simple>${header.CreateCustomerBit1} == 0 or ${header.CreateAccountBit1} == 0 </simple> <marshal><json/></marshal> </when> </choice> -->
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="charset" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <!-- <removeHeader name="CreateCustomer" /> -->
        <!-- <removeHeader name="FPDetails" /> -->
        <!-- <removeHeader name="DMSDetails" /> -->
        <!-- <removeHeader name="UpdateAccountBit" /> -->
        <!-- <removeHeader name="updateAccount" /> -->
        <removeHeader name="org.restlet.startTime" />
        <!-- <removeHeader name="FPDetails" /> -->
        <!-- <removeHeader name="createCustomer" /> -->
        <!-- <removeHeader name="manageAccountRelationship" /> -->
        <!-- <removeHeader name="transferPGKAccountno" /> -->
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh call RequeatProcessor bean to set X-Auth-Token and request body -->
        <!-- <log message="in add benii :${body}"></log> -->
        <!-- <process ref="requestProcessor" /> -->
        <!--***************** called cxf rest to hit CBS url -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_8 REQUEST SENT TO CBS FOR Add Beneficiary_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <!--***************** called cxf rest to hit CBS url -->
        <bean method="rsAddBeneficiary" ref="requestProcessor"/>
        <!-- <to uri="cxfrs:bean:rsAddBeneficiary?headerFilterStrategy=#fisHeaderFilter" /> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_9 RESPONSE RECEIVED FROM CBS FOR Add Beneficiary_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <convertBodyTo type="java.lang.String"/>
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <setHeader name="AddBenificiaryCombine">
            <simple>${body}</simple>
        </setHeader>
        <setHeader name="resAddBenificiaryrCombine">
            <jsonpath>$.returnCode</jsonpath>
        </setHeader>
        <!-- <bean ref="combineBean" method="combine"/> -->
        <choice>
            <when>
                <simple>${header.resAddBenificiaryrCombine} == '0'</simple>
                <setHeader name="AddBeneficiaryBit">
                    <simple>0</simple>
                </setHeader>
                <setHeader name="storedBeneDetails"><simple>{{ESB_storedBeneDetails}}</simple></setHeader>
                 <choice>
                     <when>
                         <simple>${header.storedBeneDetails} == '0'</simple>
                         <wireTap uri="direct:dbInsertion" />
                     </when>
                 </choice>
            </when>
            <otherwise>
                <setHeader name="AddBeneficiaryBit">
                    <simple>1</simple>
                </setHeader>
            </otherwise>
        </choice>
        <doTry>
            <choice>
                <when>
                    <simple>${header.resAddBenificiaryrCombine} == '0'</simple>
                    <choice>
                        <when>
                            <simple>${header.IMPS_appId} == 'IBR'</simple>
                            <setBody>
                                <simple> {"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId": "3037", "@NoMaskAccountNo": "${header.SMSbeneficiaryAccount}","@Name":"${header.SMSbeneficiaryBank}","@Benename":"${header.SMSbeneficiaryName}"}} </simple>
                            </setBody>
                        </when>
                        <otherwise>
                            <setBody>
                                <simple> {"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId": "396", "@NoMaskAccountNo": "${header.SMSbeneficiaryAccount}","@Name":"${header.SMSbeneficiaryBank}","@Benename":"${header.SMSbeneficiaryName}"}} </simple>
                            </setBody>
                        </otherwise>
                    </choice>
                    <removeHeader name="CamelHttpMethod" />
                    <removeHeader name="CamelHttpUri" />
                    <removeHeader name="CamelRestletRequest" />
                    <removeHeader name="CamelRestletResponse" />
                    <removeHeader name="Content-Type" />
                    <removeHeader name="org.restlet.http.headers" />
                    <removeHeader name="org.restlet.startTime" />
                    <removeHeader name="Camel*" />
                    <!-- <setHeader name="Content-Type"><simple>application/json</simple></setHeader> <to uri="{{ESB_SMSService_FINO_URL_{{currentSetUp}}}}"/> -->
                    <to uri="seda:otpCall?waitForTaskToComplete=Never" />
                    <removeHeader name="custIdforbeni" />
                    <removeHeader name="BeniAccount" />
                    <removeHeader name="beneficiaryName" />
                </when>
            </choice>
            <removeHeader name="SMSbeneficiaryAccount"></removeHeader>
            <removeHeader name="SMSbeneficiaryName"></removeHeader>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_10 Exception Occurred While Sending AddBeneficiary SMS_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception Occurred While Sending AddBeneficiary SMS_${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
            </doCatch>
        </doTry>
    </route>
    <!--****************************** Add Walking Customer Route -->
    <route id="RT5_AddWalkinCustomerRoute" streamCache="true">
        <from uri="direct:addWalkinCustomer" />
        <!-- <log message="in add walkin....."></log> -->
        <!-- <setHeader name="X-Auth-Token"> <simple>${header.token12}</simple> </setHeader> -->
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh set body for updateAccount request -->
        <setBody>
            <simple>${header.AddWalkinCustomer}</simple>
        </setBody>
        <bean ref="requestProcessor" method="addAddress" />
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="charset" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <!-- <removeHeader name="dMSDetails" /> -->
        <!-- <removeHeader name="UpdateAccountBit" /> -->
        <!-- <removeHeader name="CreateCustomer" /> -->
        <removeHeader name="org.restlet.startTime" />
        <!-- <removeHeader name="updateCustomer" /> -->
        <!-- <removeHeader name="GetPGNDetails" /> -->
        <!-- <removeHeader name="manageAccountRelationship" /> -->
        <!-- <removeHeader name="transferPGKAccountno" /> -->
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <!-- <to uri="log:before?showHeaders=true" /> -->
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh call RequeatProcessor bean to set X-Auth-Token and request body -->
        <!-- <log message="in add walkin :${body}"></log> -->
        <marshal><json/></marshal>
        <!-- <process ref="requestProcessor" /> -->
        <!--***************** called cxf rest to hit CBS url -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_8 REQUEST SENT TO CBS FOR Add Walkin customer_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <!--***************** called cxf rest to hit CBS url -->
         <bean method="rsAddWalkinCustomer" ref="requestProcessor"/>
        <!-- <to uri="cxfrs:bean:rsAddWalkinCustomer?headerFilterStrategy=#fisHeaderFilter" /> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_9 RESPONSE RECEIVED FROM CBS FOR Add Walkin customer_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <convertBodyTo type="java.lang.String"/>
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <setHeader name="addWalkingCustomerCombine">
            <simple>${body}</simple>
        </setHeader>
        <!-- <bean ref="combineBean" method="combine"/> -->
        <setHeader name="resAddWalkinCustomerrCombine">
            <jsonpath>$.returnCode</jsonpath>
        </setHeader>
        <choice>
            <when>
                <simple>${header.resAddWalkinCustomerrCombine} == '0'</simple>
                <setHeader name="AddWalkinCustomerBit">
                    <simple>0</simple>
                </setHeader>
            </when>
            <otherwise>
                <setHeader name="AddWalkinCustomerBit">
                    <simple>1</simple>
                </setHeader>
            </otherwise>
        </choice>
    </route>
    <!--************* post transaction route -->
    <route id="RT6_PostTransactionRoute" streamCache="true">
        <from uri="direct:postTransaction" />
        <setBody>
            <simple>${header.PostTransaction}</simple>
        </setBody>
        <bean ref="checkTransTypeBean" method="checkTransType" />
        <!-- <log message="reveres : ${header.reverseFlag}"></log> -->
        <marshal><json/></marshal>
        <!-- <unmarshal ref="json2" /> -->
        <unmarshal><json unmarshalType="java.util.List" /></unmarshal>
        <!-- <log message="afterj3::::${body}"></log> -->
        <setHeader name="postTransactionListSize">
            <simple>1</simple>
        </setHeader>
        <bean ref="postTransactionRequestBean" method="splitPostTransactionRequests" />
        <doTry>
            <loop>
                <header>postTransactionListSize</header>
                <!-- <log message="In Loop"></log> -->
                <setBody>
                    <simple>${header.txnRequest${header[CamelLoopIndex]}}</simple>
                </setBody>
                <setHeader name="currentReference">
                    <simple>${body[referenceNo]}</simple>
                </setHeader>
                <setHeader name="ReferenceNoDB">
                    <simple>${body[referenceNo]}</simple>
                </setHeader>
                <marshal><json/></marshal>
                <doTry>
                    <setHeader name="analysisFlag">
                        <jsonpath>$.analysisFlag</jsonpath>
                    </setHeader>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <log message="ESB_DirectDMTOrchestration Exception Occured : ${exception.stacktrace}"></log>
                        <setHeader name="analysisFlag">
                            <simple></simple>
                        </setHeader>
                    </doCatch>
                </doTry>
                <!-- <convertBodyTo type="java.lang.String" /> -->
                <choice>
                    <when>
                        <simple>${header.OriginalCreateAccountBit} == '0'</simple>
                        <setHeader name="AccountNumber">
                            <jsonpath>$.acctFundTransferLegs[0].accountNumber</jsonpath>
                        </setHeader>
                    </when>
                </choice>
                <!-- <log message="custProcessor::::${body}"></log> -->
                <!-- <setHeader name="postTransactionListSize1"> <simple>${header.postTransactionListSize}</simple> </setHeader> -->
                <!-- <bean ref="custProcessor" method="getCustReqBody"/> -->
                <!-- <setHeader name="mobNo"><jsonpath>$.contactDetails.mobile</jsonpath></setHeader> -->
                <!-- <log message="MOB:::${header.mobNo}"></log> -->
                <!-- <setHeader name="custMobNo"> <jsonpath>$.contactDetails.mobile</jsonpath> </setHeader> -->
                <removeHeader name="CamelHttpResponseCode" />
                <removeHeader name="Content-Length" />
                <removeHeader name="CamelHttpMethod" />
                <removeHeader name="CamelHttpUri" />
                <removeHeader name="CamelRestletRequest" />
                <removeHeader name="CamelRestletResponse" />
                <!-- <removeHeader name="Content-Type" /> -->
                <removeHeader name="charset" />
                <removeHeader name="org.restlet.http.headers" />
                <removeHeader name="org.restlet.startTime" />
                <!-- <removeHeader name="CreateCustomer" /> -->
                <removeHeader name="CamelHttpResponseCode" />
                <removeHeader name="CamelAcceptContentType" />
                <removeHeader name="CamelCxfRsUsingHttpAPI" />
                <removeHeader name="Content-Length" />
                <!-- <removeHeader name="RequestData" /> -->
                <!-- <removeHeader name="CreateAccount" /> -->
                <!-- <removeHeader name="otp" /> -->
                <removeHeader name="Content-Type" />
                <!-- <removeHeader name="AddBeneficiary" /> -->
                <!-- <removeHeader name="CreateCustomerCombine" /> -->
                <!-- <removeHeader name="authRespCode" /> -->
                <!-- <removeHeader name="authId" /> -->
                <!-- <removeHeader name="Fp_Auth" /> -->
                <setHeader name="Content-Type">
                    <simple>application/json</simple>
                </setHeader>
                <!-- <log message="JSON Before Replace ${body}"></log> -->
                <choice>
                    <when>
                        <simple>${header.OriginalCreateAccountBit} == '1' </simple>
                        <log message="ESB_DirectDMTOrchestration BODY Before Replace ${body}"></log>
                        <unmarshal><json/></unmarshal>
                        <bean ref="postTransactionRequestBean" method="replaceAccountNumber" />
                        <marshal><json/></marshal>
                        <log message="ESB_DirectDMTOrchestration BODY After Replace ${body}"></log>
                    </when>
                </choice>
                <!-- <log message="ACCNO:::${body}" /> <log message="X-Auth-Token ${header.X-Auth-Token}"></log> <log message="Body ${body}"></log> -->
                <setHeader name="OrgRequest">
                    <simple>${body}</simple>
                </setHeader>
                <!-- Database Insert For Request -->
                <doTry>
                    <choice>
                        <when>
                            <simple>${header.analysisFlag} != '1'</simple>
                            <unmarshal><json/></unmarshal>
                            <bean ref="databaseBean" method="setDBRequestJSON" />
                            <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                            <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                            <setBody>
                                <simple>${header.txnRequest${header[CamelLoopIndex]}}</simple>
                            </setBody>
                            <marshal><json/></marshal>
                        </when>
                    </choice>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <log message="ESB_DirectDMTOrchestration Exception Occured During Database Insert of CBS Posting Request ${exception.stacktrace}"></log>
                    </doCatch>
                </doTry>
                <!-- Database Insert For Request Ends -->
                <setBody>
                    <simple>${header.OrgRequest}</simple>
                </setBody>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_11 REQUEST SENT TO CBS 1111_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
                <setHeader name="Content-Type">
                    <simple>application/json</simple>
                </setHeader>
                <setHeader name="refNo">
                    <jsonpath>$.referenceNo</jsonpath>
                </setHeader>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_12 REQUEST SENT TO CBS 1111_${header.refNo} " loggingLevel="INFO" logName="com.fino.asynclog" />
                <removeHeader name="OrgRequest"></removeHeader>
                <!-- <process ref="requestProcessor" /> -->
                <!-- Check Trasnaction or charges requets when analysis flag is equal to 1 then its charges request other wise it call transaction -->
                <choice>
                    <when>
                        <simple>${header.analysisFlag} == '1'</simple>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_13 REQUEST SENT TO CBS FOR CALCULATE CHARGES_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
                      <bean method="rsTransactionCharges" ref="requestProcessor"/>
                        <!-- <to uri="cxfrs:bean:rsTransactionCharges?headerFilterStrategy=#fisHeaderFilter" /> -->
                    </when>
                    <otherwise>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_14 REQUEST SENT TO CBS FOR POST TRANSACTION_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
                        <doTry>
                          <bean method="rsPostTransaction" ref="requestProcessor"/>
                            <!-- <to uri="cxfrs:bean:rsPostTransaction?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
                            <doCatch>
                                <exception>java.net.SocketTimeoutException</exception>
                                <log message="ESB_DirectDMTOrchestration X-Correlation-Id_${header.X-Correlation-Id} EXCEPTION OCCURRED_${exception.message}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                <setBody>
                                    <simple>{"returnCode":"998","responseMessage":"Time Out From CBS"}</simple>
                                </setBody>
                                <setHeader name="CamelHttpResponseCode">
                                    <simple>998</simple>
                                </setHeader>
                                <setHeader name="Content-Type">
                                    <simple>application/json</simple>
                                </setHeader>
                            </doCatch>
                        </doTry>
                    </otherwise>
                </choice>
                <convertBodyTo type="java.lang.String"/>
                <choice>
                    <when>
                        <simple>${header.CamelHttpResponseCode} == '200'</simple>
                        <setHeader name="resCodePostTrans">
                            <jsonpath>$.returnCode</jsonpath>
                        </setHeader>
                    </when>
                    <otherwise>
                        <setHeader name="resCodePostTrans">
                            <simple>${header.CamelHttpResponseCode}</simple>
                        </setHeader>
                        <!--<doTry> <setHeader name="FISResponseMessage"> <jsonpath>$.responseMessage</jsonpath> </setHeader> <doCatch> <exception>java.lang.Exception</exception> <log message="Response Message not found from CBS_${exception}"/> <setHeader name="FISResponseMessage"> <simple>Error Occurred</simple> </setHeader> </doCatch> </doTry>-->
                        <setBody>
                            <simple>{"returnCode":"${header.resCodePostTrans}","responseMessage":"${header.FISResponseMessage}"}</simple>
                        </setBody>
                    </otherwise>
                </choice>
                <setHeader name="OrgResponse">
                    <simple>${body}</simple>
                </setHeader>
                <bean ref="postTransactionRequestBean" method="setPostTransactionResponse" />
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_15 RESPONSE RECEIVED FROM CBS for post transaction_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
                <!-- Database Insert For Response -->
                <doTry>
                    <choice>
                        <when>
                            <simple>${header.analysisFlag} != '1'</simple>
                            <setHeader name="OrgResponse">
                                <simple>${body}</simple>
                            </setHeader>
                            <unmarshal><json/></unmarshal>
                            <bean ref="databaseBean" method="setDBResponseJSON" />
                            <log message="ESB_DirectDMTOrchestration Request TO Database Queue for Transaction Response ${header.TransactionQueryReq}"></log>
                            <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                            <setBody>
                                <simple>${header.OrgResponse}</simple>
                            </setBody>
                        </when>
                    </choice>
                    <doCatch>
                        <exception>java.lang.Exception</exception>
                        <setBody>
                            <simple>${header.OrgResponse}</simple>
                        </setBody>
                        <log message="ESB_DirectDMTOrchestration Exception Occured During Database Insert of CBS Posting Response"></log>
                    </doCatch>
                </doTry>
                <!-- Database Insert For Response Ends -->
                <setHeader name="resCodePostTrans">
                    <jsonpath>$.returnCode</jsonpath>
                </setHeader>
                <choice>
                    <when>
                        <simple>${header.resCodePostTrans} != '0'</simple>
                        <choice>
                            <when>
                                <simple>${header.analysisFlag} == '1'</simple>
                            </when>
                            <otherwise>
                                <setHeader name="FailedIndex">
                                    <simple>${header[CamelLoopIndex]}</simple>
                                </setHeader>
                                <setHeader name="postTransRes">
                                    <simple>${body}</simple>
                                </setHeader>
                                <when>
                                    <simple>${header.resCodePostTrans} == '998' </simple>
                                    <bean ref="postTransactionRequestBean" method="setSuccessIndexes" />
                                </when>
                                <to uri="direct:ReverseTransaction" />
                                <throwException ref="loopBreak"></throwException>
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <simple>${header.resCodePostTrans} == '0'</simple>
                        <bean ref="postTransactionRequestBean" method="setSuccessIndexes" />
                    </when>
                </choice>
                <removeHeader name="currentReference"></removeHeader>
            </loop>
            <doCatch>
                <exception>com.finobank.Quarkus_DirectDMTOrchestration.LoopBreakException</exception>
                <log message="ESB_DirectDMTOrchestration Exiting Loop ${exception}"></log>
                <removeHeader name="currentReference"></removeHeader>
                <!-- <log message="postTransRes : ${header.postTransRes}"></log> -->
            </doCatch>
            <doFinally>
                <bean ref="postTransactionRequestBean" method="createPostTransactionResponse" />
            </doFinally>
        </doTry>
        <choice>
            <when>
                <simple>${header.resCodePostTrans} == '0'</simple>
                <setHeader name="PostTransactionBit">
                    <simple>0</simple>
                </setHeader>
                <choice>
                    <when>
                        <simple>${header.analysisFlag} == '1'</simple>
                        <setHeader name="impsRespCode">
                            <simple>0</simple>
                        </setHeader>
                    </when>
                    <otherwise>
                        <!-- IMPS Posttransaction -->
                        <choice>
                            <when>
                                <simple>${header.txnType} == 'IMPS'</simple>
                                <setBody>
                                    <simple>${header.IMPSServiceDataList}</simple>
                                </setBody>
                                <marshal><json/></marshal>
                                <!-- <unmarshal ref="json2"></unmarshal> -->
                                <unmarshal><json unmarshalType="java.util.List" /></unmarshal>
                                <!-- <bean ref="splitTransactionBean" method="splitIMPSIndividualTxn"></bean> -->
                                <bean ref="impsPostingRequestBean" method="splitIMPSIndividualTxn"></bean>
                                <bean ref="impsPostingRequestBean" method="checkNPCIChannels"></bean>
                                <choice>
                                    <when>
                                        <simple>${header.asyncFlag} == 'Y'</simple>
                                        <!--Async Transactions -->
                                        <to uri="direct:IMPSQueue" />
                                        <setHeader name="impsRespCode">
                                            <simple>0</simple>
                                        </setHeader>
                                    </when>
                                    <otherwise>
                                        <choice>
                                            <when>
                                                <simple>${header.UserCheckFlag} == 'Y'</simple>
                                                <bean ref="impsPostingRequestBean" method="checkNPCIUser"></bean>
                                                <choice>
                                                    <when>
                                                        <simple>${header.NPCIUsersValid} == '0'</simple>
                                                        <!-- Routing based on channel -->
                                                        <choice>
                                                            <when>
                                                                <simple>${header.NPCIChannelFlag} == '0'</simple>
                                                                <!-- Routing based on channel and trantype -->
                                                                <choice>
                                                                    <when>
                                                                        <simple>${header.IMPS_appId} == 'MB' || ${header.IMPS_appId} == 'IBR'</simple>
                                                                        <to uri="direct:PostToNPCI" />
                                                                    </when>
                                                                    <when>
                                                                        <simple>${header.NPCITranFlag} == '0'</simple>
                                                                        <to uri="direct:PostToNPCI" />
                                                                    </when>
                                                                    <otherwise>
                                                                        <choice>
                                                                            <when>
                                                                                <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2A'</simple>
                                                                                <to uri="direct:PostToIMPSPPI" />
                                                                            </when>
                                                                            <when>
                                                                                <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2AC'</simple>
                                                                                <to uri="direct:PostToIMPSPPI" />
                                                                            </when>
                                                                            <when>
                                                                                <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                                                                                <!-- Reversal -->
                                                                            </when>
                                                                            <otherwise>
                                                                                <to uri="direct:PostToIMPS" />
                                                                            </otherwise>
                                                                        </choice>
                                                                    </otherwise>
                                                                </choice>
                                                            </when>
                                                            <otherwise>
                                                                <choice>
                                                                    <when>
                                                                        <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2A'</simple>
                                                                        <to uri="direct:PostToIMPSPPI" />
                                                                    </when>
                                                                    <when>
                                                                        <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2AC'</simple>
                                                                        <to uri="direct:PostToIMPSPPI" />
                                                                    </when>
                                                                    <when>
                                                                        <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                                                                        <!-- Reversal -->
                                                                    </when>
                                                                    <otherwise>
                                                                        <to uri="direct:PostToIMPS" />
                                                                    </otherwise>
                                                                </choice>
                                                            </otherwise>
                                                        </choice>
                                                    </when>
                                                    <otherwise>
                                                        <choice>
                                                            <when>
                                                                <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2A'</simple>
                                                                <to uri="direct:PostToIMPSPPI" />
                                                            </when>
                                                            <when>
                                                                <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2AC'</simple>
                                                                <to uri="direct:PostToIMPSPPI" />
                                                            </when>
                                                            <when>
                                                                <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                                                                <!-- Reversal -->
                                                            </when>
                                                            <otherwise>
                                                                <to uri="direct:PostToIMPS" />
                                                            </otherwise>
                                                        </choice>
                                                    </otherwise>
                                                </choice>
                                            </when>
                                            <otherwise>
                                                <!-- Routing based on channel -->
                                                <choice>
                                                    <when>
                                                        <simple>${header.NPCIChannelFlag} == '0'</simple>
                                                        <!-- Routing based on channel and trantype -->
                                                        <choice>
                                                            <when>
                                                                <simple>${header.IMPS_appId} == 'MB' || ${header.IMPS_appId} == 'IBR'</simple>
                                                                <to uri="direct:PostToNPCI" />
                                                            </when>
                                                            <when>
                                                                <simple>${header.NPCITranFlag} == '0'</simple>
                                                                <to uri="direct:PostToNPCI" />
                                                            </when>
                                                            <otherwise>
                                                                <choice>
                                                                    <when>
                                                                        <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2A'</simple>
                                                                        <to uri="direct:PostToIMPSPPI" />
                                                                    </when>
                                                                    <when>
                                                                        <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2AC'</simple>
                                                                        <to uri="direct:PostToIMPSPPI" />
                                                                    </when>
                                                                    <when>
                                                                        <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                                                                        <!-- Reversal -->
                                                                    </when>
                                                                    <otherwise>
                                                                        <to uri="direct:PostToIMPS" />
                                                                    </otherwise>
                                                                </choice>
                                                            </otherwise>
                                                        </choice>
                                                    </when>
                                                    <otherwise>
                                                        <choice>
                                                            <when>
                                                                <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2A'</simple>
                                                                <to uri="direct:PostToIMPSPPI" />
                                                            </when>
                                                            <when>
                                                                <simple>${header.IMPSPPIIdentifier} == 'A' &amp;&amp; ${header.transType} == 'IMPSFTP2AC'</simple>
                                                                <to uri="direct:PostToIMPSPPI" />
                                                            </when>
                                                            <when>
                                                                <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                                                                <!-- Reversal -->
                                                            </when>
                                                            <otherwise>
                                                                <to uri="direct:PostToIMPS" />
                                                            </otherwise>
                                                        </choice>
                                                    </otherwise>
                                                </choice>
                                            </otherwise>
                                        </choice>
                                        <!-- Change Route -->
                                        <!-- <choice> <when> <simple>${header.impsRouteIdentifer} == 'NPCI'</simple> <to uri="direct:PostToNPCI" /> </when> <when> <simple>${header.impsRouteIdentifer} == 'ICICI'</simple> <choice> <when> <simple>${header.IMPSPPIIdentifier} == 'A' and ${header.transType} == 'IMPSFTP2A'</simple> <to uri="direct:PostToIMPSPPI" /> </when> <when> <simple>${header.IMPSPPIIdentifier} == 'A' and ${header.transType} == 'IMPSFTP2AC'</simple> <to uri="direct:PostToIMPSPPI" /> </when> <when> <simple>${header.IMPSPPIIdentifier} == 'A'</simple> Reversal </when> <otherwise> <to uri="direct:PostToIMPS" /> </otherwise> </choice> </when> </choice> -->
                                        <choice>
                                            <when>
                                                <simple>${header.IMPSAwaitingFlag} == '0'</simple>
                                                <setHeader name="impsRespCode">
                                                    <simple>0</simple>
                                                </setHeader>
                                                <choice>
                                                    <when>
                                                        <simple>${header.impsReturnCode} == '0'</simple>
                                                        <!-- Reversal Of Transactions For Bene Verification if BeneName is UNREGISTERED,NA or blank-->
                                                        <choice>
                                                            <when>
                                                                <simple>${header.transType} == 'IMPSBENV' || ${header.transType} == 'IMPSBENVC' || ${header.transType} == 'DMTIMPSBENV'</simple>
                                                                <setBody>
                                                                    <simple>${header.IMPSResponse}</simple>
                                                                </setBody>
                                                                <unmarshal><json/></unmarshal>
                                                                <setHeader name="IMPSResBeneName">
                                                                    <simple>${body[BeneName].trim()}</simple>
                                                                </setHeader>
                                                                <choice>
                                                                    <when>
                                                                        <simple>${header.IMPSResBeneName.toUpperCase()} == 'UNREGISTERED' || ${header.IMPSResBeneName.toUpperCase()} == 'NA' || ${header.IMPSResBeneName} == '' </simple>
                                                                        <!-- Reversal Of Transactions -->
                                                                        <log message=" Invalid Beneficiary Name Received From IMPS"></log>
                                                                        <!--RFU Update For Failure Reason -->
                                                                        <setBody>
                                                                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "${header.IMPSRFUT6},${header.IMPSResBeneName}"}</simple>
                                                                        </setBody>
                                                                        <!-- <process ref="requestProcessor" /> -->
                                                                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                                                        <!-- <process ref="requestProcessor" /> -->
                                                                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                                                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_17 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                                        <!--RFU Update For Failure Reason -->
                                                                        <setHeader name="IMPSAwaitingFlag">
                                                                            <simple>1</simple>
                                                                        </setHeader>
                                                                        <to uri="direct:IMPSBenerevPost" />
                                                                        <!-- <to uri="direct:ReverseTransactionAfterIMPS" /> -->
                                                                        <!-- Set Failed Response For -->
                                                                        <setBody>
                                                                            <simple>${header.IMPSResponse}</simple>
                                                                        </setBody>
                                                                        <unmarshal><json/></unmarshal>
                                                                        <bean ref="impsPostingRequestBean" method="setFailedResponse"></bean>
                                                                        <marshal><json/></marshal>
                                                                        <convertBodyTo type="java.lang.String"></convertBodyTo>
                                                                        <setHeader name="IMPSResponse">
                                                                            <simple>${body}</simple>
                                                                        </setHeader>
                                                                    </when>
                                                                </choice>
                                                            </when>
                                                        </choice>
                                                    </when>
                                                </choice>
                                            </when>
                                            <when>
                                                <simple>${header.impsRespCode} != '0'</simple>
                                                <!-- Reversal Of Transactions -->
                                                <to uri="direct:ReverseTransactionAfterIMPS" />
                                            </when>
                                            <when>
                                                <simple>${header.impsRespCode} == '0'</simple>
                                                <!-- Reversal Of Transactions For Bene Verification if BeneName is UNREGISTERED,NA or blank (‘’).-->
                                                <choice>
                                                    <when>
                                                        <simple>${header.transType} == 'IMPSBENV' || ${header.transType} == 'IMPSBENVC' || ${header.transType} == 'DMTIMPSBENV'</simple>
                                                        <setBody>
                                                            <simple>${header.IMPSResponse}</simple>
                                                        </setBody>
                                                        <unmarshal><json/></unmarshal>
                                                        <setHeader name="IMPSResBeneName">
                                                            <simple>${body[BeneName].trim()}</simple>
                                                        </setHeader>
                                                        <!-- <bean ref="impsPostingRequestBean" method="checkIfVerificationBeneNameInvalid"></bean> -->
                                                        <choice>
                                                            <when>
                                                                <simple>${header.IMPSResBeneName.toUpperCase()} == 'UNREGISTERED' || ${header.IMPSResBeneName.toUpperCase()} == 'NA' || ${header.IMPSResBeneName} == '' </simple>
                                                                <!-- Reversal Of Transactions -->
                                                                <log message=" Invalid Beneficiary Name Received From IMPS"></log>
                                                                <!--RFU Update For Failure Reason -->
                                                                <setBody>
                                                                    <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "${header.IMPSRFUT6},${header.IMPSResBeneName}"}</simple>
                                                                </setBody>
                                                                <!-- <process ref="requestProcessor" /> -->
                                                                <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                                                <!-- <process ref="requestProcessor" /> -->
                                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                                                <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                                                <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                                <!--RFU Update For Failure Reason -->
                                                                <!-- <to uri="direct:ReverseTransactionAfterIMPS" />-->
                                                                <to uri="direct:IMPSBenerevPost" />
                                                                <!-- Set Failed Response For -->
                                                                <setBody>
                                                                    <simple>${header.IMPSResponse}</simple>
                                                                </setBody>
                                                                <unmarshal><json/></unmarshal>
                                                                <bean ref="impsPostingRequestBean" method="setFailedResponse"></bean>
                                                                <marshal><json/></marshal>
                                                                <convertBodyTo type="java.lang.String"></convertBodyTo>
                                                                <setHeader name="IMPSResponse">
                                                                    <simple>${body}</simple>
                                                                </setHeader>
                                                            </when>
                                                        </choice>
                                                    </when>
                                                </choice>
                                            </when>
                                        </choice>
                                    </otherwise>
                                </choice>
                            </when>
                            <when>
                                <simple>${header.txnType} == 'NEFT'</simple>
                                <!-- CASA SMS Changes -->
                                <choice>
                                    <when>
                                        <simple>${header.transType} == 'DMTNEFT' || ${header.transType} == 'NEFTC'</simple>
                                        <!-- DMT Init for NEFT-->
                                        <setBody>
                                            <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId": "2603","@Amount": "${header.totalAmount}","@Benename": "${header.NEFTBeneName}","@AccountNo":"${header.NEFTBeneAccNum}"}}</simple>
                                        </setBody>
                                        <setHeader name="Content-Type">
                                            <simple>application/json</simple>
                                        </setHeader>
                                        <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
                                        <!-- DMT Init Ends -->
                                    </when>
                                    <when>
                                        <simple>${header.transType} == 'NEFT'</simple>
                                        <!-- CASA NEFT SMS -->
                                        <setBody>
                                            <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId": "463","@INR": "${header.totalAmount}","@AccountNo": "${header.AccountNumber}","@Date": "${date:now:dd-MMM-yyyy}","@Time": "${date:now:HH:mm:ss a}","@TranID": "${header.NEFTSMSRefNum}","@Benename": "${header.NEFTBeneName}","@BenefiAccountNo":"${header.NEFTBeneAccNum}","@ChequeNo":"${header.NEFTBeneIFSC}","@TotalINR":"${header.CustBalance}"}}</simple>
                                        </setBody>
                                        <setHeader name="Content-Type">
                                            <simple>application/json</simple>
                                        </setHeader>
                                        <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
                                    </when>
                                </choice>
                                <!-- Merchant SMS For NEFT -->
                                <doTry>
                                    <choice>
                                        <when>
                                            <simple>${header.IMPS_appId} == 'FINOMER' || ${header.IMPS_appId} == 'FINOMERNP'</simple>
                                            <setBody>
                                                <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MerchantMobileNum}","EventId": "","NotifyParam": {"TemplateId":"415","@Amount":"${header.MerchantAmt}","@SRType":"NEFT Fund Transfer","@BALamount": "${header.availableBalance}","@MobileNo/EmailID": "${header.MobileNumForSMS}"}}</simple>
                                            </setBody>
                                            <setHeader name="Content-Type">
                                                <simple>application/json</simple>
                                            </setHeader>
                                            <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
                                        </when>
                                    </choice>
                                    <doCatch>
                                        <exception>java.lang.Exception</exception>
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 EXCEPTION OCCURRED NEFT MERCHANT SMS_${exception.stacktrace}" loggingLevel="INFO" />
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED NEFT MERCHANT SMS_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                    </doCatch>
                                </doTry>
                                <!-- NEFT Merchant SMS Ends -->
                            </when>
                        </choice>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <setHeader name="PostTransactionBit">
                    <simple>1</simple>
                </setHeader>
            </otherwise>
        </choice>
        <!-- <log message="FINAL post trans Ress:::::${header.creditRes}"></log> <doTry> <setBody> <simple>${header.creditRes}</simple> </setBody> <setHeader name="FirstTransactionReturnCode"> <jsonpath>$.[0].returnCode</jsonpath> </setHeader> <doCatch> <exception>java.lang.Exception</exception> <log message="exception in reversal ; ${exception}"></log> <setHeader name="FirstTransactionReturnCode"> <simple></simple> </setHeader> </doCatch> </doTry> -->
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh Reversal call when PoatTrans failed start <log message="reverseFlagForFirstTrans : ${header.reverseFlagForFirstTrans}"></log> <log message="reverseFlagForSecondTrans : ${header.reverseFlagForSecondTrans}"></log> <log message="resCodePostTrans : ${header.resCodePostTrans}"></log> <log message="FirstTransactionReturnCode : ${header.FirstTransactionReturnCode}"></log> <choice> <when> <simple>${header.reverseFlagForFirstTrans} == 0 and ${header.reverseFlagForSecondTrans} == 1 and ${header.resCodePostTrans} == 1 and ${header.FirstTransactionReturnCode} == 0</simple> <to uri="direct:reversalRoute" /> </when> </choice> -->
        <!--****** Reversal call when PoatTrans failed end -->
    </route>
    <!--****** Add External Account -->
    <route id="RT7_AddExternalAccount_Route" streamCache="true">
        <from uri="direct:externalAccount" />
        <!-- <setHeader name="X-Auth-Token"> <simple>${header.token12}</simple> </setHeader> -->
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh set body for updateCustomer request -->
        <setBody>
            <simple>${header.AddExternalAccount}</simple>
        </setBody>
        <choice>
            <when>
                <simple>${header.CreateCustomerBitForBene} == '0' &amp;&amp; ${header.OriginalCreateAccountBit} == '0'</simple>
                <marshal><json/></marshal>
            </when>
        </choice>
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="charset" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <!-- <removeHeader name="CreateCustomer" /> -->
        <!-- <removeHeader name="FPDetails" /> -->
        <!-- <removeHeader name="DMSDetails" /> -->
        <!-- <removeHeader name="UpdateAccountBit" /> -->
        <!-- <removeHeader name="updateAccount" /> -->
        <removeHeader name="org.restlet.startTime" />
        <!-- <removeHeader name="FPDetails" /> -->
        <!-- <removeHeader name="createCustomer" /> -->
        <!-- <removeHeader name="manageAccountRelationship" /> -->
        <!-- <removeHeader name="transferPGKAccountno" /> -->
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh call RequeatProcessor bean to set X-Auth-Token and request body -->
        <log message="ESB_DirectDMTOrchestration add ext : ${body}"></log>
        <choice>
            <when>
                <simple>${header.CreateCustomerBitForBene} == '1' || ${header.OriginalCreateAccountBit} == '1'</simple>
                <!-- <log message="add ext after unmarsh: ${body}"></log> -->
                <bean ref="addExternalAccountRequestBean" method="replaceCustomerNumberForAddExternal" />
                <marshal><json/></marshal>
            </when>
        </choice>
        <unmarshal><json/></unmarshal>
        <bean ref="addExternalAccountRequestBean" method="retrieveInsuranceType" />
        <marshal><json/></marshal>
        <log message="Insurance Institution ${header.InsInstitution}"></log>
        <log message="Insurance Account SubType ${header.InsAccountSubType}"></log>
        <!-- <log message="updateCust::${body}" /> -->
        <!-- <process ref="requestProcessor" /> -->
        <!--***************** called cxf rest to hit CBS url -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_9 REQUEST SENT TO CBS For Add External Account_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <!--***************** called cxf rest to hit CBS url -->
        <bean method="rsAddExternalAccount" ref="requestProcessor"/>
        <!-- <to uri="cxfrs:bean:rsAddExternalAccount?headerFilterStrategy=#fisHeaderFilter" /> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_10 RESPONSE RECEIVED FROM CBS For Add External Account_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <convertBodyTo type="java.lang.String"/>
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <setHeader name="addExternalResponse">
            <simple>${body}</simple>
        </setHeader>
        <setHeader name="resAddExternalResponse">
            <jsonpath>$.returnCode</jsonpath>
        </setHeader>
        <!-- <bean ref="combineBean" method="combine"/> -->
        <choice>
            <when>
                <simple>${header.resAddExternalResponse} == '0'</simple>
                <setHeader name="AddExternalAccountBit">
                    <simple>0</simple>
                </setHeader>
            </when>
            <otherwise>
                <setHeader name="AddExternalAccountBit">
                    <simple>1</simple>
                </setHeader>
                <choice>
                    <when>
                        <simple>${header.OriginalPostTransactionBit} == '1'</simple>
                        <to uri="direct:ReverseTransactionAfterIMPS"></to>
                    </when>
                </choice>
            </otherwise>
        </choice>
    </route>
    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh DMS route -->
    <route id="RT8_DMSDetailsRoute" streamCache="true">
        <from uri="direct:dMSDetails" />
        <!-- <log message=" in DMSDetailsRoute...." /> -->
        <!-- <setHeader name="X-Auth-Token"> <simple>${header.token12}</simple> </setHeader> -->
        <!--******************* set body for DMSDetails request by ca0lling DMSRequest bean -->
        <!-- <setBody> <method ref="dmsRef" method="getDmsReq" /> </setBody> -->
        <setBody>
            <simple>${header.dMSDetails}</simple>
        </setBody>
        <marshal><json/></marshal>
        <!-- <unmarshal ref="json2" /> -->
        <unmarshal><json unmarshalType="java.util.List" /></unmarshal>
        <!-- <log message="In dms otherwise:::"></log> -->
        <doTry>
            <bean ref="dmsRequestBean" method="splitDMSRequests"></bean>
            <loop>
                <header>DMSListSize</header>
                <setBody>
                    <simple>${header.dmsRequest${header[CamelLoopIndex]}}</simple>
                </setBody>
                <!-- <log message="DMS body1:::${body}"></log> -->
                <choice>
                    <when>
                        <simple>${header.CreateCustomerBitForBene} == '1' || ${header.OriginalCreateAccountBit} == '1'</simple>
                        <bean ref="dmsRequestBean" method="replaceACNCIFinDMS" />
                    </when>
                </choice>
                <!-- <log message="DMS body2:::${body}"></log> -->
                <removeHeader name="CamelHttpMethod" />
                <removeHeader name="CamelHttpUri" />
                <removeHeader name="CamelRestletRequest" />
                <removeHeader name="CamelRestletResponse" />
                <removeHeader name="Content-Type" />
                <removeHeader name="charset" />
                <removeHeader name="org.restlet.http.headers" />
                <removeHeader name="org.restlet.startTime" />
                <!-- <removeHeader name="updateAccount" /> -->
                <removeHeader name="org.restlet.startTime" />
                <!-- <removeHeader name="updateCustomer" /> <removeHeader name="GetPGNDetails" /> <removeHeader name="manageAccountRelationship" /> <removeHeader name="transferPGKAccountno" /> -->
                <setHeader name="Content-Type">
                    <simple>application/json</simple>
                </setHeader>
                <marshal><json/></marshal>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_10 Request Sent To DMS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh insert DMSDetails into the que -->
                <!-- <log message="DMS:::${body}" /> -->
                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh insert DMSDetails into FPQue -->
                <to pattern="InOnly" uri="{{ESB_DMSQueuename}}" />
            </loop>
            <removeHeaders pattern="dmsRequest*"></removeHeaders>
            <setHeader name="returnCodeDMS">
                <simple>0</simple>
            </setHeader>
            <choice>
                <when>
                    <simple>${header.returnCodeDMS} == '0'</simple>
                    <setHeader name="resDMSDetailsCombine">
                        <simple>0</simple>
                    </setHeader>
                    <setHeader name="returnCodeDMS">
                        <simple>0</simple>
                    </setHeader>
                    <setHeader name="DMSDetailsBit">
                        <simple>0</simple>
                    </setHeader>
                </when>
            </choice>
            <doCatch>
                <!-- ***************************exception handling code if DMSdetails fails to insert into the que -->
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception Occured : ${exception.stacktrace}"></log>
                <setHeader name="resDMSDetailsCombine">
                    <simple>1</simple>
                </setHeader>
                <setHeader name="returnCodeDMS">
                    <simple>1</simple>
                </setHeader>
                <setHeader name="DMSDetailsBit">
                    <simple>1</simple>
                </setHeader>
            </doCatch>
        </doTry>
    </route>
    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh sms sending route -->
    <route id="RT9_AuthAccount_OtpCallRoute">
        <from uri="seda:otpCall?concurrentConsumers={{minConcurrentConsumers}}" />
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Request Sent For SMS ${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <log message="ESB_DirectDMTOrchestration OTP BODY ${body}"></log>
        <convertBodyTo type="java.lang.String" />
         <setHeader name="CamelHttpMethod">
            <simple>POST</simple>
        </setHeader>
        <wireTap uri="{{ESB_SMSService_FINO_Replica_URL_{{currentSetUp}}}}?headerFilterStrategy=#finoHeaderFilter&amp;httpClientConfigurerRef=myHttpClientConfigurer&amp;socketTimeout={{DEFAULT_TIMEOUT}}"/>
        <!-- <wireTap uri="{{ESB_SMSService_FINO_Replica_URL_{{currentSetUp}}}}?headerFilterStrategy=#finoHeaderFilter&amp;httpClientConfigurerRef=myHttpClientConfigurer&amp;httpClient.soTimeout={{DEFAULT_TIMEOUT}}" executorServiceRef = "PoolSize"/> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Response Received from SMS ${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
    </route>
    <!--************ Reversal route -->
    <route id="RT10_ReversalRoute" streamCache="true">
        <from uri="direct:reversalRoute" />
        <setBody>
            <simple>{"appId": "FINOTLR","valueDate": null,"isInclusive": 0,"isClubbed": 0,"analysisFlag": null,"reversalFlag": "F","referenceNo": "${header.refNuForRev}"}</simple>
        </setBody>
        <!-- <process ref="requestProcessor" /> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO CBS for post transaction Reversal_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <log message="ESB_DirectDMTOrchestration 2Legs body:::::${body}" />
        <bean method="rsPostTransaction" ref="requestProcessor"/>
        <!-- <to uri="cxfrs:bean:rsPostTransaction?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE RECEIVED FROM CBS for post transaction Reversal_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
    </route>
    <route id="RT12_IMPSNEFTTransaction_SendToQueue">
        <from uri="direct:IMPSQueue" />
        <log message="ESB_DirectDMTOrchestration IMPS async To Queue "></log>
        <setHeader name="MQSendFlag">
            <simple>0</simple>
        </setHeader>
        <!-- DMT Init -->
        <choice>
				<when>
					<simple>${header.IMPS_appId} == 'IBR'</simple>
					<log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Initiation SMS Not sent inCase of IBR "></log>
				</when>
		<otherwise>
        <doTry>
            <setBody>
                <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId": "2603","@Amount": "${header.totalAmount}","@Benename": "${header.IMPSBeneName}","@AccountNo":"${header.IMPSBeneAccNo}"}}</simple>
            </setBody>
            <setHeader name="Content-Type">
                <simple>application/json</simple>
            </setHeader>
            <setHeader name="Content-Type">
                <simple>application/json</simple>
            </setHeader>
            <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
            <doCatch>
                <exception>java.lang.Exception</exception>
            </doCatch>
        </doTry>
        </otherwise>
		</choice>
        <!-- DMT Init Ends -->
        <!-- Merchant SMS for IMPS Split -->
        <doTry>
            <choice>
                <when>
                    <simple>${header.IMPS_appId} == 'FINOMER' || ${header.IMPS_appId} == 'FINOMERNP'</simple>
                    <setBody>
                        <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MerchantMobileNum}","EventId": "","NotifyParam": {"TemplateId":"415","@Amount":"${header.MerchantAmt}","@SRType":"IMPS Fund Transfer","@BALamount": "${header.availableBalance}","@MobileNo/EmailID": "${header.MobileNumForSMS}","@Name": "${header.IMPSRemName}"}}</simple>
                    </setBody>
                    <setHeader name="Content-Type">
                        <simple>application/json</simple>
                    </setHeader>
                    <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
                </when>
            </choice>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_11 EXCEPTION OCCURRED NEFT MERCHANT SMS_${exception.stacktrace}" loggingLevel="INFO" />
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED NEFT MERCHANT SMS_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
            </doCatch>
        </doTry>
        <!-- Merchant SMS for IMPS Split Ends-->
        <loop>
            <header>impsListSize</header>
            <removeHeaders pattern="Camel*" />
            <!-- <setBody> <simple>${header.txnRequest${header[CamelLoopIndex]}}</simple> </setBody> <marshal><json/></marshal> <setHeader name="txnDetails"> <simple>${body}</simple> </setHeader> -->
            <setHeader name="SplitIMPSDelayIFSCBin">
                <simple>{{SplitIMPSDelayIFSCBin}}</simple>
            </setHeader>
            <setBody>
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setBody>
            <marshal><json/></marshal>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_12 IMPSDetails_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <setHeader name="Content-Type">
                <simple>application/json</simple>
            </setHeader>
            <setHeader name="IFSCBinDelayCheck">
                <jsonpath>$.BeneIFSC</jsonpath>
            </setHeader>
            <setHeader name="impsDetails">
                <simple>${body}</simple>
            </setHeader>
            <setBody>
                <simple>{"txnDetails":{},"impsPostingDetails":${header.impsDetails}}</simple>
            </setBody>
            <!-- <removeHeader name="txnDetails" /> <removeHeader name="impsDetails" /> -->
            <!-- <log message="Index is ${header[CamelLoopIndex]}"></log> -->
            <!-- <bean ref="txnRequestProcessor" /> -->
            <setHeader name="RId">
                <simple>${header.RequestorId}</simple>
            </setHeader>
            <log message="IMPS_appId ${header.IMPS_appId}"></log>
            <doTry>
                <bean ref="splitTransactionBean" method="checkBinForDelay"/>
                <choice>
                    <when>
                        <simple>${header.DelaySplitIFSCBin} == 'Y' </simple>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_13 DelayFlag_${header.DelaySplitIFSCBin}_IFSCBin_${header.IFSCBinDelayCheck}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <delay>
                            <simple>{{IMPSDelayTimeSplit}}</simple>
                        </delay>
                    </when>
                    <otherwise>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_14 DelayFlag_${header.DelaySplitIFSCBin}_IFSCBin_${header.IFSCBinDelayCheck}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    </otherwise>
                </choice>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_15 REQUEST SENT TO ACTIVEMQ_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <to pattern="InOnly" uri="activemq:queue:IMPSTxnQueue" />
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 RESPONSE RECEIVED FROM ACTIVEMQ_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_17 Exception Occurred_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <setHeader name="MQSendFlag">
                        <simple>1</simple>
                    </setHeader>
                </doCatch>
            </doTry>
        </loop>
    </route>
    <route id="RT10_PostToIMPS">
        <from uri="direct:PostToIMPS" />
        <log message="ESB_DirectDMTOrchestration PostToIMPS Initiated"></log>
        <loop>
            <header>impsListSize</header>
            <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <setHeader name="Content-Type">
                <constant>application/json</constant>
            </setHeader>
            <setHeader name="CurrIMPSRequest">
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setHeader>
            <setBody>
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setBody>
            <!-- <setHeader name="SplitSeq">
                <simple>${header.DBInsertSplitSeq${header[CamelLoopIndex]}}</simple>
            </setHeader> -->
              <setHeader name="SplitSeq">
                <simple>${headers['DBInsertSplitSeq' + ${headers.CamelLoopIndex}] ?: 'Not Found'}</simple>
            </setHeader>
            <setHeader name="RetryCount">
                <simple>{{ESB_IMPS_RetryCount}}</simple>
            </setHeader>
            <setHeader name="IMPSReqType">
                <simple>IMPSPosting</simple>
            </setHeader>
            <!-- <setHeader name="RetryInterval"> <simple>{{ESB_IMPS_RetryInterval}}</simple> </setHeader> -->
            <marshal><json/></marshal>
            <!-- IMPS Database Insert -->
            <unmarshal><json/></unmarshal>
            <bean ref="databaseBean" method="setIMPSDBRequestJSON" />
            <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
            <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
            <choice>
                <when>
                    <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                    <setBody>
                        <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"1","Response_Flag":"0","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","RequestOut": null,"Response_Message": "","Status_Code": "","Service_ID": "5"}</simple>
                    </setBody>
                    <wireTap uri="direct:dmtDashBoard" />
                    <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                </when>
            </choice>
            <setBody>
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setBody>
            <marshal><json/></marshal>
            <convertBodyTo type="java.lang.String"></convertBodyTo>
            <setHeader name="impsRequest">
                <simple>${body}</simple>
            </setHeader>
            <doTry>
                <setHeader name="TranRefNo">
                    <jsonpath>$.PaymentRef</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.io.IOException</exception>
                    <setHeader name="TranRefNo">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <!--update internal imps -->
            <!-- <doTry> <setHeader name="effectiveDate"> <simple>${date:now:yyyy-MM-dd}</simple> </setHeader> <setBody> <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"I","npciResponseCode":"int"}</simple> </setBody> <log message="Body before UpdateTransaction_${body}" /> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Request Sent To IMPSUpdate for internal_${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> <setHeader name="body"> <simple>${body}</simple> </setHeader> <process ref="requestProcessor" /> <log message="Body1 After UpdateTransaction_${body}" /> <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> <log message="Body After UpdateTransaction_${body}" /> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Response Body after IMPSUpdate for internal_${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> <doCatch> <exception>java.lang.Exception</exception> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception While Update Internal IMPS Status_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" /> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception While Update Internal IMPS Status ${exception.stacktrace}"></log> </doCatch> </doTry> -->
            <!-- DMT Init SMS -->
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_18 Request SENT TO SMS Service For transType_${header.transType}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <choice>
                <when>
                    <simple>${header.transType} == 'DMTIMPSBENV' || ${header.transType} == 'IMPSBENV' || ${header.transType} == 'IMPSBENVC' || ${header.transType} == 'BENVFTOBC'</simple>
                </when>
                <otherwise>
                    <doTry>
                        <setBody>
                            <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId": "2603","@Amount": "${header.IMPSTxnAmount}","@Benename": "${header.IMPSBeneName}","@AccountNo":"${header.IMPSBeneAccNo}"}}</simple>
                        </setBody>
                        <setHeader name="Content-Type">
                            <simple>application/json</simple>
                        </setHeader>
                        <setHeader name="Content-Type">
                            <simple>application/json</simple>
                        </setHeader>
                        <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                        </doCatch>
                    </doTry>
                </otherwise>
            </choice>
            <!-- DMT Init SMS End -->
            <setBody>
                <simple>${header.impsRequest}</simple>
            </setBody>
            <setHeader name="Content-Type">
                <simple>application/json</simple>
            </setHeader>
            <doTry>
                <choice>
                    <when>
                        <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 REQUEST SENT TO PPI IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <log message="ESB_DirectDMTOrchestration Calling PPI URL {{ESB_IMPS_PostPPIIMPS}}"></log>
                        <to uri="{{ESB_IMPS_PostPPIIMPS}}?httpClientConfigurerRef=myHttpClientConfigurer&amp;headerFilterStrategy=#fisHeaderFilter&amp;socketTimeout={{ESB_IMPS_Timeout}}" />
                    </when>
                    <otherwise>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 REQUEST SENT TO IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <log message="ESB_DirectDMTOrchestration Calling IMPS URL {{ESB_IMPS_PostIMPS}}"></log>
                        <to uri="{{ESB_IMPS_PostIMPS}}?httpClientConfigurerRef=myHttpClientConfigurer&amp;headerFilterStrategy=#fisHeaderFilter&amp;socketTimeout={{ESB_IMPS_Timeout}}" />
                    </otherwise>
                </choice>
                <!-- <log message="Called URL"></log> -->
                <!-- <log message="IMPS Response ${body}" /> -->
                <convertBodyTo type="java.lang.String" />
                <setHeader name="IMPSResponse">
                    <simple>${body}</simple>
                </setHeader>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 RESPONSE RECEIVED FROM IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <unmarshal><json/></unmarshal>
                <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                <choice>
                    <when>
                        <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                        <setBody>
                            <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "${header.DBtxnRespCode}","Service_ID": "5"}</simple>
                        </setBody>
                        <wireTap uri="direct:dmtDashBoard"/>
                        <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->

                    </when>
                </choice>
                <setBody>
                    <simple>${header.IMPSResponse}</simple>
                </setBody>
                <setHeader name="impsReturnCode">
                    <jsonpath>$.ActCode</jsonpath>
                </setHeader>
                <bean ref="impsPostingRequestBean" method="checkIfReversalRequired"></bean>
                <!-- <log message="impsReturnCode:::${header.impsReturnCode}"></log> -->
                <choice>
                    <when>
                        <!-- <simple>${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 18 or ${header.impsReturnCode} == 19 or ${header.impsReturnCode} == 21 or ${header.impsReturnCode} == 9999 or ${header.impsReturnCode} == 30 or ${header.impsReturnCode} == 31 or ${header.impsReturnCode} == 101 or ${header.impsReturnCode} == 421 or ${header.impsReturnCode} == 420</simple> -->
                        <!-- <simple>${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 30 </simple> -->
                        <simple>${header.IMPSAwaitingFlag} == '0' </simple>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="impsRespCode">
                            <simple>0</simple>
                        </setHeader>
                        <choice>
                            <when>
                                <simple>${header.impsReturnCode} == '30'</simple>
                                <setHeader name="IMPSPostTimeOut">
                                    <simple>Y</simple>
                                </setHeader>
                                <setHeader name="IMPSPostingStatus">
                                    <simple>Awaiting</simple>
                                </setHeader>
                            </when>
                            <otherwise>
                                <!-- SMS For Awaiting -->
                                <setHeader name="IMPSPostingStatus">
                                    <simple>Awaiting</simple>
                                </setHeader>
                                <wireTap uri="direct:IMPSPostingSMS"/>
                                <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                                <!-- SMS For Awaiting Ends -->
                            </otherwise>
                        </choice>
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                       <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    </when>
                </choice>
                <choice>
                    <when>
                        <simple>${header.impsReturnCode} == '0'</simple>
                        <setHeader name="impsRespCode">
                            <simple>0</simple>
                        </setHeader>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="BankRRN">
                            <jsonpath>$.BankRRN</jsonpath>
                        </setHeader>
                        <setHeader name="TranRefNo">
                            <jsonpath>$.TranRefNo</jsonpath>
                        </setHeader>
                        <!--update IMPS status -->
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_24 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                      <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_25 RESPONSE RECEIVED FROM CBS For Update IMPS _${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                        </setBody>
                        <process ref="requestProcessor" />
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_26 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_27 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update Ends -->
                        <!-- SMS For Success -->
                        <setHeader name="IMPSPostingStatus">
                            <simple>Success</simple>
                        </setHeader>
                        <wireTap uri="direct:IMPSPostingSMS"/>
                        <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                        <!-- SMS For Success Ends -->
                    </when>
                    <when>
                        <!-- <simple>${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 18 or ${header.impsReturnCode} == 19 or ${header.impsReturnCode} == 21 or ${header.impsReturnCode} == 9999 or ${header.impsReturnCode} == 30 or ${header.impsReturnCode} == 31 or ${header.impsReturnCode} == 101 or ${header.impsReturnCode} == 421 or ${header.impsReturnCode} == 420</simple> -->
                        <!-- <simple> ${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 30 </simple> -->
                        <simple>${header.IMPSAwaitingFlag} == '0' </simple>
                        <!--RFU Update -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                        </setBody>
                        <process ref="requestProcessor" />
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_28 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                         <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_29 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update Ends -->
                    </when>
                    <otherwise>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="impsRespCode">
                            <simple>1</simple>
                        </setHeader>
                        <log message="ESB_DirectDMTOrchestration transref:::${header.TranRefNo}"></log>
                        <!--update IMPS status -->
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_30 REQUEST SENT TO CBS For Update IMPS for fail_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                       <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_31 RESPONSE RECEIVED FROM CBS For Update IMPS for fail_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_32 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                         <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_33 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update For Failure Reason -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "${header.IMPSRFUT6}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_34 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_35 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update For Failure Reason -->
                        <!-- SMS For Failure -->
                        <setHeader name="IMPSPostingStatus">
                            <simple>Fail</simple>
                        </setHeader>
                        <wireTap uri="direct:IMPSPostingSMS"/>
                        <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                        <!-- SMS For Failure Ends -->
                    </otherwise>
                </choice>
                <doCatch>
                    <exception>java.net.SocketTimeoutException</exception>
                    <setHeader name="IMPSPostTimeOut">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSAwaitingFlag">
                        <simple>0</simple>
                    </setHeader>
                    <setHeader name="impsReturnCode">
                        <simple>999</simple>
                    </setHeader>
                    <setHeader name="IMPSTxnCheckFlag">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSPostingStatus">
                        <simple>Awaiting</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE TIMEOUT FROM IMPS" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception ${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception Stack ${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update -->
                    <setBody>
                        <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"P","npciResponseCode":"pend"}</simple>
                    </setBody>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Request Sent To IMPSUpdate for Timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- <process ref="requestProcessor" /> -->
                    <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                    <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Response Body after IMPSUpdate for timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update Ends -->
                    <!--RFU Update -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
                    </setBody>
                    <process ref="requestProcessor" />
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update Ends -->
                    <!-- TimeOut Entry In Database -->
                    <setBody>
                        <simple>{"ActCode": "999","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "Response TimeOut","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                    </setBody>
                    <setHeader name="IMPSResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <!-- TimeOut Entry In Database Ends -->
                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "1","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                </doCatch>
                <doCatch>
                    <exception>java.net.ConnectException</exception>
                    <setHeader name="IMPSPostTimeOut">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSAwaitingFlag">
                        <simple>0</simple>
                    </setHeader>
                    <setHeader name="impsReturnCode">
                        <simple>999</simple>
                    </setHeader>
                    <setHeader name="IMPSTxnCheckFlag">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSPostingStatus">
                        <simple>Awaiting</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE TIMEOUT FROM IMPS" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_19 Exception ${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception Stack ${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update -->
                    <setBody>
                        <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"P","npciResponseCode":"pend"}</simple>
                    </setBody>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_20 Request Sent To IMPSUpdate for Timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- <process ref="requestProcessor" /> -->
                    <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                    <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_21 Response Body after IMPSUpdate for timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update Ends -->
                    <!--RFU Update -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
                    </setBody>
                    <process ref="requestProcessor" />
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update Ends -->
                    <!-- TimeOut Entry In Database -->
                    <setBody>
                        <simple>{"ActCode": "999","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "Response TimeOut","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                    </setBody>
                    <setHeader name="IMPSResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <!-- TimeOut Entry In Database Ends -->
                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "1","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                </doCatch>
                <doCatch>
                    <exception>java.net.NoRouteToHostException</exception>
                    <setHeader name="IMPSPostTimeOut">
                        <simple>N</simple>
                    </setHeader>
                    <setHeader name="impsReturnCode">
                        <simple>1</simple>
                    </setHeader>
                    <setHeader name="IMPSPostingStatus">
                        <simple>Fail</simple>
                    </setHeader>
                    <setHeader name="IMPSAwaitingFlag">
                        <simple>1</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration UNABLE TO CONNECT TO IMPS" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_19 Exception ${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception Stack ${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update -->
                    <setBody>
                        <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"R","npciResponseCode":"fail"}</simple>
                    </setBody>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_20 Request Sent To IMPSUpdate for Timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                   <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_21 Response Body after IMPSUpdate for timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update Ends -->
                    <!--RFU Update -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
                    </setBody>
                    <process ref="requestProcessor" />
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update Ends -->
                    <!--RFU Update For Failure Reason -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "9998,${exception.message}"}</simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_24 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_25 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update For Failure Reason -->
                    <!-- TimeOut Entry In Database -->
                    <setBody>
                        <simple>{"ActCode": "998","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "${exception}","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                    </setBody>
                    <setHeader name="IMPSResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <!-- TimeOut Entry In Database Ends -->
                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "1","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                </doCatch>
            </doTry>
            <choice>
                <when>
                    <simple>${header.IMPSTxnCheckFlag} == 'Y'</simple>
                    <!-- IMPSTxnCheck -->
                    <doTry>
                        <setHeader name="IMPSReqType">
                            <simple>IMPSTxnCheck</simple>
                        </setHeader>
                        <setBody>
                            <simple>{"PaymentRef":"${header.IMPSTranRefNo}"}</simple>
                        </setBody>
                        <bean ref="databaseBean" method="setIMPSDBTxnCheckRequestJSON" />
                        <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                        <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                        <log message="ESB_DirectDMTOrchestration Calling IMPSTxnCheck URL {{ESB_IMPS_TxnCheck}}"></log>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_36 IMPSTXNCHECK REQUEST SENT TO IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <setHeader name="Content-Type">
                            <simple>application/json</simple>
                        </setHeader>
                        <to uri="{{ESB_IMPS_TxnCheck}}?headerFilterStrategy=#finoHeaderFilter&amp;httpClientConfigurerRef=myHttpClientConfigurer&amp;socketTimeout={{ESB_IMPS_Timeout}}" />
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_37 IMPSTXNCHECK RESPONSE RECEIVED FROM IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <unmarshal><json/></unmarshal>
                        <setHeader name="IMPSTxnCheckRespCode">
                            <simple>${body[ResponseCode]}</simple>
                        </setHeader>
                        <bean ref="databaseBean" method="setIMPSDBTxnCheckResponseJSON" />
                        <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                        <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                        <choice>
                            <when>
                                <simple>${header.IMPSTxnCheckRespCode} == '1'</simple>
                                <setHeader name="IMPSPostTimeOut">
                                    <simple>N</simple>
                                </setHeader>
                                <setHeader name="RefireCount">
                                    <simple>1</simple>
                                </setHeader>
                                <to uri="direct:reInitiateTxn"/>
                            </when>
                        </choice>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_36 IMPSTXNCHECK ERROR OCCURRED_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration IMPSTXNCHECK ERROR OCCURRED_${exception.stacktrace}" loggingLevel="INFO" />
                        </doCatch>
                    </doTry>
                    <!-- IMPSTxnCheck Ends-->
                </when>
            </choice>
            <choice>
                <when>
                    <simple>${header.IMPSPostTimeOut} == 'Y'</simple>
                    <doTry>
                        <loop>
                            <header>RetryCount</header>
                            <log message="ESB_DirectDMTOrchestration Loop Executing : ${header[CamelLoopIndex]}"></log>
                            <log message="ESB_DirectDMTOrchestration Initiating Retry.....${header[CamelLoopIndex]}"></log>
                            <setHeader name="IMPSReqType">
                                <simple>IMPSInquiry</simple>
                            </setHeader>
                            <setBody>
                                <simple>${header.CurrIMPSRequest}</simple>
                            </setBody>
                            <marshal><json/></marshal>
                            <doTry>
                                <unmarshal><json/></unmarshal>
                                <bean ref="databaseBean" method="setIMPSDBRequestJSON" />
                                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                <doCatch>
                                    <exception>java.lang.Exception</exception>
                                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request Exception ${exception}"></log>
                                </doCatch>
                                <doFinally>
                                    <setBody>
                                        <simple>${header.CurrIMPSRequest}</simple>
                                    </setBody>
                                    <marshal><json/></marshal>
                                </doFinally>
                            </doTry>
                            <!-- <removeHeaders pattern="*"></removeHeaders> -->
                            <removeHeader name="CamelHttpResponseCode" />
                            <removeHeader name="CamelRestletResponse" />
                            <removeHeaders pattern="org.restlet.*"></removeHeaders>
                            <removeHeader name="RespCode" />
                            <setHeader name="CamelHttpMethod">
                                <constant>POST</constant>
                            </setHeader>
                            <setHeader name="Content-Type">
                                <constant>application/json</constant>
                            </setHeader>
                            <doTry>
                                <choice>
                                    <when>
                                        <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_36 REQUEST SENT TO PPI IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <log message="ESB_DirectDMTOrchestration Calling URL {{ESB_IMPS_PPIInquiry}}"></log>
                                        <to uri="{{ESB_IMPS_PPIInquiry}}?httpClientConfigurerRef=myHttpClientConfigurer&amp;headerFilterStrategy=#fisHeaderFilter&amp;socketTimeout={{ESB_IMPS_Timeout}}" />
                                    </when>
                                    <otherwise>
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_37 REQUEST SENT TO IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <log message="ESB_DirectDMTOrchestration Calling URL {{ESB_IMPS_Inquiry}}"></log>
                                        <to uri="{{ESB_IMPS_Inquiry}}?httpClientConfigurerRef=myHttpClientConfigurer&amp;headerFilterStrategy=#fisHeaderFilter&amp;socketTimeout={{ESB_IMPS_Timeout}}" />
                                    </otherwise>
                                </choice>
                                <!-- <log message="Response Body ${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> -->
                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_38 RESPONSE RECEIVED FROM IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                <convertBodyTo type="java.lang.String" />
                                <setHeader name="IMPSResponse">
                                    <simple>${body}</simple>
                                </setHeader>
                                <setHeader name="impsReturnCode">
                                    <jsonpath>$.ActCode</jsonpath>
                                </setHeader>
                                <unmarshal><json/></unmarshal>
                                <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                <convertBodyTo type="java.lang.String" />
                                <setBody>
                                    <simple>${header.IMPSResponse}</simple>
                                </setBody>
                                <choice>
                                    <when>
                                        <simple>${header.impsReturnCode} == '0'</simple>
                                        <setHeader name="impsRespCode">
                                            <simple>0</simple>
                                        </setHeader>
                                    </when>
                                    <otherwise>
                                        <setHeader name="impsRespCode">
                                            <simple>1</simple>
                                        </setHeader>
                                    </otherwise>
                                </choice>
                                <choice>
                                    <when>
                                        <simple>${header.impsReturnCode} == '30'</simple>
                                        <log message="ESB_DirectDMTOrchestration Resp 11 received"></log>
                                        <log message="ESB_DirectDMTOrchestration Delaying Retry....."></log>
                                        <setHeader name="IMPSPostingStatus">
                                            <simple>Awaiting</simple>
                                        </setHeader>
                                    </when>
                                    <when>
                                        <simple>${header.impsReturnCode} == '17'</simple>
                                        <log message="ESB_DirectDMTOrchestration Reinitiate Transation For Code 17"/>
                                        <choice>
                                            <when>
                                                <simple>${header.ReInitFlag} == 'Y'</simple>
                                            </when>
                                            <otherwise>
                                                <setHeader name="ReInitFlag">
                                                    <simple>Y</simple>
                                                </setHeader>
                                                <setHeader name="RefireCount">
                                                    <simple>1</simple>
                                                </setHeader>
                                                <to uri="direct:reInitiateTxn"/>
                                                <!-- <throwException ref="loopBreak"></throwException> -->
                                            </otherwise>
                                        </choice>
                                        <log message="ESB_DirectDMTOrchestration Before Delay"></log>
                                        <delay>
                                            <constant>{{ESB_IMPS_Timeout}}</constant>
                                        </delay>
                                        <log message="ESB_DirectDMTOrchestration After Delay"></log>
                                    </when>
                                    <otherwise>
                                        <!-- set Awaiting Flag for Inquiry -->
                                        <bean ref="impsPostingRequestBean" method="checkIfReversalRequired"></bean>
                                        <choice>
                                            <when>
                                                <simple>${header.IMPSAwaitingFlag} == '0'</simple>
                                                <setHeader name="IMPSPostingStatus">
                                                    <simple>Awaiting</simple>
                                                </setHeader>
                                            </when>
                                            <when>
                                                <simple>${header.IMPSAwaitingFlag} == '1'</simple>
                                                <choice>
                                                    <when>
                                                        <simple>${header.impsReturnCode} == '0'</simple>
                                                        <setHeader name="IMPSPostingStatus">
                                                            <simple>Success</simple>
                                                        </setHeader>
                                                    </when>
                                                    <otherwise>
                                                        <setHeader name="IMPSPostingStatus">
                                                            <simple>Fail</simple>
                                                        </setHeader>
                                                    </otherwise>
                                                </choice>
                                            </when>
                                        </choice>
                                        <!--update IMPS status -->
                                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                                        <setBody>
                                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                                        </setBody>
                                        <!-- <process ref="requestProcessor" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_39 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                      <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_40 RESPONSE RECEIVED FROM CBS For Update IMPS _${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!--RFU Update -->
                                        <setBody>
                                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField":"ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                                        </setBody>
                                        <process ref="requestProcessor" />
                                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_41 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                       <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_42 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <choice>
                                            <when>
                                                <simple>${header.updateIMPSTxnStatus} == 'R'</simple>
                                                <!--RFU Update For Failure Reason -->
                                                <setBody>
                                                    <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "${header.IMPSRFUT6}"}</simple>
                                                </setBody>
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_43 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                                <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                                <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_44 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <!--RFU Update For Failure Reason -->
                                            </when>
                                        </choice>
                                        <setBody>
                                            <simple>${header.IMPSResponse}</simple>
                                        </setBody>
                                        <throwException ref="loopBreak"></throwException>
                                    </otherwise>
                                </choice>
                                <doCatch>
                                    <exception>java.net.SocketTimeoutException</exception>
                                    <log message="ESB_DirectDMTOrchestration Exception ${exception}"></log>
                                </doCatch>
                                <doCatch>
                                    <exception>java.net.ConnectException</exception>
                                    <log message="ESB_DirectDMTOrchestration Exception ${exception}"></log>
                                </doCatch>
                            </doTry>
                        </loop>
                        <doCatch>
                            <exception>com.finobank.Quarkus_DirectDMTOrchestration.LoopBreakException</exception>
                            <log message="ESB_DirectDMTOrchestration Exception ${exception.stacktrace}"/>
                            <log message="ESB_DirectDMTOrchestration Exiting Inquiry Loop" />
                        </doCatch>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <log message="ESB_DirectDMTOrchestration Exception ${exception.stacktrace}"/>
                            <setHeader name="Error">
                                <simple>Error</simple>
                            </setHeader>
                        </doCatch>
                        <doFinally>
                            <log message="ESB_DirectDMTOrchestration Verification Process Ends"></log>
                            <!-- SMS For Inquiry Cases -->
                            <wireTap uri="direct:IMPSPostingSMS"/>
                            <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                            <!-- SMS For Inquiry Cases Ends -->
                        </doFinally>
                    </doTry>
                </when>
            </choice>
            <removeHeader name="SplitSeq"/>
        </loop>
    </route>
    <route id="RT9_IMPSNEFTTransaction_Reversal">
        <from uri="direct:ReverseTransaction" />
        <log message="ESB_DirectDMTOrchestration Reversal Initiated"></log>
        <choice>
            <when>
                <simple>${header.FailedIndex} == 0 &amp;&amp; ${header.resCodePostTrans} != '998' </simple>
                <log message="ESB_DirectDMTOrchestration No Reversal Required"></log>
            </when>
            <otherwise>
                <log message="ESB_DirectDMTOrchestration Reversal Of Earlier Successful Txns" />
                <bean ref="postTransactionRequestBean" method="setReversalSequence"></bean>
                <bean ref="postTransactionRequestBean" method="setFailedLoopSize" />
                <log message="ESB_DirectDMTOrchestration Failed Index Before Loop ${header.FailedIndex}"></log>
                <setHeader name="checkReversalFlag">
                    <simple>true</simple>
                </setHeader>
                <loop>
                    <header>FailedIndex</header>
                    <log message="ESB_DirectDMTOrchestration FailedLooop Index ${header[CamelLoopIndex]}"></log>
                    <log message="ESB_DirectDMTOrchestration Loop Size ${header[CamelLoopSize]}"></log>
                    <bean ref="postTransactionRequestBean" method="checkFailedTxn" />
                    <!-- <log message="DBReversal Request ${header.DBInsertRequest${header[CamelLoopIndex]}}"></log> -->
                    <choice>
                        <when>
                            <simple>${header.StopLoop} == '0'</simple>
                        </when>
                        <otherwise>
                            <bean ref="postTransactionRequestBean" method="getReversalIndex"></bean>
                            <log message="ESB_DirectDMTOrchestration Reversal Index is ${header.ReversalIndex}"></log>
                            <setBody>
                                <simple>${header.txnRequest${header.ReversalIndex}}</simple>
                            </setBody>
                            <log message="MessageBody before replaceReversal ${body}"></log>
                            <bean ref="postTransactionRequestBean" method="replaceReversalFlag"></bean>
                            <choice>
                                <when>
                                    <simple>${header.ReverseFlag} == '1'</simple>
                                </when>
                                <otherwise>
                                    <marshal><json/></marshal>
                                    <setHeader name="RevReq">
                                        <simple>${body}</simple>
                                    </setHeader>
                                    <log message="ESB_DirectDMTOrchestration DBINSERT QUERY ${header.DBInsertRequest1}"></log>
                                    <setBody>
                                        <simple>${header.DBInsertRequest${header[ReversalIndex]}}</simple>
                                    </setBody>
                                    <log message="MessageBody before DatabaseRequest ${body}"></log>
                                    <unmarshal><json/></unmarshal>
                                    <bean ref="databaseBean" method="createReversalDBRequest"></bean>
                                    <marshal><json/></marshal>
                                    <convertBodyTo type="java.lang.String"></convertBodyTo>
                                    <setHeader name="TransactionQueryReq">
                                        <simple>${body}</simple>
                                    </setHeader>
                                    <setBody>
                                        <simple></simple>
                                    </setBody>
                                    <log message="ESB_DirectDMTOrchestration Reversal Request TO Database Queue ${header.TransactionQueryReq}"></log>
                                    <removeHeader name="AddBeneficiary"></removeHeader>
                                    <removeHeader name="CreateAccount"></removeHeader>
                                    <removeHeader name="CreateCustomer"></removeHeader>
                                    <removeHeader name="CustomerAuth"></removeHeader>
                                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                    <removeHeader name="TransactionQueryReq"></removeHeader>
                                    <setBody>
                                        <simple>${header.RevReq}</simple>
                                    </setBody>
                                    <setHeader name="ReversalCashOutRef">
                                        <jsonpath>$.referenceNo</jsonpath>
                                    </setHeader>
                                    <setHeader name="txnRefNo">
                                        <jsonpath>$.referenceNo</jsonpath>
                                    </setHeader>
                                    <setHeader name="ReversalCashappId">
                                        <jsonpath>$.appId</jsonpath>
                                    </setHeader>
                                    <removeHeader name="RevReq"></removeHeader>
                                    <choice>
                                        <when>
                                            <simple>${header.checkReversalFlag} == 'true'</simple>
                                            <!-- <bean ref="requestProcessor" /> -->
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 Reversal REQUEST SENT TO CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                            <doTry>


                                            <bean method="rsPostTransaction" ref="requestProcessor"/>
                                                <!-- <to uri="cxfrs:bean:rsPostTransaction?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_17 Reversal RESPONSE RECEIVED FROM CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <setHeader name="txnReversalResponse">
                                                    <simple>${body}</simple>
                                                </setHeader>
                                                <setHeader name="txnReversalResponse">
                                                    <simple>${body}</simple>
                                                </setHeader>
                                                
                                                <choice>
                                                    <when>
                                                        <simple>${header.CamelHttpResponseCode} == '200'</simple>
                                                        <setHeader name="txnRespCode">
                                                            <jsonpath>$.returnCode</jsonpath>
                                                        </setHeader>
                                                    </when>
                                                    <otherwise>
                                                        <setHeader name="txnRespCode">
                                                            <simple>${header.CamelHttpResponseCode}</simple>
                                                        </setHeader>
                                                        <doTry>
                                                            <setHeader name="responseMessage">
                                                                <jsonpath>$.responseMessage</jsonpath>
                                                            </setHeader>
                                                            <doCatch>
                                                                <exception>java.lang.Exception</exception>
                                                                <log message="reversal exception message_${exception}"/>
                                                                <setHeader name="responseMessage">
                                                                    <simple>Error</simple>
                                                                </setHeader>
                                                            </doCatch>
                                                        </doTry>
                                                        <choice>
                                                            <when>
                                                                <simple>${header.asyncFlag} == 'N' &amp;&amp; ${header.DBTranType} == 'DMTCASHD' </simple>
                                                                <setBody>
                                                                    <simple>{"MobileNo":"${header.MobileNumForSMS}","TxnType":"${header.DBTranType}","referenceNo": "${header.ReversalCashOutRef}","Amount":"${header.DBAmt}","appId":"${header.ReversalCashappId}","X-Correlation-Id":"${header.X-Correlation-Id}","UserId":"${header.RequestorId}","RespCode":"${header.CamelHttpResponseCode}","costCenter":"${header.CASHBACKCostCenter}"}</simple>
                                                                </setBody>
                                                                <log message="log Refire Trasnaction Data_${body}"/>
                                                                <wireTap uri="activemq:queue:ReversalTxnQueue?timeToLive={{QueueTimeToLive_Time}}"/>
                                                            </when>
                                                        </choice>
                                                        <setBody>
                                                            <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}"}</simple>
                                                        </setBody>
                                                    </otherwise>
                                                </choice>
                                                <doCatch>
                                                    <exception>java.net.SocketTimeoutException</exception>
                                                    <setHeader name="txnRespCode">
                                                        <simple>998</simple>
                                                    </setHeader>
                                                    <setHeader name="responseMessage">
                                                        <simple>Timeout from CBS</simple>
                                                    </setHeader>
                                                    <choice>
                                                        <when>
                                                            <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>true</simple>
                                                            </setHeader>
                                                        </when>
                                                        <otherwise>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>false</simple>
                                                            </setHeader>
                                                        </otherwise>
                                                    </choice>
                                                    <choice>
                                                        <when>
                                                            <simple>${header.asyncFlag} == 'N' &amp;&amp; ${header.DBTranType} == 'DMTCASHD' </simple>
                                                            <setBody>
                                                                <simple>{"MobileNo":"${header.MobileNumForSMS}","TxnType":"${header.DBTranType}","referenceNo": "${header.ReversalCashOutRef}","Amount":"${header.DBAmt}","appId":"${header.ReversalCashappId}","X-Correlation-Id":"${header.X-Correlation-Id}","UserId":"${header.RequestorId}","RespCode":"998","costCenter":"${header.CASHBACKCostCenter}"}</simple>
                                                            </setBody>
                                                            <log message="log Refire Trasnaction Data_${body}"/>
                                                            <wireTap uri="activemq:queue:ReversalTxnQueue?timeToLive={{QueueTimeToLive_Time}}"/>
                                                        </when>
                                                    </choice>
                                                    <setBody>
                                                        <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}"}</simple>
                                                    </setBody>
                                                </doCatch>
                                                <doCatch>
                                                    <exception>java.lang.Exception</exception>
                                                    <setHeader name="txnRespCode">
                                                        <simple>998</simple>
                                                    </setHeader>
                                                    <setHeader name="responseMessage">
                                                        <simple>Timeout from CBS</simple>
                                                    </setHeader>
                                                    <choice>
                                                        <when>
                                                            <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>true</simple>
                                                            </setHeader>
                                                        </when>
                                                        <otherwise>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>false</simple>
                                                            </setHeader>
                                                        </otherwise>
                                                    </choice>
                                                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 Reversal EXception Occurred_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                    <setBody>
                                                        <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}"}</simple>
                                                    </setBody>
                                                </doCatch>
                                            </doTry>
                                        </when>
                                        <otherwise>
                                            <setHeader name="txnRespCode">
                                                <simple>11</simple>
                                            </setHeader>
                                            <setHeader name="responseMessage">
                                                <simple>No Reversal Initiated checkReversalFlag is FALSE</simple>
                                            </setHeader>
                                            <setBody>
                                                <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}"} </simple>
                                            </setBody>
                                            <log message="In Otherwise_${header.transactionTypeCheck}"></log>
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 Reversal RESPONSE RECEIVED_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                            <setHeader name="checkReversalFlag">
                                                <simple>true</simple>
                                            </setHeader>
                                        </otherwise>
                                    </choice>
                                    <unmarshal><json/></unmarshal>
                                    <bean ref="databaseBean" method="createReversalDBResponse" />
                                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue for Transaction Response ${header.TransactionQueryReq}"></log>
                                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                    <removeHeader name="TransactionQueryReq"></removeHeader>
                                    <!-- Reversal RFU Update -->
                                    <choice>
                                        <when>
                                            <simple>${header.txnRespCode} == '0'</simple>
                                            <setBody>
                                                <simple>{"referenceNo": "${header.RFURef}","rfuField": "ZRFUN1","rfuValue": "1","reversalFlag": "0"}</simple>
                                            </setBody>
                                            <!-- <removeHeader name="RFURef"></removeHeader> -->
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 REQUEST SENT TO CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                            <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                            <doTry>
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                                <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                                <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 RESPONSE RECEIVED FROM CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <setHeader name="RFUUpdateRespCode">
                                                    <jsonpath>$.returnCode</jsonpath>
                                                </setHeader>
                                                <choice>
                                                    <when>
                                                        <simple>${header.RFUUpdateRespCode} == '0' </simple>
                                                    </when>
                                                    <otherwise>
                                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_22 Reversal Failed From CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                        <choice>
                                                            <when>
                                                                <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                                <setHeader name="checkReversalFlag">
                                                                    <simple>true</simple>
                                                                </setHeader>
                                                            </when>
                                                            <otherwise>
                                                                <setHeader name="checkReversalFlag">
                                                                    <simple>false</simple>
                                                                </setHeader>
                                                            </otherwise>
                                                        </choice>
                                                    </otherwise>
                                                </choice>
                                                <doCatch>
                                                    <exception>java.lang.Exception</exception>
                                                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_21 ERROr OCCURRED During Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                    <choice>
                                                        <when>
                                                            <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>true</simple>
                                                            </setHeader>
                                                        </when>
                                                        <otherwise>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>false</simple>
                                                            </setHeader>
                                                        </otherwise>
                                                    </choice>
                                                </doCatch>
                                            </doTry>
                                            <!-- RFuStatus update during refire case start-->
                                            <choice>
                                                <when>
                                                    <simple>${header.updateStatusForRefire} == '0'</simple>
                                                    <!-- <wireTap uri="direct:updateStatusForRefire" executorServiceRef = "PoolSize"/> -->
                                                    
                                                    <to uri="direct:updateStatusForRefire"/>
                                                    
                                                </when>
                                                <otherwise>
                                                    <log message="no status update for refire....."></log>
                                                </otherwise>
                                            </choice>
                                            <!-- RFuStatus update during refire case end-->
                                        </when>
                                        <otherwise>
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_22 Reversal Failed From CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                            <choice>
                                                <when>
                                                    <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>true</simple>
                                                    </setHeader>
                                                </when>
                                                <otherwise>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>false</simple>
                                                    </setHeader>
                                                </otherwise>
                                            </choice>
                                        </otherwise>
                                    </choice>
                                </otherwise>
                            </choice>
                        </otherwise>
                    </choice>
                </loop>
            </otherwise>
        </choice>
    </route>
    <route id="RT11_IMPSNEFTTransaction_ReversalAfterIMPS">
        <from uri="direct:ReverseTransactionAfterIMPS" />
        <log message="ESB_DirectDMTOrchestration Reversal Initiated After IMPS Failure1111"></log>
        <setHeader name="checkReversalFlag">
            <simple>true</simple>
        </setHeader>
        <loop>
            <header>postTransactionListSize</header>
            <choice>
                <when>
                    <simple>${header.postTransactionListSize} == '1'</simple>
                    <removeHeaders pattern="Camel*" />
                    <setBody>
                        <simple>${header.txnRequest${header[CamelLoopIndex]}}</simple>
                    </setBody>
                    <bean ref="postTransactionRequestBean" method="replaceReversalFlag"></bean>
                    <log message="ESB_DirectDMTOrchestration MessageBody ${body}"></log>
                    <choice>
                        <when>
                            <simple>${header.ReverseFlag} == '1'</simple>
                        </when>
                        <otherwise>
                            <marshal><json/></marshal>
                            <setHeader name="RevReq">
                                <simple>${body}</simple>
                            </setHeader>
                            <log message="DBINSERT QUERY ${header.DBInsertRequest1}"></log>
                            <setBody>
                                <simple>${header.DBInsertRequest${header[CamelLoopIndex]}}</simple>
                            </setBody>
                            <unmarshal><json/></unmarshal>
                            <bean ref="databaseBean" method="createReversalDBRequest"></bean>
                            <marshal><json/></marshal>
                            <convertBodyTo type="java.lang.String"></convertBodyTo>
                            <setHeader name="TransactionQueryReq">
                                <simple>${body}</simple>
                            </setHeader>
                            <setBody>
                                <simple></simple>
                            </setBody>
                            <log message="Reversal Request TO Database Queue ${header.TransactionQueryReq}"></log>
                            <removeHeader name="AddBeneficiary"></removeHeader>
                            <removeHeader name="CreateAccount"></removeHeader>
                            <removeHeader name="CreateCustomer"></removeHeader>
                            <removeHeader name="CustomerAuth"></removeHeader>
                            <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                            <removeHeader name="TransactionQueryReq"></removeHeader>
                            <setBody>
                                <simple>${header.RevReq}</simple>
                            </setBody>
                            <removeHeader name="RevReq"></removeHeader>
                            <log message="Index is ${header[CamelLoopIndex]}"></log>
                            <choice>
                                <when>
                                    <simple>${header.checkReversalFlag} == 'true'</simple>
                                    <doTry>
                                        <!-- <bean ref="requestProcessor" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 Reversal REQUEST SENT TO CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                       <bean method="rsPostTransaction" ref="requestProcessor"/>
                                        <!-- <to uri="cxfrs:bean:rsPostTransaction?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 Reversal RESPONSE RECEIVED FROM CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <setHeader name="txnReversalResponse">
                                            <simple>${body}</simple>
                                        </setHeader>
                                        <setHeader name="txnRespCode">
                                            <jsonpath>$.returnCode</jsonpath>
                                        </setHeader>
                                        
                                        <doCatch>
                                            <exception>java.net.SocketTimeoutException</exception>
                                            <setHeader name="txnRespCode">
                                                <simple>998</simple>
                                            </setHeader>
                                            <setHeader name="responseMessage">
                                                <simple>Timeout from CBS</simple>
                                            </setHeader>
                                            <choice>
                                                <when>
                                                    <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>true</simple>
                                                    </setHeader>
                                                </when>
                                                <otherwise>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>false</simple>
                                                    </setHeader>
                                                </otherwise>
                                            </choice>
                                            <setBody>
                                                <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}"} </simple>
                                            </setBody>
                                        </doCatch>
                                        <doCatch>
                                            <exception>java.lang.Exception</exception>
                                            <setHeader name="txnRespCode">
                                                <simple>998</simple>
                                            </setHeader>
                                            <setHeader name="responseMessage">
                                                <simple>Timeout from CBS</simple>
                                            </setHeader>
                                            <choice>
                                                <when>
                                                    <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>true</simple>
                                                    </setHeader>
                                                </when>
                                                <otherwise>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>false</simple>
                                                    </setHeader>
                                                </otherwise>
                                            </choice>
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 Reversal EXception Occurred_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                            <setBody>
                                                <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}"}</simple>
                                            </setBody>
                                        </doCatch>
                                    </doTry>
                                </when>
                                <otherwise>
                                    <setHeader name="txnRespCode">
                                        <simple>11</simple>
                                    </setHeader>
                                    <setHeader name="responseMessage">
                                        <simple>No Reversal Initiated checkReversalFlag is FALSE</simple>
                                    </setHeader>
                                    <setHeader name="RFURef">
                                        <jsonpath>$.referenceNo</jsonpath>
                                    </setHeader>
                                    <setBody>
                                        <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}","txnReferenceNo":${header.RFURef}} </simple>
                                    </setBody>
                                    <log message="In Otherwise_${header.transactionTypeCheck}"></log>
                                    <setHeader name="checkReversalFlag">
                                        <simple>true</simple>
                                    </setHeader>
                                </otherwise>
                            </choice>
                            <unmarshal><json/></unmarshal>
                            <bean ref="databaseBean" method="createReversalDBResponse" />
                            <log message="Request TO Database Queue for Transaction Response ${header.TransactionQueryReq}"></log>
                            <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                            <removeHeader name="TransactionQueryReq"></removeHeader>
                            <!-- Reversal RFU Update -->
                            <log message="txnRespCode12121212_${header.txnRespCode}"></log>
                            <choice>
                                <when>
                                    <simple>${header.txnRespCode} == '0'</simple>
                                    <!-- RFUT8 Update After Reversal -->
                                    <doTry>
                                        <setBody>
                                            <simple>{"referenceNo": "${header.RFURef}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}","reversalFlag": "1"}</simple>
                                        </setBody>
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_21 REQUEST SENT TO CBS For Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                       <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_22 RESPONSE RECEIVED FROM CBS For Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <setHeader name="RFUT8UpdateRespCode">
                                            <jsonpath>$.returnCode</jsonpath>
                                        </setHeader>
                                        <choice>
                                            <when>
                                                <simple>${header.RFUT8UpdateRespCode} == '0' </simple>
                                            </when>
                                            <otherwise>
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_23 Reversal Failed From CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <choice>
                                                    <when>
                                                        <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                        <setHeader name="checkReversalFlag">
                                                            <simple>true</simple>
                                                        </setHeader>
                                                    </when>
                                                    <otherwise>
                                                        <setHeader name="checkReversalFlag">
                                                            <simple>false</simple>
                                                        </setHeader>
                                                    </otherwise>
                                                </choice>
                                            </otherwise>
                                        </choice>
                                        <doCatch>
                                            <exception>java.lang.Exception</exception>
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_21 ERROr OCCURRED During Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        </doCatch>
                                    </doTry>
                                    <!-- RFUT8 Update After Reversal Ends-->
                                    <setBody>
                                        <simple>{"referenceNo": "${header.RFURef}","rfuField": "ZRFUN1","rfuValue": "1","reversalFlag": "0"}</simple>
                                    </setBody>
                                    <!-- <removeHeader name="RFURef"></removeHeader> -->
                                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_24 REQUEST SENT TO CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                    <doTry>
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_25 RESPONSE RECEIVED FROM CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <setHeader name="RFUUpdateRespCode">
                                            <jsonpath>$.returnCode</jsonpath>
                                        </setHeader>
                                        <choice>
                                            <when>
                                                <simple>${header.RFUUpdateRespCode} == '0' </simple>
                                            </when>
                                            <otherwise>
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_26 Reversal Failed From CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <choice>
                                                    <when>
                                                        <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                        <setHeader name="checkReversalFlag">
                                                            <simple>true</simple>
                                                        </setHeader>
                                                    </when>
                                                    <otherwise>
                                                        <setHeader name="checkReversalFlag">
                                                            <simple>false</simple>
                                                        </setHeader>
                                                    </otherwise>
                                                </choice>
                                            </otherwise>
                                        </choice>
                                        <doCatch>
                                            <exception>java.lang.Exception</exception>
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_25 ERROr OCCURRED During Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                            <choice>
                                                <when>
                                                    <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>true</simple>
                                                    </setHeader>
                                                </when>
                                                <otherwise>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>false</simple>
                                                    </setHeader>
                                                </otherwise>
                                            </choice>
                                        </doCatch>
                                    </doTry>
                                    <doTry>
                                        <setBody>
                                            <simple>{"referenceNo": "${header.RFURef}","rfuField": "ZRFUN1","rfuValue": "1","reversalFlag": "0"}</simple>
                                        </setBody>
                                        <!-- <removeHeader name="RFURef"></removeHeader> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_27 REQUEST SENT TO CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_28 RESPONSE RECEIVED FROM CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <setHeader name="ZRFUUpdateRespCode">
                                            <jsonpath>$.returnCode</jsonpath>
                                        </setHeader>
                                        <choice>
                                            <when>
                                                <simple>${header.ZRFUUpdateRespCode} == '0' </simple>
                                            </when>
                                            <otherwise>
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_29 Reversal Failed From CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <choice>
                                                    <when>
                                                        <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                        <setHeader name="checkReversalFlag">
                                                            <simple>true</simple>
                                                        </setHeader>
                                                    </when>
                                                    <otherwise>
                                                        <setHeader name="checkReversalFlag">
                                                            <simple>false</simple>
                                                        </setHeader>
                                                    </otherwise>
                                                </choice>
                                            </otherwise>
                                        </choice>
                                        <doCatch>
                                            <exception>java.lang.Exception</exception>
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_27 ERROr OCCURRED During Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                            <choice>
                                                <when>
                                                    <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>true</simple>
                                                    </setHeader>
                                                </when>
                                                <otherwise>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>false</simple>
                                                    </setHeader>
                                                </otherwise>
                                            </choice>
                                        </doCatch>
                                    </doTry>
                                    <!-- RFuStatus update during refire case start-->
                                    <choice>
                                        <when>
                                            <simple>${header.updateStatusForRefire} == '0'</simple>
                                            <!-- <wireTap uri="direct:updateStatusForRefire" executorServiceRef = "PoolSize"/> -->
                                            <to uri="direct:updateStatusForRefire"/>
                                        </when>
                                        <otherwise>
                                            <log message="no status update for refire....."></log>
                                        </otherwise>
                                    </choice>
                                    <!-- RFuStatus update during refire case end-->
                                </when>
                                <otherwise>
                                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_30 Reversal Failed From CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                    <choice>
                                        <when>
                                            <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                            <setHeader name="checkReversalFlag">
                                                <simple>true</simple>
                                            </setHeader>
                                        </when>
                                        <otherwise>
                                            <setHeader name="checkReversalFlag">
                                                <simple>false</simple>
                                            </setHeader>
                                        </otherwise>
                                    </choice>
                                </otherwise>
                            </choice>
                        </otherwise>
                    </choice>
                </when>
                <otherwise>
                    <removeHeaders pattern="Camel*" />
                    <bean ref="postTransactionRequestBean" method="reverseLoopIndexValue"></bean>
                    <choice>
                        <when>
                            <simple>${header.NewIndex} == '-1'</simple>
                        </when>
                        <otherwise>
                            <setBody>
                                <simple>${header.txnRequest${header[NewIndex]}}</simple>
                            </setBody>
                            <bean ref="postTransactionRequestBean" method="replaceReversalFlag"></bean>
                            <log message="ESB_DirectDMTOrchestration MessageBody ${body}"></log>
                            <choice>
                                <when>
                                    <simple>${header.ReverseFlag} == '1'</simple>
                                </when>
                                <otherwise>
                                    <marshal><json/></marshal>
                                    <setHeader name="RevReq">
                                        <simple>${body}</simple>
                                    </setHeader>
                                    <log message="ESB_DirectDMTOrchestration DBINSERT QUERY ${header.DBInsertRequest1}"></log>
                                    <setBody>
                                        <simple>${header.DBInsertRequest${header[NewIndex]}}</simple>
                                    </setBody>
                                    <unmarshal><json/></unmarshal>
                                    <bean ref="databaseBean" method="createReversalDBRequest"></bean>
                                    <marshal><json/></marshal>
                                    <convertBodyTo type="java.lang.String"></convertBodyTo>
                                    <setHeader name="TransactionQueryReq">
                                        <simple>${body}</simple>
                                    </setHeader>
                                    <setBody>
                                        <simple></simple>
                                    </setBody>
                                    <log message="ESB_DirectDMTOrchestration Reversal Request TO Database Queue ${header.TransactionQueryReq}"></log>
                                    <removeHeader name="AddBeneficiary"></removeHeader>
                                    <removeHeader name="CreateAccount"></removeHeader>
                                    <removeHeader name="CreateCustomer"></removeHeader>
                                    <removeHeader name="CustomerAuth"></removeHeader>
                                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                    <removeHeader name="TransactionQueryReq"></removeHeader>
                                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"1","Response_Flag":"0","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","RequestOut": null,"Response_Message": "","Status_Code": "","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                                    <setBody>
                                        <simple>${header.RevReq}</simple>
                                    </setBody>
                                    <removeHeader name="RevReq"></removeHeader>
                                    <log message="ESB_DirectDMTOrchestration Index is ${header[CamelLoopIndex]}"></log>
                                    <choice>
                                        <when>
                                            <simple>${header.checkReversalFlag} == 'true'</simple>
                                            <doTry>
                                                <!-- <bean ref="requestProcessor" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_18 Reversal REQUEST SENT TO CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                               <bean method="rsPostTransaction" ref="requestProcessor"/>
                                                <!-- <to uri="cxfrs:bean:rsPostTransaction?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_19 Reversal RESPONSE RECEIVED FROM CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <setHeader name="txnReversalResponse">
                                                    <simple>${body}</simple>
                                                </setHeader>
                                                <setHeader name="txnRespCode">
                                                    <jsonpath>$.returnCode</jsonpath>
                                                </setHeader>
                                                
                                                <doCatch>
                                                    <exception>java.net.SocketTimeoutException</exception>
                                                    <setHeader name="txnRespCode">
                                                        <simple>998</simple>
                                                    </setHeader>
                                                    <setHeader name="responseMessage">
                                                        <simple>Timeout from CBS</simple>
                                                    </setHeader>
                                                    <choice>
                                                        <when>
                                                            <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>true</simple>
                                                            </setHeader>
                                                        </when>
                                                        <otherwise>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>false</simple>
                                                            </setHeader>
                                                        </otherwise>
                                                    </choice>
                                                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_20 Reversal RESPONSE Error Occured_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                    <setBody>
                                                        <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}"}</simple>
                                                    </setBody>
                                                </doCatch>
                                                <doCatch>
                                                    <exception>java.lang.Exception</exception>
                                                    <setHeader name="txnRespCode">
                                                        <simple>998</simple>
                                                    </setHeader>
                                                    <setHeader name="responseMessage">
                                                        <simple>Timeout from CBS</simple>
                                                    </setHeader>
                                                    <choice>
                                                        <when>
                                                            <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>true</simple>
                                                            </setHeader>
                                                        </when>
                                                        <otherwise>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>false</simple>
                                                            </setHeader>
                                                        </otherwise>
                                                    </choice>
                                                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 Reversal EXception Occurred_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                    <setBody>
                                                        <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}"}</simple>
                                                    </setBody>
                                                </doCatch>
                                            </doTry>
                                        </when>
                                        <otherwise>
                                            <setHeader name="txnRespCode">
                                                <simple>11</simple>
                                            </setHeader>
                                            <setHeader name="responseMessage">
                                                <simple>No Reversal Initiated checkReversalFlag is FALSE</simple>
                                            </setHeader>
                                            <setHeader name="RFURef">
                                                <jsonpath>$.referenceNo</jsonpath>
                                            </setHeader>
                                            <setBody>
                                                <simple>{"returnCode":"${header.txnRespCode}","responseMessage":"${header.responseMessage}","txnReferenceNo":${header.RFURef}} </simple>
                                            </setBody>
                                            <log message="In Otherwise_${header.RFURef}"></log>
                                            <setHeader name="checkReversalFlag">
                                                <simple>true</simple>
                                            </setHeader>
                                        </otherwise>
                                    </choice>
                                    <unmarshal><json/></unmarshal>
                                    <bean ref="databaseBean" method="createReversalDBResponse" />
                                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue for Transaction Response ${header.TransactionQueryReq}"></log>
                                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                    <!-- Reversal RFU Update -->
                                    <choice>
                                        <when>
                                            <simple>${header.txnRespCode} == '0'</simple>
                                            <!-- RFUT8 Update After Reversal -->
                                            <doTry>
                                                <setBody>
                                                    <simple>{"referenceNo": "${header.RFURef}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}","reversalFlag": "1"}</simple>
                                                </setBody>
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_21 REQUEST SENT TO CBS For Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                              <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                                <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_22 RESPONSE RECEIVED FROM CBS For Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <setHeader name="ZRFUUpdateRespCode">
                                                    <jsonpath>$.returnCode</jsonpath>
                                                </setHeader>
                                                <choice>
                                                    <when>
                                                        <simple>${header.ZRFUUpdateRespCode} == '0' </simple>
                                                    </when>
                                                    <otherwise>
                                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_23 Reversal Failed From CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                        <choice>
                                                            <when>
                                                                <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                                <setHeader name="checkReversalFlag">
                                                                    <simple>true</simple>
                                                                </setHeader>
                                                            </when>
                                                            <otherwise>
                                                                <setHeader name="checkReversalFlag">
                                                                    <simple>false</simple>
                                                                </setHeader>
                                                            </otherwise>
                                                        </choice>
                                                    </otherwise>
                                                </choice>
                                                <doCatch>
                                                    <exception>java.lang.Exception</exception>
                                                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_24 ERROr OCCURRED During Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                </doCatch>
                                            </doTry>
                                            <!-- RFUT8 Update After Reversal Ends-->
                                            <setBody>
                                                <simple>{"referenceNo": "${header.RFURef}","rfuField": "ZRFUN1","rfuValue": "1","reversalFlag": "0"}</simple>
                                            </setBody>
                                            <!-- <removeHeader name="RFURef"></removeHeader> -->
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_25 REQUEST SENT TO CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                            <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                            <doTry>
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                               <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                                <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_26 RESPONSE RECEIVED FROM CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <doCatch>
                                                    <exception>java.lang.Exception</exception>
                                                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_27 ERROr OCCURRED During Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                    <choice>
                                                        <when>
                                                            <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>true</simple>
                                                            </setHeader>
                                                        </when>
                                                        <otherwise>
                                                            <setHeader name="checkReversalFlag">
                                                                <simple>false</simple>
                                                            </setHeader>
                                                        </otherwise>
                                                    </choice>
                                                </doCatch>
                                            </doTry>
                                            <!-- RFuStatus update during refire case start-->
                                            <choice>
                                                <when>
                                                    <simple>${header.updateStatusForRefire} == '0'</simple>
                                                    <!-- <wireTap uri="direct:updateStatusForRefire" executorServiceRef = "PoolSize"/> -->
                                                    
                                                    <to uri="direct:updateStatusForRefire"/>
                                                </when>
                                                <otherwise>
                                                    <log message="no status update for refire....."></log>
                                                </otherwise>
                                            </choice>
                                            <!-- RFuStatus update during refire case end-->
                                        </when>
                                        <otherwise>
                                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_28 Reversal Failed From CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                            <choice>
                                                <when>
                                                    <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>true</simple>
                                                    </setHeader>
                                                </when>
                                                <otherwise>
                                                    <setHeader name="checkReversalFlag">
                                                        <simple>false</simple>
                                                    </setHeader>
                                                </otherwise>
                                            </choice>
                                        </otherwise>
                                    </choice>
                                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "${header.DBtxnRespCode}","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                                    <removeHeader name="TransactionQueryReq"></removeHeader>
                                </otherwise>
                            </choice>
                        </otherwise>
                    </choice>
                </otherwise>
            </choice>
        </loop>
    </route>
    <route id="RT_DMTOrchestration_AuthRoute">
        <from uri="direct:DMTAuthRoute" />
        <choice>
            <when>
                <!--********************************* check first bit of requestBitmap ==1 ,if true call submodules with authentications -->
                <simple>${header.CustomerAuthBit} == '1'</simple>
                <marshal><json/></marshal>
                <setHeader name="authId">
                    <jsonpath>$.CustomerAuth.Auth_id</jsonpath>
                </setHeader>
                <choice>
                    <when>
                        <!--********************************* check authentication by otp -->
                        <simple>${header.authId} == '1'</simple>
                        <setHeader name="otp">
                            <jsonpath>$.CustomerAuth.Otp</jsonpath>
                        </setHeader>
                        <!--****************************** set body for otp request -->
                        <setBody>
                            <simple>${header.otp}</simple>
                        </setBody>
                        <marshal><json/></marshal>
                        <to uri="direct:DMTOtpVerification" />
                        <!--********************************* set header for ResponseCode from otp response -->
                        <setHeader name="otpResCode">
                            <jsonpath>$.ResponseCode</jsonpath>
                        </setHeader>
                        <choice>
                            <when>
                                <!--********************************compare ResponseCode from otp response with 0,if true otp verification successful and call bitmMapValidations route -->
                                <simple>${header.otpResCode} == '000'</simple>
                                <!-- <setHeader name="authRespCode"> <constant>0</constant> </setHeader> -->
                                <setHeader name="VerAuthid">
                                    <jsonpath>$.AuthCode</jsonpath>
                                </setHeader>
                                <setHeader name="authResponse">
                                    <simple>{"returnCode":"0","responseMessage":"OTP Authentication Successful"}</simple>
                                </setHeader>
                                <setHeader name="authResponseReturnCode">
                                    <simple>0</simple>
                                </setHeader>
                                <to uri="direct:bitmMapValidations" />
                            </when>
                            <otherwise>
                                <!-- <setBody> <simple>{"returnCode":"1","responseMessage":"OTP Authentication Failed"}</simple> </setBody> -->
                                <setHeader name="authResponse">
                                    <simple>{"returnCode":"1","responseMessage":"${header.displayMessage}"}</simple>
                                </setHeader>
                                <setHeader name="authResponseReturnCode">
                                    <simple>1</simple>
                                </setHeader>
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <!--********************************* check authentication by Aadhaar -->
                        <simple>${header.authId} == '2'</simple>
                        <setBody>
                            <jsonpath>$.CustomerAuth.Aadhaar.data</jsonpath>
                        </setBody>
                        <log message="ESB_DirectDMTOrchestration Aadhaar Body ${body}"></log>
                        <!-- <transform> <simple>${body}.replace("\"","'")</simple> </transform> -->
                        <to uri="direct:DMTAadhaarVerification" />
                        <setBody>
                            <xpath>/*/*/xs:Auth_XML_CreationLevel_AUAResponse/xs:Auth_XML_CreationLevel_AUAResult/text()</xpath>
                        </setBody>
                        <convertBodyTo type="java.lang.String" />
                        <!-- <to uri="log:before?showHeaders=true" /> -->
                        <setHeader name="authResCode">
                            <xpath>AuthRes/@ret</xpath>
                        </setHeader>
                        <choice>
                            <when>
                                <!--********************************compare authResCode from aadhar response with y,if true aadhar verification successful and call bitmMapValidations route -->
                                <simple>${header.authResCode} == 'y'</simple>
                                <doTry>
                                    <setHeader name="VerAuthid">
                                        <xpath>AuthRes/@txn</xpath>
                                    </setHeader>
                                    <doCatch>
                                        <exception>java.lang.Exception</exception>
                                    </doCatch>
                                </doTry>
                                <setHeader name="authRespCode">
                                    <constant>0</constant>
                                </setHeader>
                                <setHeader name="authResponse">
                                    <simple>{"returnCode":"0","responseMessage":"Aadhaar Authentication Successful"}</simple>
                                </setHeader>
                                <setHeader name="authResponseReturnCode">
                                    <simple>0</simple>
                                </setHeader>
                                <to uri="direct:bitmMapValidations" />
                            </when>
                            <otherwise>
                                <!-- <log message="Aadhaar Authentication Failed"></log> -->
                                <setHeader name="authResponse">
                                    <simple>{"returnCode":"2","responseMessage":"Aadhaar Authentication Failed"}</simple>
                                </setHeader>
                                <setHeader name="authResponseReturnCode">
                                    <simple>1</simple>
                                </setHeader>
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <!--********************************* check authentication by Fp_Auth -->
                        <simple>${header.authId} == '3'</simple>
                        <setHeader name="Fp_Auth">
                            <jsonpath>$.CustomerAuth.Fp_Auth</jsonpath>
                        </setHeader>
                        <!--********************************* set body for Fp_Auth request -->
                        <setBody>
                            <simple>${header.Fp_Auth}</simple>
                        </setBody>
                        <marshal><json/></marshal>
                        <to uri="direct:DMTFPVerification" />
                        <!--********************************* set header for ResponseCode from Fp_Auth response -->
                        <setHeader name="fpResCode">
                            <jsonpath>$.ResponseCode</jsonpath>
                        </setHeader>
                        <choice>
                            <when>
                                <!--********************************compare ResponseCode from Fp_Auth response with 00,if true Fp_Auth verification successful and call bitmMapValidations route -->
                                <simple>${header.fpResCode} == '00'</simple>
                                <log message="ESB_DirectDMTOrchestration FP Auth Successful"></log>
                                <setHeader name="VerRespData">
                                    <jsonpath>$.ResponseData</jsonpath>
                                </setHeader>
                                <bean ref="postTransactionRequestBean" method="getVerAuthId"></bean>
                                <setHeader name="authRespCode">
                                    <constant>0</constant>
                                </setHeader>
                                <setHeader name="authResponse">
                                    <simple>{"returnCode":"0","responseMessage":"FP Authentication Successful"}</simple>
                                </setHeader>
                                <setHeader name="authResponseReturnCode">
                                    <simple>0</simple>
                                </setHeader>
                                <to uri="direct:bitmMapValidations" />
                            </when>
                            <otherwise>
                                <setHeader name="authResponse">
                                    <simple>{"returnCode":"3","responseMessage":"FP Authentication Failed"}</simple>
                                </setHeader>
                                <setHeader name="authResponseReturnCode">
                                    <simple>1</simple>
                                </setHeader>
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <!--********************************* check authentication by otp + aadhar -->
                        <simple>${header.authId} == '4'</simple>
                        <setHeader name="Otp">
                            <jsonpath>$.CustomerAuth.Otp</jsonpath>
                        </setHeader>
                        <setHeader name="aadhaarData">
                            <jsonpath>$.CustomerAuth.Aadhaar.data</jsonpath>
                        </setHeader>
                        <setBody>
                            <simple>${header.otp}</simple>
                        </setBody>
                        <marshal><json/></marshal>
                        <to uri="direct:DMTOtpVerification" />
                        <setHeader name="OtpResCode">
                            <jsonpath>$.ResponseCode</jsonpath>
                        </setHeader>
                        <choice>
                            <when>
                                <!--********************************compare ResponseCode from otp response with 0,if true otp verification successful and check for aadhar -->
                                <simple>${header.OtpResCode} == '000' </simple>
                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh set body for aadhar request -->
                                <setHeader name="VerAuthid">
                                    <jsonpath>$.AuthCode</jsonpath>
                                </setHeader>
                                <setBody>
                                    <simple>${header.aadhaarData}</simple>
                                </setBody>
                                <to uri="direct:DMTAadhaarVerification" />
                                <setBody>
                                    <xpath>/*/*/xs:Auth_XML_CreationLevel_AUAResponse/xs:Auth_XML_CreationLevel_AUAResult/text()</xpath>
                                </setBody>
                                <convertBodyTo type="java.lang.String" />
                                <log message="ESB_DirectDMTOrchestration ADHAAAR:::::"></log>
                                <!-- <to uri="log:before?showHeaders=true" /> -->
                                <setHeader name="authResCode">
                                    <xpath>AuthRes/@ret</xpath>
                                </setHeader>
                                <setHeader name="Content-Type">
                                    <simple>application/json</simple>
                                </setHeader>
                                <choice>
                                    <when>
                                        <!--********************************compare authResCode from aadhar response with y,if true aadhar verification successful and call bitmMapValidations route -->
                                        <simple>${header.authResCode} == 'y'</simple>
                                        <setHeader name="authResponseReturnCode">
                                            <simple>0</simple>
                                        </setHeader>
                                        <setHeader name="authResponse">
                                            <simple>{"returnCode":"0","responseMessage":"OTP+Aadhaar Authentication Successful"}</simple>
                                        </setHeader>
                                        <to uri="direct:bitmMapValidations" />
                                    </when>
                                    <otherwise>
                                        <setHeader name="Content-Type">
                                            <simple>application/json</simple>
                                        </setHeader>
                                        <setHeader name="authResponse">
                                            <simple>{"returnCode": "4","responseMessage":"Aadhaar Authentication Failed"}</simple>
                                        </setHeader>
                                        <setHeader name="authResponseReturnCode">
                                            <simple>1</simple>
                                        </setHeader>
                                        <!-- <removeHeaders pattern="*" excludePattern="breadcrumbId|Content-Type|XCorrelationId|RequestorId"/> -->
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise>
                                <setHeader name="Content-Type">
                                    <simple>application/json</simple>
                                </setHeader>
                                <setHeader name="authResponse">
                                    <simple>{"returnCode": "4","responseMessage":"${header.displayMessage}"}</simple>
                                </setHeader>
                                <setHeader name="authResponseReturnCode">
                                    <simple>1</simple>
                                </setHeader>
                                <!-- <removeHeaders pattern="*" excludePattern="breadcrumbId|Content-Type|XCorrelationId|RequestorId"/> -->
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh authentication by OTP and Fp_Auth -->
                        <simple>${header.authId} == '5'</simple>
                        <setHeader name="CustomerAuth">
                            <jsonpath>$.CustomerAuth.Otp</jsonpath>
                        </setHeader>
                        <setHeader name="fp_auth">
                            <jsonpath>$.CustomerAuth.Fp_Auth</jsonpath>
                        </setHeader>
                        <setBody>
                            <jsonpath>$.CustomerAuth.Otp</jsonpath>
                        </setBody>
                        <marshal><json/></marshal>
                        <to uri="direct:DMTOtpVerification" />
                        <setHeader name="OtpResCode">
                            <jsonpath>$.ResponseCode</jsonpath>
                        </setHeader>
                        <choice>
                            <when>
                                <!--********************************compare ResponseCode from otp response with 0,if true otp verification successful and check for Fp -->
                                <simple>${header.OtpResCode} == '000' </simple>
                                <setHeader name="VerAuthid">
                                    <jsonpath>$.AuthCode</jsonpath>
                                </setHeader>
                                <setBody>
                                    <simple>${header.fp_auth}</simple>
                                </setBody>
                                <marshal><json/></marshal>
                                <to uri="direct:DMTFPVerification" />
                                <setHeader name="Ftp_code">
                                    <jsonpath>$.ResponseCode</jsonpath>
                                </setHeader>
                                <choice>
                                    <when>
                                        <!--********************************compare ResponseCode from Fp_Auth response with 00,if true Fp_Auth verification successful and call bitmMapValidations route -->
                                        <simple>${header.Ftp_code} == '00'</simple>
                                        <setHeader name="VerRespData">
                                            <jsonpath>$.ResponseData</jsonpath>
                                        </setHeader>
                                        <bean ref="postTransactionRequestBean" method="getVerAuthId"></bean>
                                        <setHeader name="authResponseReturnCode">
                                            <simple>0</simple>
                                        </setHeader>
                                        <setHeader name="authResponse">
                                            <simple>{"returnCode":"0","responseMessage":"FP+otp Authentication Successful"}</simple>
                                        </setHeader>
                                        <to uri="direct:bitmMapValidations" />
                                    </when>
                                    <otherwise>
                                        <setHeader name="Content-Type">
                                            <simple>application/json</simple>
                                        </setHeader>
                                        <setHeader name="authResponse">
                                            <simple>{"returnCode": "5","responseMessage":"FP Authentication Failed"}</simple>
                                        </setHeader>
                                        <setHeader name="authResponseReturnCode">
                                            <simple>1</simple>
                                        </setHeader>
                                        <!-- <removeHeaders pattern="*" excludePattern="breadcrumbId|Content-Type|XCorrelationId|RequestorId"/> -->
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise>
                                <setHeader name="Content-Type">
                                    <simple>application/json</simple>
                                </setHeader>
                                <setHeader name="authResponse">
                                    <simple>{"returnCode": "5","responseMessage":"${header.displayMessage}"}</simple>
                                </setHeader>
                                <setHeader name="authResponseReturnCode">
                                    <simple>1</simple>
                                </setHeader>
                                <!-- <removeHeaders pattern="*" excludePattern="breadcrumbId|Content-Type|XCorrelationId|RequestorId"/> -->
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh authentication by Fp_Auth and Aadhar -->
                        <simple>${header.authId} == '6'</simple>
                        <setHeader name="aadhaarData">
                            <jsonpath>$.CustomerAuth.Aadhaar.data</jsonpath>
                        </setHeader>
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh set body for Fp_Auth request -->
                        <setBody>
                            <jsonpath>$.CustomerAuth.Fp_Auth</jsonpath>
                        </setBody>
                        <marshal><json/></marshal>
                        <to uri="direct:DMTFPVerification" />
                        <setHeader name="Fp_Auth">
                            <jsonpath>$.ResponseCode</jsonpath>
                        </setHeader>
                        <choice>
                            <when>
                                <!--********************************compare ResponseCode from Fp_Auth response with 00,if true Fp_Auth verification successful and check aadhar verification -->
                                <simple>${header.Fp_Auth} == '00' </simple>
                                <setHeader name="VerRespData">
                                    <jsonpath>$.ResponseData</jsonpath>
                                </setHeader>
                                <bean ref="postTransactionRequestBean" method="getVerAuthId"></bean>
                                <setBody>
                                    <simple>${header.aadhaarData}</simple>
                                </setBody>
                                <to uri="direct:DMTAadhaarVerification" />
                                <setBody>
                                    <xpath>/*/*/xs:Auth_XML_CreationLevel_AUAResponse/xs:Auth_XML_CreationLevel_AUAResult/text()</xpath>
                                </setBody>
                                <convertBodyTo type="java.lang.String" />
                                <setHeader name="authResCode">
                                    <xpath>AuthRes/@ret</xpath>
                                </setHeader>
                                <setHeader name="Content-Type">
                                    <simple>application/json</simple>
                                </setHeader>
                                <choice>
                                    <when>
                                        <!--********************************compare authResCode from aadhar response with y,if true aadhar verification successful and call bitmMapValidations route -->
                                        <simple>${header.authResCode} == 'y'</simple>
                                        <setHeader name="authResponseReturnCode">
                                            <simple>0</simple>
                                        </setHeader>
                                        <setHeader name="authResponse">
                                            <simple>{"returnCode":"0","responseMessage":"FP+adhaar Authentication Successful"}</simple>
                                        </setHeader>
                                        <to uri="direct:bitmMapValidations" />
                                    </when>
                                    <otherwise>
                                        <setHeader name="Content-Type">
                                            <simple>application/json</simple>
                                        </setHeader>
                                        <setHeader name="authResponse">
                                            <simple>{"returnCode": "6","responseMessage":"Aadhaar Authentication Failed"}</simple>
                                        </setHeader>
                                        <setHeader name="authResponseReturnCode">
                                            <simple>1</simple>
                                        </setHeader>
                                        <!-- <removeHeaders pattern="*" excludePattern="breadcrumbId|Content-Type|XCorrelationId|RequestorId"/> -->
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise>
                                <setHeader name="Content-Type">
                                    <simple>application/json</simple>
                                </setHeader>
                                <setHeader name="authResponse">
                                    <simple>{"returnCode": "6","responseMessage":"FP Authentication Failed"}</simple>
                                </setHeader>
                                <setHeader name="authResponseReturnCode">
                                    <simple>1</simple>
                                </setHeader>
                                <!-- <removeHeaders pattern="*" excludePattern="breadcrumbId|Content-Type|XCorrelationId|RequestorId"/> -->
                            </otherwise>
                        </choice>
                    </when>
                </choice>
            </when>
            <!--******************************* call submodule depends on input request bitMap without authentication -->
            <otherwise>
                <log message="ESB_DirectDMTOrchestration in otherwise..........."></log>
                <removeHeader name="CamelRestletRequest" />
                <removeHeader name="CamelHttpUri" />
                <to uri="direct:bitmMapValidations" />
            </otherwise>
        </choice>
    </route>
    <route id="RT_OTPVerification">
        <from uri="direct:DMTOtpVerification" />
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="charset" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <setHeader name="RequestData">
            <jsonpath>$.RequestData</jsonpath>
        </setHeader>
        <setBody>
            <simple>${header.RequestData}</simple>
        </setBody>
        <setHeader name="idReq">
            <jsonpath>$.RequestId</jsonpath>
        </setHeader>
        <setHeader name="numberMob">
            <jsonpath>$.CustomerMobileNo</jsonpath>
        </setHeader>
        <setHeader name="pinOtp">
            <jsonpath>$.OtpPin</jsonpath>
        </setHeader>
        <setBody>
            <simple>{"MethodId": "2","TellerID": "${header.RequestorId}","CustomerMobileNo":"${header.numberMob}","EventId": "","VerifyParam": {"RequestId": "${header.idReq}","OtpPin": "${header.pinOtp}"}}</simple>
        </setBody>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_6 REQUEST SENT FOR OTP VERIFICATION_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <!--********************************* exposed otp request body on otp url -->
        <!-- <to uri="restlet:{{FINO_OTPURL_{{currentSetUp}}}}?restletMethod=POST" /> -->
           <setHeader name="CamelHttpMethod">
        <simple>POST</simple>
        </setHeader>
        <doTry>
            <to uri="{{ESB_SMSService_FINO_Replica_URL_{{currentSetUp}}}}?headerFilterStrategy=#finoHeaderFilter&amp;httpClientConfigurerRef=myHttpClientConfigurer&amp;socketTimeout={{DEFAULT_TIMEOUT}}" />
            <doCatch>
                <exception>java.net.SocketTimeoutException</exception>
                <setBody>
                    <simple>{"ResponseCode":"001","ResponseMessage":"Info","DisplayMessage":"SocketTimeout From OTP Verification Service"}</simple>
                </setBody>
                <setHeader name="Content-Type">
                    <simple>application/json</simple>
                </setHeader>
            </doCatch>
        </doTry>
        <doTry>
            <setHeader name="displayMessage">
                <jsonpath>$.DisplayMessage</jsonpath>
            </setHeader>
            <doCatch>
                <exception>java.lang.Exception</exception>
            </doCatch>
        </doTry>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_7 RESPONSE RECEIVED FOR OTP VERIFICATION_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
    </route>
    <route id="RT_CentralFPVerification">
        <from uri="direct:DMTFPVerification" />
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="charset" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_6 REQUEST SENT TO Fp_Auth_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <!--********************************* exposed Fp_Auth request body on Fp_Auth url -->
        <setHeader name="CamelHttpMethod">
            <simple>POST</simple>
        </setHeader>
        <!-- <to uri="restlet:{{FINO_FPURL_{{currentSetUp}}}}?restletMethod=POST&amp;httpClient.soTimeout=15000" /> -->
        <to uri="{{FINO_FPURL_{{currentSetUp}}}}?socketTimeout=15000" />
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_7 RESPONSE RECEIVED FROM Fp_Auth_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
    </route>
    <route id="RT_AadhaarVerification">
        <from uri="direct:DMTAadhaarVerification" />
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="charset" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_6 REQUEST SENT TO AADHAR_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <!--********************************exposed Aadhar request on aadhar url using soap service -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_7 URL Before AADHAR {{FINO_AADHARURL_{{currentSetUp}}}}" loggingLevel="INFO" logName="com.fino.asynclog" />
      
     
        <!--<marshal><json/></marshal>-->
        <setHeader name="CamelHttpMethod">
        <simple>POST</simple>
 </setHeader>
  <to uri="{{FINO_AADHARURL_{{currentSetUp}}}}?headerFilterStrategy=#finoHeaderFilter"/>
        <!-- <to uri="cxf:bean:KUA_Auth_Service?dataFormat=MESSAGE&amp;headerFilterStrategy=#finoHeaderFilter" /> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_8 RESPONSE RECEIVED FROM AADHAR_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
    </route>
    <route id="RT_Billpay_Base">
        <from uri="direct:BillpayBase" />
        <log message="ESB_DirectDMTOrchestration BillPay Request"></log>
        <log message="ESB_DirectDMTOrchestration BillDeskAnalysisFlag ${header.BillDeskAnalysisFlag}"></log>
        <choice>
            <when>
                <simple>${header.BillDeskAnalysisFlag} == '1'</simple>
                <!-- Call to PostTransaction -->
                <log message="ESB_DirectDMTOrchestration BillPay Charges Request"></log>
                <setHeader name="paymentReqResponseCode">
                    <simple>SUCCESS</simple>
                </setHeader>
                <to uri="direct:postTransaction" />
            </when>
            <otherwise>
                <setHeader name="CheckSumKey">
                    <simple>{{ESB_BillDesk_CheckSum_{{currentSetUp}}}}</simple>
                </setHeader>
                <!-- Call to Validate in Billdesk -->
                <log message="ESB_DirectDMTOrchestration BillPay Transaction Request"></log>
                <setBody>
                    <simple>${header.BillDeskData}</simple>
                </setBody>
                <setHeader name="TraceID">
                    <simple>${body[TraceID]}</simple>
                </setHeader>
                <setHeader name="SourceID">
                    <simple>${body[SourceID]}</simple>
                </setHeader>
                <setHeader name="TimeStamp">
                    <simple>${body[TimeStamp]}</simple>
                </setHeader>
                <setHeader name="UserID">
                    <simple>${body[UserID]}</simple>
                </setHeader>
                <setHeader name="CustomerID">
                    <simple>${body[CustomerID]}</simple>
                </setHeader>
                <setHeader name="RechargeBillerAccountID">
                    <simple>${body[RechargeBillerAccountID]}</simple>
                </setHeader>
                <setHeader name="BillerID">
                    <simple>${body[BillerId]}</simple>
                </setHeader>
                <setHeader name="Authenticator1">
                    <simple>${body[Authenticator1]}</simple>
                </setHeader>
                <setHeader name="Authenticator2">
                    <simple>${body[Authenticator2]}</simple>
                </setHeader>
                <setHeader name="Authenticator3">
                    <simple>${body[Authenticator3]}</simple>
                </setHeader>
                <setHeader name="RechargeAmount">
                    <simple>${body[RechargeAmount]}</simple>
                </setHeader>
                <setHeader name="Authenticators">
                    <simple>${body[Authenticators]}</simple>
                </setHeader>
                <setHeader name="RechargeBillerId">
                    <simple>${body[RechargeBillerId]}</simple>
                </setHeader>
                <setHeader name="ShortName">
                    <simple>${body[ShortName]}</simple>
                </setHeader>
                <setHeader name="PaymentID">
                    <simple>${body[PaymentId]}</simple>
                </setHeader>
                <setHeader name="PaymentChannelID">
                    <simple>${body[PaymentChannelID]}</simple>
                </setHeader>
                <setHeader name="PaymentType">
                    <simple>${body[PaymentType]}</simple>
                </setHeader>
                <setHeader name="BankRefNo">
                    <simple>${body[BankRefNo]}</simple>
                </setHeader>
                <setHeader name="BankMessage">
                    <simple>${body[BankMessage]}</simple>
                </setHeader>
                <setHeader name="TransactionID">
                    <simple>${body[TransactionId]}</simple>
                </setHeader>
                <setHeader name="BillerAccountID">
                    <simple>${body[BillerAccountId]}</simple>
                </setHeader>
                <setHeader name="BillId">
                    <simple>${body[BillId]}</simple>
                </setHeader>
                <setHeader name="BillDueDate">
                    <simple>${body[BillDueDate]}</simple>
                </setHeader>
                <setHeader name="BillDate">
                    <simple>${body[BillDate]}</simple>
                </setHeader>
                <setHeader name="BillNumber">
                    <simple>${body[BillNumber]}</simple>
                </setHeader>
                <setHeader name="PaymentAmount">
                    <simple>${body[PaymentAmount]}</simple>
                </setHeader>
                <setHeader name="CardType">
                    <simple>${body[CardType]}</simple>
                </setHeader>
                <setHeader name="CardNumber">
                    <simple>${body[CardNumber]}</simple>
                </setHeader>
                <setHeader name="ExtensionField1">
                    <simple>${body[ExtensionField1]}</simple>
                </setHeader>
                <setHeader name="ExtensionField2">
                    <simple>${body[ExtensionField2]}</simple>
                </setHeader>
                <setHeader name="ExtensionField3">
                    <simple>${body[ExtensionField3]}</simple>
                </setHeader>
                <setHeader name="OtherInfo1">
                    <simple>${body[OtherInfo1]}</simple>
                </setHeader>
                <setHeader name="OtherInfo2">
                    <simple>${body[OtherInfo2]}</simple>
                </setHeader>
                <setHeader name="OtherInfo3">
                    <simple>${body[OtherInfo3]}</simple>
                </setHeader>
                <setHeader name="Future1">
                    <simple>${body[Future1]}</simple>
                </setHeader>
                <setHeader name="Future2">
                    <simple>${body[Future2]}</simple>
                </setHeader>
                <setHeader name="Filler1">
                    <simple>${body[Filler1]}</simple>
                </setHeader>
                <setHeader name="Filler2">
                    <simple>${body[Filler2]}</simple>
                </setHeader>
                <setHeader name="Filler3">
                    <simple>${body[Filler3]}</simple>
                </setHeader>
                <setHeader name="customerMobNo">
                    <simple>${body[CustomerMobNo]}</simple>
                </setHeader>
                <choice>
                    <when>
                        <simple>${header.txnType} == 'BILLPAY'</simple>
                        <to uri="direct:validateBillpayRequest" />
                        <!-- Call Post Transaction For Valid Requests -->
                        <choice>
                            <when>
                                <simple>${header.responseCode} == 'Y'</simple>
                                <to uri="direct:postTransaction" />
                                <choice>
                                    <when>
                                        <simple>${header.resCodePostTrans} == '0'</simple>
                                        <to uri="direct:BillpayTransaction" />
                                    </when>
                                </choice>
                            </when>
                        </choice>
                    </when>
                    <when>
                        <simple>${header.txnType} == 'RECHARGE'</simple>
                        <setHeader name="PaymentAmount">
                            <simple>${header.RechargeAmount}</simple>
                        </setHeader>
                        <to uri="direct:validateRechargeRequest" />
                        <choice>
                            <when>
                                <simple>${header.responseCode} == 'Y'</simple>
                                <to uri="direct:postTransaction" />
                                <choice>
                                    <when>
                                        <simple>${header.resCodePostTrans} == '0'</simple>
                                        <to uri="direct:RechargeTransaction" />
                                    </when>
                                </choice>
                            </when>
                        </choice>
                    </when>
                </choice>
                <!-- <marshal><json/></marshal> -->
            </otherwise>
        </choice>
    </route>
    <route id="RT_Billpay_Validation">
        <from uri="direct:validateBillpayRequest" />
        <log message="ESB_DirectDMTOrchestration Validating Billpay Request"></log>
        <!--********* create tilda separated validations BilldeskURL -->
        <setHeader name="checksumMsg">
            <simple>U07008~${header.TraceID}~${header.SourceID}~${header.TimeStamp}~${header.UserID}~${header.CustomerID}~${header.BillerID}~${header.Authenticator1}~${header.Authenticator2}~${header.Authenticator3}~${header.Filler1}~${header.Filler2}~${header.Filler3}</simple>
        </setHeader>
        <!--******* call java bean to generate checksum -->
        <bean ref="billdeskChecksumBean" method="generateChecksum" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh complete BilDesk validations url with checksum generation -->
        <setHeader name="CamelHttpQuery">
            <simple>msg=${header.checksumMsg}~${header.generatedChecksum}</simple>
        </setHeader>
        <removeHeader name="CamelHttpResponseCode" />
        <removeHeader name="Content-Length" />
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="charset" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <removeHeader name="CamelHttpResponseCode" />
        <removeHeader name="CamelAcceptContentType" />
        <removeHeader name="CamelCxfRsUsingHttpAPI" />
        <removeHeader name="Content-Length" />
        <removeHeader name="Content-Type" />
        <removeHeader name="Content-Language" />
        <removeHeader name="breadcrumbId" />
        <removeHeader name="Content-Length" />
        <removeHeader name="ResponseContext" />
        <choice>
            <when>
                <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                <setBody>
                    <simple>{"Method_ID":"104","Layer_ID":"6","Request_Flag":"1","Response_Flag":"0","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","RequestOut": null,"Response_Message": "","Status_Code": "","Service_ID": "5"}</simple>
                </setBody>
                <wireTap uri="direct:dmtDashBoard"/>
                 <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
            </when>
        </choice>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_8 VALIDATION REQUEST URL {{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <doTry>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_9 VALIDATION REQUEST SENT TO BILLDESK U7008_${header.CamelHttpQuery} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <setBody>
                <simple></simple>
            </setBody>
            <to uri="{{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}}?headerFilterStrategy=#fisHeaderFilter" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_10 VALIDATION RESPONSE FROM BILLDESK U7009_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <bean ref="billdeskResponseBean" method="convertToJson" />
            <setHeader name="validationsresponse">
                <simple>${body}</simple>
            </setHeader>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception While calling BillDesk ${exception}"></log>
                <setHeader name="validationsresponse">
                    <simple>{"returnCode":"1","responseMessage":"Error Occured During BillDesk Call"}</simple>
                </setHeader>
            </doCatch>
        </doTry>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_11 VALIDATION RESPONSE RECEIVED FROM BILLDESK U7009 JSON ${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <choice>
            <when>
                <simple>${header.responseCode} == 'Y'</simple>
                <setHeader name="DashboardValRespCode">
                    <simple>0</simple>
                </setHeader>
            </when>
            <otherwise>
                <setHeader name="DashboardValRespCode">
                    <simple>1</simple>
                </setHeader>
            </otherwise>
        </choice>
        <choice>
            <when>
                <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                <setBody>
                    <simple>{"Method_ID":"104","Layer_ID":"6","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "${header.DashboardValRespCode}","Service_ID": "5"}</simple>
                </setBody>
                <wireTap uri="direct:dmtDashBoard" />
                <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                <removeHeader name="DashboardValRespCode"></removeHeader>
            </when>
        </choice>
    </route>
    <route id="RT_Recharge_Validation">
        <from uri="direct:validateRechargeRequest" />
        <log message="ESB_DirectDMTOrchestration Validating Recharge Request"></log>
        <setHeader name="checksumMsg">
            <simple>U03005~${body[TraceID]}~${body[SourceID]}~${body[TimeStamp]}~${body[UserID]}~${body[CustomerID]}~${body[RechargeBillerAccountID]}~${body[BillerId]}~${body[Authenticator1]}~${body[Authenticator2]}~${body[Authenticator3]}~${body[RechargeAmount]}~${body[Filler1]}~${body[Filler2]}~${body[Filler3]}</simple>
        </setHeader>
        <!-- Use Recharge Amount for -->
        <!--********* call java bean to generate checksum -->
        <bean ref="billdeskChecksumBean" method="generateChecksum" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh complete URL with checksum generation for BillDesk -->
        <setHeader name="CamelHttpQuery">
            <simple>msg=${header.checksumMsg}~${header.generatedChecksum}</simple>
        </setHeader>
        <removeHeader name="CamelHttpResponseCode" />
        <removeHeader name="Content-Length" />
        <removeHeader name="CamelHttpMethod" />
        <removeHeader name="CamelHttpUri" />
        <removeHeader name="CamelRestletRequest" />
        <removeHeader name="CamelRestletResponse" />
        <removeHeader name="Content-Type" />
        <removeHeader name="charset" />
        <removeHeader name="org.restlet.http.headers" />
        <removeHeader name="org.restlet.startTime" />
        <removeHeader name="CamelHttpResponseCode" />
        <removeHeader name="CamelAcceptContentType" />
        <removeHeader name="CamelCxfRsUsingHttpAPI" />
        <removeHeader name="Content-Length" />
        <removeHeader name="Content-Type" />
        <removeHeader name="Content-Language" />
        <removeHeader name="breadcrumbId" />
        <removeHeader name="Content-Length" />
        <removeHeader name="ResponseContext" />
        <choice>
            <when>
                <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                <setBody>
                    <simple>{"Method_ID":"104","Layer_ID":"6","Request_Flag":"1","Response_Flag":"0","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","RequestOut": null,"Response_Message": "","Status_Code": "","Service_ID": "5"}</simple>
                </setBody>
                <wireTap uri="direct:dmtDashBoard"/>
                 <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
            </when>
        </choice>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_12 VALIDATION REQUEST URL {{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <doTry>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_13 VALIDATION REQUEST SENT TO BILLDESK U3005 ${header.CamelHttpQuery} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <setBody>
                <simple></simple>
            </setBody>
            <to uri="{{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}}?headerFilterStrategy=#fisHeaderFilter" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_14 VALIDATION RESPONSE FROM BILLDESK U3006_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <bean ref="billdeskResponseBean" method="convertToJson" />
            <setHeader name="validationsresponse">
                <simple>${body}</simple>
            </setHeader>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception While calling BillDesk ${exception}"></log>
                <setHeader name="validationsresponse">
                    <simple>{"returnCode":"1","responseMessage":"Error Occured During BillDesk Call"}</simple>
                </setHeader>
            </doCatch>
        </doTry>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_15 VALIDATION RESPONSE RECEIVED FROM BILLDESK U3006 JSON ${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <choice>
            <when>
                <simple>${header.responseCode} == 'Y'</simple>
                <setHeader name="DashboardValRespCode">
                    <simple>0</simple>
                </setHeader>
            </when>
            <otherwise>
                <setHeader name="DashboardValRespCode">
                    <simple>1</simple>
                </setHeader>
            </otherwise>
        </choice>
        <choice>
            <when>
                <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                <setBody>
                    <simple>{"Method_ID":"104","Layer_ID":"6","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "${header.DashboardValRespCode}","Service_ID": "5"}</simple>
                </setBody>
                <wireTap uri="direct:dmtDashBoard"/>
                <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                <removeHeader name="DashboardValRespCode"></removeHeader>
            </when>
        </choice>
    </route>
    <route id="RT_Billpay_Transaction">
        <from uri="direct:BillpayTransaction" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh DB insertion request for BillDesk payment U05003 start -->
        <setHeader name="TransactionQueryReq">
            <simple>{"Insert_Type":"0","requestType":"6","ACCTNUM":"${header.AccountNumber}","PCODE":"BILLDESKPOSTING","MSGTYPE":"0","TRACE":"${header.BankRefNo}","AMOUNT":"${header.PaymentAmount}","TERMID":"${header.RequestorId}","CH_AMOUNT":"${header.PaymentAmount}","AMOUNT_EQUIV":"${header.PaymentAmount}","Support_data":"NULL","Credit_Debit_Flag":"D","appId":"${header.DBAppId}","isInclusive":"${header.isInclusive}","Method_Id":"${header.MethodId}","Source_Id":"${header.SourceID}","Biller_Id":"${header.BillerID}","Payment_Channel_Id":"${header.PaymentChannelID}","Payment_Type":"${header.PaymentType}","X_CORRELATION_ID":"${header.X-Correlation-Id}","Layer":"ESB","TXNSRC":"${header.appId}","TXNDEST":"{{esbHost}}","Parent_RRN":"${header.parentRRNSMS}","RemeMobileNo":"${header.CustomerMobNo}"}</simple>
        </setHeader>
        <doTry>
            <to pattern="InOnly" uri="activemq:queue:TransactionQueue" />
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception Occured while que insert: ${exception.stacktrace}"></log>
            </doCatch>
        </doTry>
        <removeHeader name="TransactionQueryReq" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh DB insertion request for BillDesk payment U05003 end -->
        <setHeader name="checksumMsg">
            <simple>U05003~${header.TraceID}~${header.SourceID}~${header.TimeStamp}~${header.UserID}~${header.CustomerID}~${header.BillerID}~${header.BillerAccountID}~${header.ShortName}~${header.authenticatorsReplace}~${header.BillId}~${header.BillDueDate1}~${header.BillDate1}~${header.BillNumber1}~${header.PaymentAmount}~${header.PaymentType}~${header.PaymentID}~${header.BankRefNo}~${header.BankMessage}~${header.CardType}~${header.CardNumber}~${header.Filler1}~${header.Filler2}~${header.Filler3}</simple>
        </setHeader>
        <!--********* call java bean to generate checksum -->
        <bean ref="billdeskChecksumBean" method="generateChecksum" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh complete URL with checksum generation for BillDesk -->
        <setHeader name="CamelHttpQuery">
            <simple>msg=${header.checksumMsg}~${header.generatedChecksum}</simple>
        </setHeader>
        <choice>
            <when>
                <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                <setBody>
                    <simple>{"Method_ID":"104","Layer_ID":"6","Request_Flag":"1","Response_Flag":"0","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"2","Node_IP_Address": "{{esbHost}}","RequestIn": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","RequestOut": null,"Response_Message": "","Status_Code": "","Service_ID": "5"}</simple>
                </setBody>
                <wireTap uri="direct:dmtDashBoard"/>
                <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
            </when>
        </choice>
        <doTry>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 BILLPAY REQUEST URL {{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_17 BILLPAY REQUEST SENT TO BILLDESK U05003_${header.CamelHttpQuery} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <to uri="{{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}}?socketTimeout={{BillDeskTimeOut}}&amp;headerFilterStrategy=#fisHeaderFilter" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 BILLPAY RESPONSE RECEIVED FROM BILLDESK U05004_${header.CamelHttpQuery} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <bean ref="billdeskResponseBean" method="convertToJson" />
            <setHeader name="paymentResponse">
                <simple>${body}</simple>
            </setHeader>
            <!--********** DB insertion response for BillDesk payment start -->
            <setHeader name="PaymentRes1">
                <simple>4</simple>
            </setHeader>
            <setHeader name="TransactionQueryReq">
                <simple>{"Insert_Type":"1","Request_Type":"6","ACCTNUM":"${header.AccountNumber}","PCODE":"BILLDESKPOSTING","MSGTYPE":"0","RESPCODE":"${header.paymentReqResponseCode}","Response_Msg":"${header.paymentReqResponseCode}","TRACE":"${header.BankRefNo}","REFNUM":"${header.cbsTxnReferenceNo}","AMOUNT":"${header.PaymentAmount}","TERMID":"${header.RequestorId}","Ledger_Balance":"${header.availableBalance}","GL_Ledger_Balance":"${header.GlAvailableBalance}","Payment_Status":"${header.paymentReqResponseCode}","X_CORRELATION_ID":"${header.X-Correlation-Id}","IMPSRRN":"${header.PaymentIDForDB}"}</simple>
            </setHeader>
            <doTry>
                <to pattern="InOnly" uri="activemq:queue:TransactionQueue" />
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="ESB_DirectDMTOrchestration Exception Occured while que insert: ${exception.stacktrace}"></log>
                </doCatch>
            </doTry>
            <removeHeader name="TransactionQueryReq" />
            <!--********** DB insertion response for BillDesk payment end -->
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception Occured : ${exception.stacktrace}"></log>
                <setHeader name="timeOut">
                    <simple>0</simple>
                </setHeader>
                <setHeader name="PaymentIDForRFU">
                    <simple>${header.ReferenceNoDB}</simple>
                </setHeader>
                <setHeader name="paymentReqResponseCode">
                    <simple>PENDING</simple>
                </setHeader>
                <setHeader name="paymentResponse">
                    <simple>{"ErrorCode":"1","responseMessage":"Request Time Out"}</simple>
                </setHeader>
                <wireTap uri="direct:billdeskRFUT8Update" />
                <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
            </doCatch>
        </doTry>
        <choice>
            <when>
                <simple>${header.paymentReqResponseCode} == 'SUCCESS' || ${header.paymentReqResponseCode} == 'PAID'</simple>
                <setHeader name="DashboardBilldeskRespCode">
                    <simple>0</simple>
                </setHeader>
            </when>
            <when>
                <simple>${header.paymentReqResponseCode} == 'PENDING' || ${header.paymentReqResponseCode} == 'TOBECONFIRMED' || ${header.paymentReqResponseCode} == 'NA' || ${header.timeOut} == '0'</simple>
                <setHeader name="DashboardBilldeskRespCode">
                    <simple>2</simple>
                </setHeader>
            </when>
            <otherwise>
                <setHeader name="DashboardBilldeskRespCode">
                    <simple>1</simple>
                </setHeader>
            </otherwise>
        </choice>
        <choice>
            <when>
                <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                <setBody>
                    <simple>{"Method_ID":"104","Layer_ID":"6","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"2","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "${header.DashboardBilldeskRespCode}","Service_ID": "5"}</simple>
                </setBody>
                <wireTap uri="direct:dmtDashBoard" />
                <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                <removeHeader name="DashboardBilldeskRespCode"></removeHeader>
            </when>
        </choice>
        <!-- Call For Billpay Inquiry -->
        <choice>
            <when>
                <simple>${header.paymentReqResponseCode} == 'PENDING' || ${header.paymentReqResponseCode} == 'TOBECONFIRMED' || ${header.paymentReqResponseCode} == 'NA' || ${header.timeOut} == '0'</simple>
                <setHeader name="RFUN1status">
                    <simple>2</simple>
                </setHeader>
                <wireTap uri="direct:billdeskStatusUpdate"/>
                <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->
                <to uri="direct:BillpayInquiry" />
                <!-- Reverse for Failed Inquiry -->
                <choice>
                    <when>
                        <simple>${header.transactionInquiryResCode} == 'FAILED'</simple>
                        <setHeader name="RFUN1status">
                            <simple>1</simple>
                        </setHeader>
                        <wireTap uri="direct:billdeskStatusUpdate" />
                        <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->
                        <wireTap uri="direct:billdeskRFUT8Update" />
                        <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
                        <to uri="direct:billdeskReversal" />
                        <choice>
                            <when>
                                <simple>${header.IMPS_appId} == 'MB'</simple>
                                <log message="no sms sending for APP id MB in failure case...."></log>
                            </when>
                            <otherwise>
                                <wireTap uri="direct:billdeskFailedSMS"/>
                                <!-- <wireTap uri="direct:billdeskFailedSMS" executorServiceRef = "PoolSize"/> -->
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <simple>${header.transactionInquiryResCode} == 'SUCCESS' || ${header.transactionInquiryResCode} == 'PAID'</simple>
                        <setHeader name="RFUN1status">
                            <simple>0</simple>
                        </setHeader>
                        <wireTap uri="direct:billdeskStatusUpdate" />
                         <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->
                        <wireTap uri="direct:billdeskRFUT8Update" />
                         <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
                        
                        <choice>
                            <when>
                                <simple>${header.IMPS_appId} == 'MB' &amp;&amp; ${header.txnType} == 'RECHARGE'</simple>
                                <wireTap uri="direct:billdeskBpaySMS" />
                                <!-- <wireTap uri="direct:billdeskBpaySMS" executorServiceRef = "PoolSize"/> -->
                            </when>
                            <otherwise>
                                <wireTap uri="direct:billdeskSMS" />
                                <!-- <wireTap uri="direct:billdeskSMS" executorServiceRef = "PoolSize"/> -->
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <simple>${header.transactionInquiryResCode} == 'PENDING' || ${header.transactionInquiryResCode} == 'TOBECONFIRMED' || ${header.transactionInquiryResCode} == 'NA'</simple>
                        <choice>
                            <when>
                                <simple>${header.IMPS_appId} == 'FINOMER' || ${header.IMPS_appId} == 'FINOMERNP'</simple>
                                <wireTap uri="direct:billdeskSMS" />
                                <!-- <wireTap uri="direct:billdeskSMS" executorServiceRef = "PoolSize"/> -->
                            </when>
                        </choice>
                    </when>
                </choice>
            </when>
            <when>
                <simple>${header.paymentReqResponseCode} == 'FAILED'</simple>
                <setHeader name="RFUN1status">
                    <simple>1</simple>
                </setHeader>
                <wireTap uri="direct:billdeskStatusUpdate" />
                <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->

                <wireTap uri="direct:billdeskRFUT8Update"/>
                <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
                <to uri="direct:billdeskReversal" />
                <choice>
                    <when>
                        <simple>${header.IMPS_appId} == 'MB'</simple>
                        <log message="no sms sending for APP id MB in failure case...."></log>
                    </when>
                    <otherwise>
                        <wireTap uri="direct:billdeskFailedSMS"/>
                        <!-- <wireTap uri="direct:billdeskFailedSMS" executorServiceRef = "PoolSize"/> -->
                    </otherwise>
                </choice>
            </when>
            <when>
                <simple>${header.paymentReqResponseCode} == 'SUCCESS' || ${header.paymentReqResponseCode} == 'PAID'</simple>
                <setHeader name="RFUN1status">
                    <simple>0</simple>
                </setHeader>
                <wireTap uri="direct:billdeskStatusUpdate"/>
                <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->
                <wireTap uri="direct:billdeskRFUT8Update"/>
                <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
                <choice>
                    <when>
                        <simple>${header.IMPS_appId} == 'MB' &amp;&amp; ${header.txnType} == 'RECHARGE'</simple>
                        <wireTap uri="direct:billdeskBpaySMS" />
                        <!-- <wireTap uri="direct:billdeskBpaySMS" executorServiceRef = "PoolSize"/> -->
                    </when>
                    <otherwise>
                        <wireTap uri="direct:billdeskSMS" />
                        <!-- <wireTap uri="direct:billdeskSMS" executorServiceRef = "PoolSize"/> -->
                    </otherwise>
                </choice>
            </when>
            <otherwise> </otherwise>
        </choice>
    </route>
    <route id="RT_Recharge_Transaction">
        <from uri="direct:RechargeTransaction" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh DB insertion for payment request U03013 start -->
        <setHeader name="TransactionQueryReq">
            <simple>{"Insert_Type":"0","requestType":"6","ACCTNUM":"${header.AccountNumber}","PCODE":"BILLDESKPOSTING","MSGTYPE":"0","TRACE":"${header.BankRefNo}","AMOUNT":"${header.PaymentAmount}","TERMID":"${header.RequestorId}","CH_AMOUNT":"${header.PaymentAmount}","AMOUNT_EQUIV":"${header.PaymentAmount}","Support_data":"NULL","Credit_Debit_Flag":"D","appId":"${header.DBAppId}","isInclusive":"${header.isInclusive}","Method_Id":"${header.MethodId}","Source_Id":"${header.SourceID}","Biller_Id":"${header.BillerID}","Payment_Channel_Id":"${header.PaymentChannelID}","Payment_Type":"${header.PaymentType}","X_CORRELATION_ID":"${header.X-Correlation-Id}","Layer":"ESB","TXNSRC":"${header.appId}","TXNDEST":"{{esbHost}}","Parent_RRN":"${header.parentRRNSMS}","RemeMobileNo":"${header.CustomerMobNo}"}</simple>
        </setHeader>
        <doTry>
            <to pattern="InOnly" uri="activemq:queue:TransactionQueue" />
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception Occured while que insert: ${exception.stacktrace}"></log>
            </doCatch>
        </doTry>
        <removeHeader name="TransactionQueryReq" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh DB insertion for payment request U03013 end -->
        <setHeader name="checksumMsg">
            <simple>U03013~${header.TraceID}~${header.SourceID}~${header.TimeStamp}~${header.UserID}~${header.CustomerID}~${header.BillerID}~${header.ShortName}~${header.RechargeBillerAccountID}~${header.Authenticators}~${header.paymentIDValid}~${header.PaymentChannelID}~${header.RechargeAmount}~${header.PaymentType}~${header.BankRefNo}~${header.BankMessage}~${header.Filler1}~${header.Filler2}~${header.Filler3}</simple>
        </setHeader>
        <!--********* call java bean to generate checksum -->
        <bean ref="billdeskChecksumBean" method="generateChecksum" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh complete URL with checksum generation for BillDesk -->
        <setHeader name="CamelHttpQuery">
            <simple>msg=${header.checksumMsg}~${header.generatedChecksum}</simple>
        </setHeader>
        <choice>
            <when>
                <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                <setBody>
                    <simple>{"Method_ID":"104","Layer_ID":"6","Request_Flag":"1","Response_Flag":"0","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"2","Node_IP_Address": "{{esbHost}}","RequestIn": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","RequestOut": null,"Response_Message": "","Status_Code": "","Service_ID": "5"}</simple>
                </setBody>
                <wireTap uri="direct:dmtDashBoard" />
                <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
            </when>
        </choice>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 RECHARGE REQUEST SENT TO URL {{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 RECHARGE REQUEST SENT TO BILLDESK U3013 ${header.CamelHttpQuery} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <doTry>
            <to uri="{{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}}?socketTimeout={{BillDeskTimeOut}}&amp;headerFilterStrategy=#fisHeaderFilter" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 RECHARGE RESPONSE RECEIVED FROM BILLDESK U03014 ${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <bean ref="billdeskResponseBean" method="convertToJson" />
            <setHeader name="paymentResponse">
                <simple>${body}</simple>
            </setHeader>
            <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh DB insertion for payment response U03013 start -->
            <!-- <setHeader name="PaymentRes1"><simple>4</simple></setHeader> -->
            <setHeader name="TransactionQueryReq">
                <simple>{"Insert_Type":"1","Request_Type":"6","ACCTNUM":"${header.AccountNumber}","PCODE":"BILLDESKPOSTING","MSGTYPE":"0","RESPCODE":"${header.paymentReqResponseCode}","Response_Msg":"${header.paymentReqResponseCode}","TRACE":"${header.BankRefNo}","REFNUM":"${header.cbsTxnReferenceNo}","AMOUNT":"${header.PaymentAmount}","TERMID":"${header.RequestorId}","Ledger_Balance":"${header.availableBalance}","GL_Ledger_Balance":"${header.GlAvailableBalance}","Payment_Status":"${header.paymentReqResponseCode}","X_CORRELATION_ID":"${header.X-Correlation-Id}","IMPSRRN":"${header.PaymentIDForDB}"}</simple>
            </setHeader>
            <doTry>
                <to pattern="InOnly" uri="activemq:queue:TransactionQueue" />
                <removeHeader name="TransactionQueryReq" />
                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log message="ESB_DirectDMTOrchestration Exception Occured while que insert: ${exception.stacktrace}"></log>
                    <removeHeader name="TransactionQueryReq" />
                </doCatch>
            </doTry>
            <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh DB insertion for payment response U03013 end -->
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception Occured in CATCH : ${exception.stacktrace}"></log>
                <setHeader name="timeOut">
                    <simple>0</simple>
                </setHeader>
                <setHeader name="PaymentIDForRFU">
                    <simple>${header.ReferenceNoDB}</simple>
                </setHeader>
                <setHeader name="paymentReqResponseCode">
                    <simple>PENDING</simple>
                </setHeader>
                <setHeader name="paymentResponse">
                    <simple>{"ErrorCode":"1","responseMessage":"Request Time Out"}</simple>
                </setHeader>
                <wireTap uri="direct:billdeskRFUT8Update" />
                <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
            </doCatch>
        </doTry>
        <choice>
            <when>
                <simple>${header.paymentReqResponseCode} == 'SUCCESS' || ${header.paymentReqResponseCode} == 'PAID'</simple>
                <setHeader name="DashboardBilldeskRespCode">
                    <simple>0</simple>
                </setHeader>
            </when>
            <when>
                <simple>${header.paymentReqResponseCode} == 'PENDING' || ${header.paymentReqResponseCode} == 'TOBECONFIRMED' || ${header.paymentReqResponseCode} == 'NA' || ${header.timeOut} == '0'</simple>
                <setHeader name="DashboardBilldeskRespCode">
                    <simple>2</simple>
                </setHeader>
            </when>
            <otherwise>
                <setHeader name="DashboardBilldeskRespCode">
                    <simple>1</simple>
                </setHeader>
            </otherwise>
        </choice>
        <choice>
            <when>
                <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                <setBody>
                    <simple>{"Method_ID":"104","Layer_ID":"6","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"2","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "${header.DashboardBilldeskRespCode}","Service_ID": "5"}</simple>
                </setBody>
                <wireTap uri="direct:dmtDashBoard" />
                <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                <removeHeader name="DashboardBilldeskRespCode"></removeHeader>
            </when>
        </choice>
        <!-- Call Inquiry For Pending Requests -->
        <choice>
            <when>
                <simple>${header.paymentReqResponseCode} == 'PENDING' || ${header.paymentReqResponseCode} == 'TOBECONFIRMED' || ${header.paymentReqResponseCode} == 'NA' || ${header.timeOut} == '0'</simple>
                <setHeader name="RFUN1status">
                    <simple>2</simple>
                </setHeader>
                <wireTap uri="direct:billdeskStatusUpdate" />
                <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->
                <wireTap uri="direct:billdeskRFUT8Update"/>
                <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
                <to uri="direct:RechargeInquiry" />
                <!-- Reverse for Failed Inquiry -->
                <choice>
                    <when>
                        <simple>${header.transactionInquiryResCode} == 'FAILED'</simple>
                        <setHeader name="RFUN1status">
                            <simple>1</simple>
                        </setHeader>
                        <wireTap uri="direct:billdeskStatusUpdate" />
                         <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->
                        <wireTap uri="direct:billdeskRFUT8Update" />
                        <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
                        <to uri="direct:billdeskReversal" />
                        <choice>
                            <when>
                                <simple>${header.IMPS_appId} == 'MB'</simple>
                                <log message="no sms sending for APP id MB in failure case...."></log>
                            </when>
                            <otherwise>
                                <wireTap uri="direct:billdeskFailedSMS"/>
                                <!-- <wireTap uri="direct:billdeskFailedSMS" executorServiceRef = "PoolSize"/> -->
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <simple>${header.transactionInquiryResCode} == 'SUCCESS' || ${header.transactionInquiryResCode} == 'PAID'</simple>
                        <setHeader name="RFUN1status">
                            <simple>0</simple>
                        </setHeader>
                        <wireTap uri="direct:billdeskStatusUpdate" />
                        <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->
                        <wireTap uri="direct:billdeskRFUT8Update" />
                        <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
                        <choice>
                            <when>
                                <simple>${header.IMPS_appId} == 'MB' &amp;&amp; ${header.txnType} == 'RECHARGE'</simple>
                                <wireTap uri="direct:billdeskBpaySMS" />
                                <!-- <wireTap uri="direct:billdeskBpaySMS" executorServiceRef = "PoolSize"/> -->
                            </when>
                            <otherwise>
                                <wireTap uri="direct:billdeskSMS" />
                                <!-- <wireTap uri="direct:billdeskSMS" executorServiceRef = "PoolSize"/> -->
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <simple>${header.transactionInquiryResCode} == 'PENDING' || ${header.transactionInquiryResCode} == 'TOBECONFIRMED' || ${header.transactionInquiryResCode} == 'NA'</simple>
                        <choice>
                            <when>
                                <simple>${header.IMPS_appId} == 'FINOMER' || ${header.IMPS_appId} == 'FINOMERNP'</simple>
                                <wireTap uri="direct:billdeskSMS" />
                                <!-- <wireTap uri="direct:billdeskSMS" executorServiceRef = "PoolSize"/> -->
                            </when>
                        </choice>
                    </when>
                </choice>
            </when>
            <when>
                <simple>${header.paymentReqResponseCode} == 'SUCCESS' || ${header.paymentReqResponseCode} == 'PAID'</simple>
                <!-- Success Cases -->
                <setHeader name="RFUN1status">
                    <simple>0</simple>
                </setHeader>
                <wireTap uri="direct:billdeskStatusUpdate" />
                 <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->
                <wireTap uri="direct:billdeskRFUT8Update" />
                <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
                <choice>
                    <when>
                        <simple>${header.IMPS_appId} == 'MB' &amp;&amp; ${header.txnType} == 'RECHARGE'</simple>
                        <wireTap uri="direct:billdeskBpaySMS" />
                        <!-- <wireTap uri="direct:billdeskBpaySMS" executorServiceRef = "PoolSize"/> -->
                    </when>
                    <otherwise>
                        <wireTap uri="direct:billdeskSMS" />
                        <!-- <wireTap uri="direct:billdeskSMS" executorServiceRef = "PoolSize"/> -->
                    </otherwise>
                </choice>
            </when>
            <when>
                <simple>${header.paymentReqResponseCode} == 'FAILED'</simple>
                <!-- Failed Cases -->
                <setHeader name="RFUN1status">
                    <simple>1</simple>
                </setHeader>
                <wireTap uri="direct:billdeskStatusUpdate" />
                <!-- <wireTap uri="direct:billdeskStatusUpdate" executorServiceRef = "PoolSize"/> -->
                <wireTap uri="direct:billdeskRFUT8Update" />
                 <!-- <wireTap uri="direct:billdeskRFUT8Update" executorServiceRef = "PoolSize"/> -->
                <to uri="direct:billdeskReversal" />
                <choice>
                    <when>
                        <simple>${header.IMPS_appId} == 'MB'</simple>
                        <log message="no sms sending for APP id MB in failure case...."></log>
                    </when>
                    <otherwise>
                        <wireTap uri="direct:billdeskFailedSMS" />
                        <!-- <wireTap uri="direct:billdeskFailedSMS" executorServiceRef = "PoolSize"/> -->
                    </otherwise>
                </choice>
            </when>
        </choice>
    </route>
    <route id="RT_RechargeInquiry">
        <from uri="direct:RechargeInquiry" />
        <setHeader name="transID">
            <simple>${header.SourceID}${header.BankRefNo}</simple>
        </setHeader>
        <setHeader name="checksumMsg">
            <simple>U03011~${header.TraceID}~${header.SourceID}~${header.TimeStamp}~${header.UserID}~${header.CustomerID}~${header.transID}~${header.Filler1}~${header.Filler2}~${header.Filler3}</simple>
        </setHeader>
        <!--********* call java bean to generate checksum -->
        <bean ref="billdeskChecksumBean" method="generateChecksum" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh complete URL with checksum generation for BillDesk -->
        <setHeader name="CamelHttpQuery">
            <simple>msg=${header.checksumMsg}~${header.generatedChecksum}</simple>
        </setHeader>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 RECHARGE INQUIRY REQUEST URL {{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RECHARGE INQUIRY REQUEST SENT TO BILLDESK U03011_${header.CamelHttpQuery} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <doTry>
            <to uri="{{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}}?headerFilterStrategy=#fisHeaderFilter" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_24 RECHARGE INQUIRY RESPONSE RECEIVED FROM BILLDESK U03012 ${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <bean ref="billdeskResponseBean" method="convertToJson" />
            <setHeader name="transactionEnquiry">
                <simple>${body}</simple>
            </setHeader>
            <setHeader name="transactionInquiryResponse">
                <simple>${body}</simple>
            </setHeader>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception While calling BillDesk ${exception}"></log>
                <setBody>
                    <simple>{"returnCode":"1","responseMessage":"Error Occured During BillDesk Call"}</simple>
                </setBody>
            </doCatch>
        </doTry>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_25 RESPONSE RECEIVED FROM BILLDESK U03012 JSON_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <!--************ DB insertion for resp in case of transaction enq start -->
        <!-- <choice> <when> <simple>${header.DBFlag} == 'Y'</simple> -->
        <!-- <setHeader name="PaymentRes1"><simple>4</simple></setHeader> -->
        <setHeader name="TransactionQueryReq">
            <simple>{"Insert_Type":"1","Request_Type":"6","ACCTNUM":"${header.AccountNumber}","PCODE":"BILLDESKTransactionEnquiry","MSGTYPE":"0","RESPCODE":"${header.transactionInquiryResCode}","Response_Msg":"${header.transactionInquiryResCode}","TRACE":"${header.BankRefNo}","REFNUM":"${header.cbsTxnReferenceNo}","AMOUNT":"${header.PaymentAmount}","TERMID":"${header.RequestorId}","Ledger_Balance":"${header.availableBalance}","GL_Ledger_Balance":"${header.GlAvailableBalance}","Payment_Status":"${header.transactionInquiryResCode}","X_CORRELATION_ID":"${header.X-Correlation-Id}","IMPSRRN":"${header.TranEnqTransactionID}"}</simple>
        </setHeader>
        <doTry>
            <to pattern="InOnly" uri="activemq:queue:TransactionQueue" />
            <removeHeader name="TransactionQueryReq" />
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception Occured while que insert: ${exception.stacktrace}"></log>
                <removeHeader name="TransactionQueryReq" />
            </doCatch>
        </doTry>
        <!-- </when> </choice> -->
        <!--************ DB insertion for resp in case of transaction enq end -->
    </route>
    <route id="RT_BillDeskReversal">
        <from uri="direct:billdeskReversal" />
        <log message="ESB_DirectDMTOrchestration Reversal Initiated After BillDesk Failure"></log>
        <bean ref="postTransactionRequestBean" method="setReversalSequence"></bean>
        <loop>
            <header>ReversalListSize</header>
            <removeHeaders pattern="Camel*" />
            <bean ref="postTransactionRequestBean" method="getReversalIndex"></bean>
            <log message="ESB_DirectDMTOrchestration Reversal Index is ${header.ReversalIndex}"></log>
            <setBody>
                <simple>${header.txnRequest${header.ReversalIndex}}</simple>
            </setBody>
            <log message="ESB_DirectDMTOrchestration Reversal Request MessageBody ${body}"></log>
            <bean ref="postTransactionRequestBean" method="replaceReversalFlag"></bean>
            <marshal><json/></marshal>
            <log message="ESB_DirectDMTOrchestration Reversal MessageBody ${body}"></log>
            <choice>
                <when>
                    <simple>${header.ReverseFlag} == '1'</simple>
                </when>
                <otherwise>
                    <setHeader name="RevReq">
                        <simple>${body}</simple>
                    </setHeader>
                    <log message="ESB_DirectDMTOrchestration DBINSERT QUERY ${header.DBInsertRequest1}"></log>
                    <setBody>
                        <simple>${header.DBInsertRequest${header[CamelLoopIndex]}}</simple>
                    </setBody>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="createReversalDBRequest"></bean>
                    <marshal><json/></marshal>
                    <convertBodyTo type="java.lang.String"></convertBodyTo>
                    <setHeader name="TransactionQueryReq">
                        <simple>${body}</simple>
                    </setHeader>
                    <setBody>
                        <simple></simple>
                    </setBody>
                    <log message="ESB_DirectDMTOrchestration Reversal Request TO Database Queue ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <removeHeader name="TransactionQueryReq"></removeHeader>
                    <setBody>
                        <simple>${header.RevReq}</simple>
                    </setBody>
                    <removeHeader name="RevReq"></removeHeader>
                    <!-- <log message="Index is ${header[CamelLoopIndex]}"></log> -->
                    <!-- <bean ref="requestProcessor" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 Reversal REQUEST SENT TO CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                   <bean method="rsPostTransaction" ref="requestProcessor"/>
                    <!-- <to uri="cxfrs:bean:rsPostTransaction?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 Reversal RESPONSE RECEIVED FROM CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <setHeader name="txnReversalResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <setHeader name="txnRespCode">
                        <jsonpath>$.returnCode</jsonpath>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="createReversalDBResponse" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue for Transaction Response ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <removeHeader name="TransactionQueryReq"></removeHeader>
                    <!-- Reversal RFU Update -->
                    <choice>
                        <when>
                            <simple>${header.txnRespCode} == '0'</simple>
                            <setBody>
                                <simple>{"referenceNo": "${header.RFURef}","rfuField": "ZRFUN1","rfuValue": "3","reversalFlag": "1"}</simple>
                            </setBody>
                            <removeHeader name="RFURef"></removeHeader>
                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 REQUEST SENT TO CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                            <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                            <!-- <process ref="requestProcessor" /> -->
                            <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                           <bean ref="requestProcessor" method="rsUpdateRFU"/>
                            <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 RESPONSE RECEIVED FROM CBS For Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        </when>
                    </choice>
                </otherwise>
            </choice>
        </loop>
    </route>
    <route id="RT_BillpayInquiry">
        <from uri="direct:BillpayInquiry" />
        <setHeader name="transID">
            <simple>${header.SourceID}${header.BankRefNo}</simple>
        </setHeader>
        <setHeader name="checksumMsg">
            <simple>U05145~${header.TraceID}~${header.SourceID}~${header.TimeStamp}~${header.UserID}~${header.CustomerID}~${header.transID}~${header.ExtensionField1}~${header.ExtensionField2}~${header.ExtensionField3}~${header.OtherInfo1}~${header.OtherInfo2}~${header.OtherInfo3}~${header.Future1}~${header.Future2}</simple>
        </setHeader>
        <!--********* call java bean to generate checksum -->
        <bean ref="billdeskChecksumBean" method="generateChecksum" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh complete URL with checksum generation for BillDesk -->
        <setHeader name="CamelHttpQuery">
            <simple>msg=${header.checksumMsg}~${header.generatedChecksum}</simple>
        </setHeader>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 BILLPAY INQUIRY REQUEST URL {{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 BILLPAY INQUIRY REQUEST SENT TO BILLDESK U05145_${header.CamelHttpQuery} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <doTry>
            <to uri="{{ESB_BillDesk_BillDeskURL_{{currentSetUp}}}}?headerFilterStrategy=#fisHeaderFilter" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 BILLPAY INQUIRY RESPONSE RECEIVED FROM BILLDESK U05146_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
            <bean ref="billdeskResponseBean" method="convertToJson" />
            <setHeader name="transactionInquiryResponse">
                <simple>${body}</simple>
            </setHeader>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception While calling BillDesk ${exception}"></log>
                <setBody>
                    <simple>{"returnCode":"1","responseMessage":"Error Occured During BillDesk Call"}</simple>
                </setBody>
            </doCatch>
        </doTry>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration BILLPAY INQUIRY RESPONSE RECEIVED FROM BILLDESK U05146 JSON_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <!--************ DB insertion for resp in case of enq start -->
        <!-- <choice> <when> <simple>${header.DBFlag} == 'Y'</simple> -->
        <!-- <setHeader name="PaymentRes1"><simple>4</simple></setHeader> -->
        <setHeader name="TransactionQueryReq">
            <simple>{"Insert_Type":"1","Request_Type":"6","ACCTNUM":"${header.AccountNumber}","PCODE":"BILLDESKTransactionEnquiry","MSGTYPE":"2","RESPCODE":"${header.transactionInquiryResCode}","Response_Msg":"${header.transactionInquiryResCode}","TRACE":"${header.BankRefNo}","REFNUM":"${header.cbsTxnReferenceNo}","AMOUNT":"${header.PaymentAmount}","TERMID":"${header.RequestorId}","Ledger_Balance":"${header.availableBalance}","GL_Ledger_Balance":"${header.GlAvailableBalance}","Payment_Status":"${header.transactionInquiryResCode}","X_CORRELATION_ID":"${header.X-Correlation-Id}","IMPSRRN":"${header.TranEnqTransactionID}"}</simple>
        </setHeader>
        <doTry>
            <to pattern="InOnly" uri="activemq:queue:TransactionQueue" />
            <removeHeader name="TransactionQueryReq" />
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="ESB_DirectDMTOrchestration Exception Occured while que insert: ${exception.stacktrace}"></log>
                <removeHeader name="TransactionQueryReq" />
            </doCatch>
        </doTry>
        <!-- </when> </choice> -->
        <!--************ DB insertion for resp in case of enq end -->
    </route>
    <route id="RT_BilldeskStatusUpdate">
        <from uri="direct:billdeskStatusUpdate"/>
        <setBody>
            <simple>{"referenceNo": "${header.ReferenceNoDB}","rfuField": "ZRFUN1","rfuValue": "${header.RFUN1status}"}</simple>
        </setBody>
        <log message="X-Correlation-Id_${header.XCorrelationId} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
        <!-- <process ref="requestProcessor" /> -->
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
       <bean ref="requestProcessor" method="rsUpdateRFU"/>
        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
        <log message="X-Correlation-Id_${header.XCorrelationId} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
    </route>
    <route id="RT_BilldeskRFUT8Update">
        <from uri="direct:billdeskRFUT8Update"/>
        <setBody>
            <simple>{"referenceNo": "${header.ReferenceNoDB}","rfuField": "ZRFUT8","rfuValue": "${header.PaymentIDForRFU}"}</simple>
        </setBody>
        <!-- <process ref="requestProcessor" /> -->
        <log message="X-Correlation-Id_${header.XCorrelationId} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
        <!-- <process ref="requestProcessor" /> -->
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
        <bean ref="requestProcessor" method="rsUpdateRFU"/>
        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
        <log message="X-Correlation-Id_${header.XCorrelationId} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <removeHeader name="PaymentIDForRFU"></removeHeader>
        <!--******** RFU update end -->
    </route>
    <route id="RT42_DMTOrc_DashBoardLogging">
        <from uri="direct:dmtDashBoard"/>
        <removeHeaders pattern="*" excludePattern="X-Correlation-Id|RId|txnType|FRMImpsRequest|HubbleSMSAccountNumber|VendorTemplateId|VendorTemplateFlag"></removeHeaders>
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <log message="X-Correlation-Id_${header.XCorrelationId} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Request Sent To DashBoard Logging Service_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <to uri="{{DashBoard_Logging_URL_{{currentSetUp}}}}?headerFilterStrategy=#finoHeaderFilter&amp;httpClientConfigurerRef=myHttpClientConfigurer&amp;socketTimeout={{DEFAULT_TIMEOUT}}"></to>
        <log message="X-Correlation-Id_${header.XCorrelationId} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Response Received From DashBoard Logging Service_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
    </route>
    <route id="RT_FINOIMPSTransactions_IMPSPostingSMS" streamCache="true">
        <from uri="direct:IMPSPostingSMS" />
        <log message="ESB_DirectDMTOrchestration IMPSPostingStatus ${header.IMPSPostingStatus}"></log>
        <!-- Merchant SMS For IMPS -->
        <doTry>
            <choice>
                <when>
                    <simple>${header.IMPS_appId} == 'FINOMER' || ${header.IMPS_appId} == 'FINOMERNP'</simple>
                    <choice>
                        <when>
                            <simple>${header.transType} == 'DMTIMPSBENV' || ${header.transType} == 'IMPSBENV' || ${header.transType} == 'IMPSBENVC'</simple>
                            <choice>
                                <when>
                                    <simple>${header.IMPSPostingStatus} == 'Success'</simple>
                                    <setBody>
                                        <simple>${header.IMPSResponse}</simple>
                                    </setBody>
                                    <unmarshal><json/></unmarshal>
                                    <setHeader name="IMPSResBeneName">
                                        <simple>${body[BeneName]}</simple>
                                    </setHeader>
                                    <choice>
                                        <when>
                                            <simple>${header.IMPSResBeneName.toUpperCase()} == 'UNREGISTERED' || ${header.IMPSResBeneName.toUpperCase()} == 'NA' || ${header.IMPSResBeneName} == '' </simple>
                                            <log message="No SMS As Invalid Beneficiary Name From IMPS"></log>
                                            <setHeader name="SMSFlag">
                                                <simple>N</simple>
                                            </setHeader>
                                        </when>
                                        <otherwise>
                                            <setBody>
                                                <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MerchantMobileNum}","EventId": "","NotifyParam": {"TemplateId":"415","@Amount":"${header.MerchantAmt}","@SRType":"Bene Verification","@BALamount": "${header.availableBalance}","@MobileNo/EmailID": "${header.MobileNumForSMS}","@Name": "${header.IMPSRemName}"}}</simple>
                                            </setBody>
                                        </otherwise>
                                    </choice>
                                </when>
                                <when>
                                    <simple>${header.IMPSPostingStatus} == 'Awaiting'</simple>
                                    <setBody>
                                        <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MerchantMobileNum}","EventId": "","NotifyParam": {"TemplateId":"415","@Amount":"${header.MerchantAmt}","@SRType":"Bene Verification","@BALamount": "${header.availableBalance}","@MobileNo/EmailID": "${header.MobileNumForSMS}","@Name": "${header.IMPSRemName}"}}</simple>
                                    </setBody>
                                </when>
                                <otherwise>
                                    <setHeader name="SMSFlag">
                                        <simple>N</simple>
                                    </setHeader>
                                </otherwise>
                            </choice>
                        </when>
                        <otherwise>
                            <choice>
                                <when>
                                    <simple>${header.IMPSPostingStatus} == 'Success'</simple>
                                    <setBody>
                                        <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MerchantMobileNum}","EventId": "","NotifyParam": {"TemplateId":"415","@Amount":"${header.MerchantAmt}","@SRType":"IMPS Fund Transfer","@BALamount": "${header.availableBalance}","@MobileNo/EmailID": "${header.MobileNumForSMS}","@Name": "${header.IMPSRemName}"}}</simple>
                                    </setBody>
                                </when>
                                <when>
                                    <simple>${header.IMPSPostingStatus} == 'Awaiting'</simple>
                                    <setBody>
                                        <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MerchantMobileNum}","EventId": "","NotifyParam": {"TemplateId":"415","@Amount":"${header.MerchantAmt}","@SRType":"IMPS Fund Transfer","@BALamount": "${header.availableBalance}","@MobileNo/EmailID": "${header.MobileNumForSMS}","@Name": "${header.IMPSRemName}"}}</simple>
                                    </setBody>
                                </when>
                                <otherwise>
                                    <setHeader name="SMSFlag">
                                        <simple>N</simple>
                                    </setHeader>
                                </otherwise>
                            </choice>
                        </otherwise>
                    </choice>
                    <choice>
                        <when>
                            <simple>${header.SMSFlag} == 'N'</simple>
                        </when>
                        <otherwise>
                            <log message="ESB_DirectDMTOrchestration inside sms for imps" loggingLevel="INFO" logName="com.fino.asynclog" />
                            <setHeader name="Content-Type">
                                <simple>application/json</simple>
                            </setHeader>
                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Request SENT TO SMS Service For IMPS Posting_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                            <!-- <to uri="log:before?showHeaders=true" /> -->
                            <!-- <to uri="restlet:{{ESB_SMSService_FINO_URL_{{currentSetUp}}}}?restletMethod=POST" /> -->
                            <setHeader name="CamelHttpMethod">
                                <constant>POST</constant>
                            </setHeader>
                            <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
                        </otherwise>
                    </choice>
                </when>
            </choice>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED IMPS MERCHANT SMS_${exception.stacktrace}" loggingLevel="INFO" />
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED IMPS MERCHANT SMS_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
            </doCatch>
        </doTry>
        <choice>
            <when>
                <simple>${header.IMPS_appId} == 'MB'</simple>
                <log message="Inside Mobile Banking SMS route"/>
                <choice>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Awaiting'</simple>
                        <setBody>
                            <simple>{"MethodId":"3","TellerID":"${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam":{},"NotifyParam":{"TemplateId":"249", "@TranID":"${header.TranRefNo}"}} </simple>
                        </setBody>
                    </when>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Fail'</simple>
                        <setBody>
                            <simple>{"MethodId":"3","TellerID":"${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam":{},"NotifyParam":{"TemplateId":"329", "@TranAmt":"${header.DBAmt}", "@AcctNo": "${header.IMPSBeneAccNo}","@TransID":"${header.TranRefNo}"}} </simple>
                        </setBody>
                    </when>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Success'</simple>
                        <setBody>
                            <simple>{ "MethodId":"3","TellerID":"${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam":{},"NotifyParam":{"TemplateId":"320","@TranAmt":"${header.DBAmt}", "@AcctNo": "${header.IMPSBeneAccNo}","@INR":"${header.DBAmt}","@Date":"${header.effectiveDate}","@TransID":"${header.TranRefNo}","@CustID":"${header.custid}"}} </simple>
                        </setBody>
                    </when>
                    <otherwise>
                        <log message="ESB_DirectDMTOrchestration Improper Txn Status Received ${header.ImpsTxnStatus}"></log>
                        <setHeader name="SMSFlag">
                            <simple>N</simple>
                        </setHeader>
                    </otherwise>
                </choice>
            </when>
            <!-- IBR Channel Message Settings changed by manendra singh on date 20171211 -->
            <when>
                <simple>${header.IMPS_appId} == 'IBR'</simple>
                <log message="Inside Internet Banking SMS route"/>
                <setHeader name="IBRSMSDate">
                    <simple>${date:now:dd-MM-yyyy}</simple>
                </setHeader>
                <setHeader name="IBRSMSTime">
                    <simple>${date:now:HH:mm:ss}</simple>
                </setHeader>
                <choice>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Awaiting'</simple>
                        <setBody>
                            <simple>{"MethodId":"3","TellerID":"${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam":{},"NotifyParam":{"TemplateId":"249", "@TranID":"${header.TranRefNo}"}} </simple>
                        </setBody>
                    </when>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Fail'</simple>
                        <setBody>
                            <simple>{"MethodId":"3","TellerID":"${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam":{},"NotifyParam":{"TemplateId":"503", "@TranAmt":"${header.DBAmt}", "@AcctNo": "${header.IMPSBeneAccNo}","@TransID":"${header.TranRefNo}"}} </simple>
                        </setBody>
                    </when>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Success'</simple>
                        <setBody>
                            <simple>{ "MethodId":"3","TellerID":"${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam":{},"NotifyParam":{"TemplateId":"2986","@Amount":"${header.DBAmt}", "@AccountNo": "${header.AccountNumber}","@INR":"${header.DBAmt}","@Date":"${header.IBRSMSDate}","@Time":"${header.IBRSMSTime}","@Benename":"${header.IMPSBeneName}"}} </simple>
                        </setBody>
                    </when>
                    <otherwise>
                        <log message="ESB_DMTOrchestration Improper Txn Status Received ${header.ImpsTxnStatus}"></log>
                        <setHeader name="SMSFlag">
                            <simple>N</simple>
                        </setHeader>
                    </otherwise>
                </choice>
            </when>
            <when>
                <simple>${header.transType} == 'DMTIMPSBENV' || ${header.transType} == 'IMPSBENVC'</simple>
                <choice>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Success'</simple>
                        <setBody>
                            <simple>${header.IMPSResponse}</simple>
                        </setBody>
                        <unmarshal><json/></unmarshal>
                        <setHeader name="IMPSResBeneName">
                            <simple>${body[BeneName]}</simple>
                        </setHeader>
                        <choice>
                            <when>
                                <simple>${header.IMPSResBeneName.toUpperCase()} == 'UNREGISTERED' || ${header.IMPSResBeneName.toUpperCase()} == 'NA' || ${header.IMPSResBeneName} == '' </simple>
                                <log message="No SMS As Invalid Beneficiary Name From IMPS"></log>
                                <setHeader name="SMSFlag">
                                    <simple>N</simple>
                                </setHeader>
                            </when>
                            <otherwise>
                                <setBody>
                                    <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId":"397","@CaseDecision":"Successful","@Benename":"${header.IMPSResBeneName}"}}</simple>
                                </setBody>
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Fail'</simple>
                        <setBody>
                            <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId":"398","@CaseDecision":"${header.IMPSPostingStatus}"}}</simple>
                        </setBody>
                    </when>
                    <otherwise>
                        <setHeader name="SMSFlag">
                            <simple>N</simple>
                        </setHeader>
                    </otherwise>
                </choice>
            </when>
            <when>
                <simple>${header.SplitTranType} == 'DMT'</simple>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration TestLog IMPSPostingStatus DMT IMPS Status -- ${header.IMPSPostingStatus}"></log>
                <setHeader name="SMSFlag">
                    <simple></simple>
                </setHeader>
                <when>
                    <simple>${header.IMPSPostingStatus} == 'Success'</simple>
                    <setBody>
                        <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId":"386","@Amount":"${header.DBAmt}","@TranID":"${header.TranRefNo}","@CaseDecision":"${header.IMPSPostingStatus}"}}</simple>
                    </setBody>
                </when>
                <when>
                    <simple>${header.IMPSPostingStatus} == 'Fail'</simple>
                    <setBody>
                        <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId":"4063","@Amount":"${header.DBAmt}","@TranID":"${header.TranRefNo}","@CaseDecision":"${header.IMPSPostingStatus}"}}</simple>
                    </setBody>
                </when>
            </when>
            <otherwise>
                <choice>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Awaiting'</simple>
                        
                        <setBody>
                            <simple>{"MethodId":"3","TellerID":"155","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam":{},"NotifyParam":{"TemplateId":"249", "@TranID":"${header.TranRefNo}"}} </simple>
                        </setBody>
                    </when>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Fail'</simple>
                        <choice>
                            <when>
                                <simple>${header.transType} == 'IMPSBENV' || ${header.transType} == 'IMPSBENVC' || ${header.transType} == 'DMTIMPSBENV' || ${header.transType} == 'BENVFTOBC'</simple>
                                
                                <setBody>
                                    <simple> {"MethodId": "3","TellerID": "155","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam": {"RequestId": "","OtpPin": ""},"NotifyParam": {"TemplateId":"526"}} </simple>
                                </setBody>
                            </when>
                            <otherwise>
                                <setBody>
                                    <simple> {"MethodId": "3","TellerID": "155","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam": {"RequestId": "","OtpPin": ""},"NotifyParam": {"TemplateId":"352","@INR":"${header.DBAmt}","@TranID":"${header.TranRefNo}"}} </simple>
                                </setBody>
                            </otherwise>
                        </choice>
                    </when>
                    <when>
                        <simple>${header.IMPSPostingStatus} == 'Success'</simple>
                        <choice>
                            <when>
                                <simple>${header.transType} == 'IMPSBENV' || ${header.transType} == 'IMPSBENVC' || ${header.transType} == 'DMTIMPSBENV' || ${header.transType} == 'BENVFTOBC'</simple>
                                <setBody>
                                    <simple>${header.IMPSResponse}</simple>
                                </setBody>
                                <unmarshal><json/></unmarshal>
                                <setHeader name="IMPSResBeneName">
                                    <simple>${body[BeneName]}</simple>
                                </setHeader>
                                <choice>
                                    <when>
                                        <simple>${header.IMPSResBeneName.toUpperCase()} == 'UNREGISTERED' || ${header.IMPSResBeneName.toUpperCase()} == 'NA' || ${header.IMPSResBeneName} == '' </simple>
                                        <log message="No SMS As Invalid Beneficiary Name From IMPS"></log>
                                        <setHeader name="SMSFlag">
                                            <simple>N</simple>
                                        </setHeader>
                                    </when>
                                    <otherwise>
                                        <setBody>
                                            <simple> {"MethodId": "3","TellerID": "155","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","VerifyParam": {"RequestId": "","OtpPin": ""},"NotifyParam": {"TemplateId":"525","@INR":"${header.DBAmt}","@TranID":"${header.TranRefNo}","@Benename":"${header.IMPSResBeneName}"}} </simple>
                                        </setBody>
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise>
                                <!-- Changes For CASA SMS -->
                                <setBody>
                                    <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId": "462","@INR": "${header.DBAmt}","@AccountNo": "${header.AccountNumber}","@Date": "${date:now:dd-MMM-yyyy}","@Time": "${date:now:HH:mm:ss a}","@TranID": "${header.TranRefNo}","@Benename": "${header.SMSBeneName}","@BenefiAccountNo":"${header.IMPSBeneAccNo}","@ChequeNo":"${header.IMPSBeneIFSC}","@TotalINR":"${header.CustBalance}"}}</simple>
                                </setBody>
                            </otherwise>
                        </choice>
                    </when>
                    <otherwise>
                        <log message="ESB_DirectDMTOrchestration Improper Txn Status Received ${header.ImpsTxnStatus}"></log>
                        <setHeader name="SMSFlag">
                            <simple>N</simple>
                        </setHeader>
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration ESB_DirectDMTOrchestration IMPSPosting SMS Body ${body} ____ ${header.SMSFlag}"></log>
        <choice>
            <when>
                <simple>${header.SMSFlag} == 'N'</simple>
            </when>
            <otherwise>
                <log message="ESB_DirectDMTOrchestration inside sms for imps" loggingLevel="INFO" logName="com.fino.asynclog" />
                <setHeader name="Content-Type">
                    <simple>application/json</simple>
                </setHeader>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Request SENT TO SMS Service For IMPS Posting_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <!-- <to uri="log:before?showHeaders=true" /> -->
                <!-- <to uri="restlet:{{ESB_SMSService_FINO_URL_{{currentSetUp}}}}?restletMethod=POST" /> -->
                <setHeader name="CamelHttpMethod">
                    <constant>POST</constant>
                </setHeader>
                <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
            </otherwise>
        </choice>
    </route>
    <route id="RT41_DMTOrchestration_ReInitiateTxn" streamCache="true">
        <from uri="direct:reInitiateTxn"/>
        <setBody>
            <simple>${header.txnRequest0}</simple>
        </setBody>
        <marshal><json/></marshal>
        <setHeader name="CashtxnRequest">
            <simple>${body}</simple>
        </setHeader>
        <setBody>
            <simple>{"txnDetails":${header.CashtxnRequest},"impsPostingDetails":${header.impsRequest}}</simple>
        </setBody>
        <log message="ESB_DirectDMTOrchestration Reinitiate Body for Txn:-${body}"></log>
        <log message="IMPS_appId ${header.IMPS_appId}"></log>
        <log message="ESB_DirectDMTOrchestration Check for AcctCode 30 STEP FOR Reinitiate:-${header.impsReturnCode}"/>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_39 REQUEST SENT TO ACTIVEMQ_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <doTry>
            <to pattern="InOnly" uri="activemq:queue:RefireIMPSTxnQueue" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_40 RESPONSE RECEIVED FROM ACTIVEMQ_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_39 Exception Occurred_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <setHeader name="MQSendFlag">
                    <simple>1</simple>
                </setHeader>
            </doCatch>
        </doTry>
    </route>
    <route id="RT10_PostToNPCI">
        <from uri="direct:PostToNPCI" />
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration PostToNPCI Initiated"></log>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 appId ${header.reqAppId}"></log>
        <setHeader name="effectiveDate">
            <simple>${date:now:yyyy-MM-dd}</simple>
        </setHeader>
        <loop>
            <header>impsListSize</header>
            <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <setHeader name="Content-Type">
                <constant>application/json</constant>
            </setHeader>
            <setHeader name="CurrIMPSRequest">
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setHeader>
            <setBody>
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setBody>
            <!-- <setHeader name="SplitSeq">
                <simple>${header.DBInsertSplitSeq${header[CamelLoopIndex]}}</simple>
            </setHeader> -->
            <setHeader name="SplitSeq">
                <simple>${headers['DBInsertSplitSeq' + ${headers.CamelLoopIndex}] ?: 'Not Found'}</simple>
            </setHeader> 
            <setHeader name="RetryCount">
                <simple>{{ESB_IMPS_RetryCount}}</simple>
            </setHeader>
            <setHeader name="IMPSReqType">
                <simple>NPCIPosting</simple>
            </setHeader>
            <marshal><json/></marshal>
            <!-- IMPS Database Insert -->
            <unmarshal><json/></unmarshal>
            <bean ref="databaseBean" method="setIMPSDBRequestJSON" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_17 Request TO Database Queue For Transaction Request MCC Code ${header.TransactionQueryReq}"></log>
            <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
            <choice>
                <when>
                    <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                    <setBody>
                        <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"1","Response_Flag":"0","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","RequestOut": null,"Response_Message": "","Status_Code": "","Service_ID": "5"}</simple>
                    </setBody>
                    <wireTap uri="direct:dmtDashBoard"/>
                    <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                </when>
            </choice>
            <setBody>
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setBody>
            <marshal><json/></marshal>
            <convertBodyTo type="java.lang.String"></convertBodyTo>
            <setHeader name="impsRequest">
                <simple>${body}</simple>
            </setHeader>
            <doTry>
                <setHeader name="TranRefNo">
                    <jsonpath>$.PaymentRef</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.io.IOException</exception>
                    <setHeader name="TranRefNo">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <wireTap uri="direct:RFUUpdateForNPCI"/>
            <!--update internal imps -->
            <!-- <doTry> <setHeader name="effectiveDate"> <simple>${date:now:yyyy-MM-dd}</simple> </setHeader> <setBody> <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"I","npciResponseCode":"int"}</simple> </setBody> <log message="Body before UpdateTransaction_${body}" /> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Request Sent To IMPSUpdate for internal_${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> <setHeader name="body"> <simple>${body}</simple> </setHeader> <process ref="requestProcessor" /> <log message="Body1 After UpdateTransaction_${body}" /> <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> <log message="Body After UpdateTransaction_${body}" /> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Response Body after IMPSUpdate for internal_${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> <doCatch> <exception>java.lang.Exception</exception> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception While Update Internal IMPS Status_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" /> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception While Update Internal IMPS Status ${exception.stacktrace}"></log> </doCatch> </doTry> -->
            <!-- DMT Init SMS -->
            <choice>
                <when>
                    <simple>${header.transType} == 'DMTIMPSBENV' || ${header.transType} == 'IMPSBENVC' || ${header.transType} == 'IMPSBENV' || ${header.transType} == 'BENVFTOBC'</simple>
                </when>
                <when>
                    <simple>${header.VendorTemplateFlag} == '1' </simple>
                    <doTry>
                        <setBody>
                            <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId": "${header.VendorTemplateId}","@AccountNo":"${header.HubbleSMSAccountNumber}","@Amount":"${header.IMPSTxnAmount}","@Date": "${date:now:dd-MM-yyyy}","@Time": "${date:now:HH:mm:ss}","@TransactionID":"${header.refNo}","@Benename":"${header.IMPSBeneName}"}}</simple>
                        </setBody>
                        <setHeader name="Content-Type">
                            <simple>application/json</simple>
                        </setHeader>
                        <setHeader name="Content-Type">
                            <simple>application/json</simple>
                        </setHeader>
                        <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                        </doCatch>
                    </doTry>
                </when>
                <otherwise>
                <choice>
							<when>
								<simple></simple>
							</when>
							<otherwise>
								<choice>
									<when>
										<simple>${header.IMPS_appId} == 'IBR'</simple>
										<log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Initiation SMS Not sent inCase of IBR "></log>
									</when>
									<otherwise>
                    <doTry>
                        <setBody>
                            <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MobileNumForSMS}","EventId": "","NotifyParam": {"TemplateId": "2603","@Amount": "${header.IMPSTxnAmount}","@Benename": "${header.IMPSBeneName}","@AccountNo":"${header.IMPSBeneAccNo}"}}</simple>
                        </setBody>
                        <setHeader name="Content-Type">
                            <simple>application/json</simple>
                        </setHeader>
                        <setHeader name="Content-Type">
                            <simple>application/json</simple>
                        </setHeader>
                        <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                        </doCatch>
                    </doTry>
                </otherwise>
            </choice>
            </otherwise>
		</choice>
        </otherwise>
				</choice>
            <!-- DMT Init SMS End -->
            <setBody>
                <simple>${header.impsRequest}</simple>
            </setBody>
            <unmarshal><json/></unmarshal>
            <bean ref="splitTransactionBean" method="addXAuthToken"></bean>
            <marshal><json/></marshal>
            <setHeader name="Content-Type">
                <simple>application/json</simple>
            </setHeader>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 REQUEST SENT TO IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Before REQUEST Body SENT TO IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <doTry>
                <!-- <to uri="log:before?showHeaders=true" /> -->
                <log message="NPCIRemAccountNumber ${header.NPCIRemAccountNumber}"></log>
                <log message="ESB_DirectDMTOrchestration Calling URL {{ESB_IMPSTransactionWithNPCI_Txn_URL_http4}}"></log>
                <!-- <to uri="{{ESB_IMPSTransactionWithNPCI_Txn_URL}}?httpClientConfigurerRef=myHttpClientConfigurer&amp;headerFilterStrategy=#fisHeaderFilter&amp;httpClient.soTimeout={{ESB_IMPSTransactionWithNPCI_Timeout}}" /> -->
                <to uri="{{ESB_IMPSTransactionWithNPCI_Txn_URL_http4}}?headerFilterStrategy=#fisHeaderFilter&amp;socketTimeout={{ESB_IMPSTransactionWithISO_Timeout}}&amp;connectTimeout={{ESB_IMPSTransactionWithISO_Timeout}}" />
                <!-- <log message="Called URL"></log> -->
                <!-- <log message="IMPS Response ${body}" /> -->
                <convertBodyTo type="java.lang.String" />
                <!-- Testing -->
                <!-- <setBody> <simple>{"ActCode": "0","BankRRN": "407311181042","BeneAccNo": "123456041","BeneIFSC": "ICIC0000001","BeneName": "kiran","Response": "0","TranRefNo": "407311181042","TxnAmount": "1.00"}</simple> </setBody> -->
                <setHeader name="IMPSResponse">
                    <simple>${body}</simple>
                </setHeader>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 RESPONSE RECEIVED FROM IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <unmarshal><json/></unmarshal>
                <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                <choice>
                    <when>
                        <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                        <setBody>
                            <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "${header.DBtxnRespCode}","Service_ID": "5"}</simple>
                        </setBody>
                        <wireTap uri="direct:dmtDashBoard" />
                        <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                    </when>
                </choice>
                <setBody>
                    <simple>${header.IMPSResponse}</simple>
                </setBody>
                <setHeader name="impsReturnCode">
                    <jsonpath>$.ActCode</jsonpath>
                </setHeader>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 Before checkIfReversalRequiredNPCI" loggingLevel="INFO" logName="com.fino.asynclog" />
                <bean ref="impsPostingRequestBean" method="checkIfReversalRequiredNPCI"></bean>
                <!-- <log message="impsReturnCode:::${header.impsReturnCode}"></log> -->
                <log message="ESB_DirectDMTOrchestration STATUS IS:: ${header.impsReturnCode} and ${header.IMPSAwaitingFlag}"></log>
                <choice>
                    <when>
                        <simple>${header.impsReturnCode} == '0'</simple>
                    </when>
                    <when>
                        <!-- <simple>${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 18 or ${header.impsReturnCode} == 19 or ${header.impsReturnCode} == 21 or ${header.impsReturnCode} == 9999 or ${header.impsReturnCode} == 30 or ${header.impsReturnCode} == 31 or ${header.impsReturnCode} == 101 or ${header.impsReturnCode} == 421 or ${header.impsReturnCode} == 420</simple> -->
                        <!-- <simple>${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 30 </simple> -->
                        <!-- IMPSAwaitingFlag 0 denotes pending case -->
                        <simple>${header.IMPSAwaitingFlag} == '0' </simple>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="impsRespCode">
                            <simple>0</simple>
                        </setHeader>
                        <choice>
                            <when>
                                <simple>${header.impsReturnCode} == '91'</simple>
                                <setHeader name="IMPSPostTimeOut">
                                    <simple>Y</simple>
                                </setHeader>
                                <setHeader name="IMPSPostingStatus">
                                    <simple>Awaiting</simple>
                                </setHeader>
                            </when>
                            <otherwise>
                                <!-- SMS For Awaiting -->
                                <setHeader name="IMPSPostingStatus">
                                    <simple>Awaiting</simple>
                                </setHeader>
                                <wireTap uri="direct:IMPSPostingSMS" />
                                 <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                                <!-- SMS For Awaiting Ends -->
                            </otherwise>
                        </choice>
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                        <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 RESPONSE RECEIVED FROM CBS For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    </when>
                    <when>
                        <simple>${header.impsReturnCode} == '91'</simple>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="impsRespCode">
                            <simple>0</simple>
                        </setHeader>
                        <choice>
                            <when>
                                <simple>${header.impsReturnCode} == '91'</simple>
                                <setHeader name="IMPSPostTimeOut">
                                    <simple>Y</simple>
                                </setHeader>
                                <setHeader name="IMPSPostingStatus">
                                    <simple>Awaiting</simple>
                                </setHeader>
                            </when>
                            <otherwise>
                                <!-- SMS For Awaiting -->
                                <setHeader name="IMPSPostingStatus">
                                    <simple>Awaiting</simple>
                                </setHeader>
                                <wireTap uri="direct:IMPSPostingSMS" />
                                <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                                <!-- SMS For Awaiting Ends -->
                            </otherwise>
                        </choice>
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                       <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_24 RESPONSE RECEIVED FROM CBS For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    </when>
                </choice>
                <choice>
                    <when>
                        <simple>${header.impsReturnCode} == '0'</simple>
                        <setBody>
                            <simple>${header.IMPSResponse}</simple>
                        </setBody>
                        <setHeader name="impsRespCode">
                            <simple>0</simple>
                        </setHeader>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="BankRRN">
                            <jsonpath>$.BankRRN</jsonpath>
                        </setHeader>
                        <setHeader name="TranRefNo">
                            <jsonpath>$.TranRefNo</jsonpath>
                        </setHeader>
                        <!--update IMPS status -->
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_25 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                        <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_26 RESPONSE RECEIVED FROM CBS For Update IMPS _${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_27 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                         <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_28 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update Ends -->
                        <!-- SMS For Success -->
                        <setHeader name="IMPSPostingStatus">
                            <simple>Success</simple>
                        </setHeader>
                        <wireTap uri="direct:IMPSPostingSMS" />
                        <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                        <!-- SMS For Success Ends -->
                        <when>
                            <simple>${header.reqAppId} == 'MB' || ${header.reqAppId} == 'FINOMB' || ${header.reqAppId} == 'FINOTLR'</simple>

                            <choice>
                                <when>
                                    <simple>${header.transType} == 'IMPSFTP2A' </simple>

                                    <to uri="seda:InsertRouteLimits?waitForTaskToComplete=Never" />
                                </when>
                            </choice>
                        </when>
                    </when>
                    <when>
                        <!-- <simple>${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 18 or ${header.impsReturnCode} == 19 or ${header.impsReturnCode} == 21 or ${header.impsReturnCode} == 9999 or ${header.impsReturnCode} == 30 or ${header.impsReturnCode} == 31 or ${header.impsReturnCode} == 101 or ${header.impsReturnCode} == 421 or ${header.impsReturnCode} == 420</simple> -->
                        <!-- <simple> ${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 30 </simple> -->
                        <simple>${header.IMPSAwaitingFlag} == '0' </simple>
                        <!--RFU Update -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_29 INSIDE IMPSAwaitingFlag ${header.impsRespCode}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_30 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                         <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_31 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update Ends -->
                    </when>
                    <otherwise>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="impsRespCode">
                            <simple>1</simple>
                        </setHeader>
                        <log message="ESB_DirectDMTOrchestration transref:::${header.TranRefNo}"></log>
                        <!--update IMPS status -->
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_32 INSIDE NPCI OTHERWISE ${header.impsRespCode}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_33 REQUEST SENT TO CBS For Update IMPS for fail_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                       <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_34 RESPONSE RECEIVED FROM CBS For Update IMPS for fail_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_35 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_36 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update For Failure Reason -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "${header.IMPSRFUT6}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_37 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                      <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_38 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update For Failure Reason -->
                        <!-- SMS For Failure -->
                        <setHeader name="IMPSPostingStatus">
                            <simple>Fail</simple>
                        </setHeader>
                        <wireTap uri="direct:IMPSPostingSMS" />
                         <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                        <!-- SMS For Failure Ends -->
                        <when>
                            <simple>${header.reqAppId} == 'MB' || ${header.reqAppId} == 'FINOMB' || ${header.reqAppId} == 'FINOTLR'</simple>

                            <choice>
                                <when>
                                    <simple>${header.transType} == 'IMPSFTP2A' </simple>

                                    <to uri="seda:InsertRouteLimits?waitForTaskToComplete=Never" />
                                </when>
                            </choice>
                        </when>
                    </otherwise>
                </choice>
                <doCatch>
                    <exception>java.net.SocketTimeoutException</exception>
                    <setHeader name="IMPSPostTimeOut">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSAwaitingFlag">
                        <simple>0</simple>
                    </setHeader>
                    <setHeader name="impsReturnCode">
                        <simple>999</simple>
                    </setHeader>
                    <setHeader name="IMPSTxnCheckFlag">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSPostingStatus">
                        <simple>Awaiting</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE TIMEOUT FROM IMPS" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_19 Exception ${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception Stack ${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update -->
                    <setBody>
                        <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"P","npciResponseCode":"pend"}</simple>
                    </setBody>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_20 Request Sent To IMPSUpdate for Timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- <process ref="requestProcessor" /> -->
                   <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                    <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_21 Response Body after IMPSUpdate for timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update Ends -->
                    <!--RFU Update -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update Ends -->
                    <!-- TimeOut Entry In Database -->
                    <setBody>
                        <simple>{"ActCode": "999","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "Response TimeOut","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                    </setBody>
                    <setHeader name="IMPSResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <!-- TimeOut Entry In Database Ends -->
                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "1","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                </doCatch>
                <doCatch>
                    <exception>java.net.ConnectException</exception>
                    <setHeader name="IMPSPostTimeOut">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSAwaitingFlag">
                        <simple>0</simple>
                    </setHeader>
                    <setHeader name="impsReturnCode">
                        <simple>999</simple>
                    </setHeader>
                    <setHeader name="IMPSTxnCheckFlag">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSPostingStatus">
                        <simple>Awaiting</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE TIMEOUT FROM IMPS" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_19 Exception ${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception Stack ${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update -->
                    <setBody>
                        <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"P","npciResponseCode":"pend"}</simple>
                    </setBody>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_20 Request Sent To IMPSUpdate for Timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- <process ref="requestProcessor" /> -->
                   <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                    <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_21 Response Body after IMPSUpdate for timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update Ends -->
                    <!--RFU Update -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update Ends -->
                    <!-- TimeOut Entry In Database -->
                    <setBody>
                        <simple>{"ActCode": "999","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "Response TimeOut","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                    </setBody>
                    <setHeader name="IMPSResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <!-- TimeOut Entry In Database Ends -->
                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "1","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                </doCatch>
                <doCatch>
                    <exception>java.net.NoRouteToHostException</exception>
                    <setHeader name="IMPSPostTimeOut">
                        <simple>N</simple>
                    </setHeader>
                    <setHeader name="impsReturnCode">
                        <simple>1</simple>
                    </setHeader>
                    <setHeader name="IMPSPostingStatus">
                        <simple>Fail</simple>
                    </setHeader>
                    <setHeader name="IMPSAwaitingFlag">
                        <simple>1</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration UNABLE TO CONNECT TO IMPS" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_19 Exception ${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception Stack ${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update -->
                    <setBody>
                        <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"R","npciResponseCode":"fail"}</simple>
                    </setBody>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_20 Request Sent To IMPSUpdate for Timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- <process ref="requestProcessor" /> -->
                   <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                    <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_21 Response Body after IMPSUpdate for timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update Ends -->
                    <!--RFU Update -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update Ends -->
                    <!--RFU Update For Failure Reason -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "9998,${exception.message}"}</simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_24 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_25 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update For Failure Reason -->
                    <!-- TimeOut Entry In Database -->
                    <setBody>
                        <simple>{"ActCode": "998","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "${exception}","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                    </setBody>
                    <setHeader name="IMPSResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <!-- TimeOut Entry In Database Ends -->
                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "1","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                </doCatch>
            </doTry>
            <choice>
                <when>
                    <simple>${header.IMPSPostTimeOut} == 'Y'</simple>
                    <doTry>
                        <loop>
                            <header>RetryCount</header>
                            <log message="ESB_DirectDMTOrchestration Loop Executing : ${header[CamelLoopIndex]}"></log>
                            <log message="ESB_DirectDMTOrchestration Initiating Retry.....${header[CamelLoopIndex]}"></log>
                            <setHeader name="IMPSReqType">
                                <simple>NPCIInquiry</simple>
                            </setHeader>
                            <setBody>
                                <simple>${header.CurrIMPSRequest}</simple>
                            </setBody>
                            <marshal><json/></marshal>
                            <doTry>
                                <unmarshal><json/></unmarshal>
                                <bean ref="databaseBean" method="setIMPSDBRequestJSON" />
                                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                <doCatch>
                                    <exception>java.lang.Exception</exception>
                                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request Exception ${exception}"></log>
                                </doCatch>
                                <doFinally>
                                    <setBody>
                                        <simple>${header.CurrIMPSRequest}</simple>
                                    </setBody>
                                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_26 CurrIMPSRequest body ${body} | currIMPSReq: ${header.CurrIMPSRequest}"/>
                                    <marshal><json/></marshal>
                                    <unmarshal><json/></unmarshal>
                                    <bean ref="splitTransactionBean" method="addXAuthToken"></bean>
                                    <marshal><json/></marshal>
                                </doFinally>
                            </doTry>
                            <!-- <removeHeaders pattern="*"></removeHeaders> -->
                            <removeHeader name="CamelHttpResponseCode" />
                            <removeHeader name="CamelRestletResponse" />
                            <removeHeaders pattern="org.restlet.*"></removeHeaders>
                            <removeHeader name="RespCode" />
                            <setHeader name="CamelHttpMethod">
                                <constant>POST</constant>
                            </setHeader>
                            <setHeader name="Content-Type">
                                <constant>application/json</constant>
                            </setHeader>
                            <doTry>
                                <log message="ESB_DirectDMTOrchestration Calling URL {{ESB_IMPSTransactionWithNPCI_Inquiry_URL_http4}}"></log>
                                <!-- <to uri="{{ESB_IMPSTransactionWithNPCI_Inquiry_URL}}?httpClientConfigurerRef=myHttpClientConfigurer&amp;headerFilterStrategy=#fisHeaderFilter&amp;httpClient.soTimeout={{ESB_IMPSTransactionWithNPCI_Timeout}}" /> -->
                                <to uri="{{ESB_IMPSTransactionWithNPCI_Inquiry_URL_http4}}?headerFilterStrategy=#fisHeaderFilter&amp;socketTimeout={{ESB_IMPSTransactionWithISO_Timeout}}&amp;connectTimeout={{ESB_IMPSTransactionWithISO_Timeout}}" />
                                <!-- <log message="Response Body ${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> -->
                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_27 RESPONSE RECEIVED FROM IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                <convertBodyTo type="java.lang.String" />
                                <setHeader name="IMPSResponse">
                                    <simple>${body}</simple>
                                </setHeader>
                                <setHeader name="impsReturnCode">
                                    <jsonpath>$.ActCode</jsonpath>
                                </setHeader>
                                <unmarshal><json/></unmarshal>
                                <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                <convertBodyTo type="java.lang.String" />
                                <setBody>
                                    <simple>${header.IMPSResponse}</simple>
                                </setBody>
                                <choice>
                                    <when>
                                        <simple>${header.impsReturnCode} == '0'</simple>
                                        <setHeader name="impsRespCode">
                                            <simple>0</simple>
                                        </setHeader>
                                    </when>
                                    <otherwise>
                                        <setHeader name="impsRespCode">
                                            <simple>1</simple>
                                        </setHeader>
                                    </otherwise>
                                </choice>
                                <choice>
                                    <when>
                                        <simple>${header.impsReturnCode} == '91'</simple>
                                        <log message="ESB_DirectDMTOrchestration Resp 11 received"></log>
                                        <log message="ESB_DirectDMTOrchestration Delaying Retry....."></log>
                                        <setHeader name="IMPSPostingStatus">
                                            <simple>Awaiting</simple>
                                        </setHeader>
                                    </when>
                                    <!--<when> <simple>${header.impsReturnCode} == 17</simple> <log message="ESB_DirectDMTOrchestration Reinitiate Transation For Code 17"/> <choice> <when> <simple>${header.ReInitFlag} == 'Y'</simple> </when> <otherwise> <setHeader name="ReInitFlag"> <simple>Y</simple> </setHeader> <setHeader name="RefireCount"> <simple>1</simple> </setHeader> <to uri="direct:reInitiateTxn"/> <throwException ref="loopBreak"></throwException> </otherwise> </choice> <log message="ESB_DirectDMTOrchestration Before Delay"></log> <delay> <constant>{{ESB_IMPS_Timeout}}</constant> </delay> <log message="ESB_DirectDMTOrchestration After Delay"></log> </when>-->
                                    <otherwise>
                                        <!-- set Awaiting Flag for Inquiry -->
                                        <bean ref="impsPostingRequestBean" method="checkIfReversalRequiredNPCI"></bean>
                                        <choice>
                                            <when>
                                                <simple>${header.IMPSAwaitingFlag} == '0'</simple>
                                                <setHeader name="IMPSPostingStatus">
                                                    <simple>Awaiting</simple>
                                                </setHeader>
                                            </when>
                                            <when>
                                                <simple>${header.IMPSAwaitingFlag} == '1'</simple>
                                                <choice>
                                                    <when>
                                                        <simple>${header.impsReturnCode} == '0'</simple>
                                                        <setHeader name="IMPSPostingStatus">
                                                            <simple>Success</simple>
                                                        </setHeader>
                                                    </when>
                                                    <otherwise>
                                                        <setHeader name="IMPSPostingStatus">
                                                            <simple>Fail</simple>
                                                        </setHeader>
                                                    </otherwise>
                                                </choice>
                                            </when>
                                        </choice>
                                        <!--update IMPS status -->
                                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                                        <setBody>
                                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                                        </setBody>
                                        <!-- <process ref="requestProcessor" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_28 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                        <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_29 RESPONSE RECEIVED FROM CBS For Update IMPS _${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!--RFU Update -->
                                        <setBody>
                                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField":"ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                                        </setBody>
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_30 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                         <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_31 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <choice>
                                            <when>
                                                <simple>${header.updateIMPSTxnStatus} == 'R'</simple>
                                                <!--RFU Update For Failure Reason -->
                                                <setBody>
                                                    <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "${header.IMPSRFUT6}"}</simple>
                                                </setBody>
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_32 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                                <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                                <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_33 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <!--RFU Update For Failure Reason -->
                                            </when>
                                        </choice>
                                        <setBody>
                                            <simple>${header.IMPSResponse}</simple>
                                        </setBody>
                                        <throwException ref="loopBreak"></throwException>
                                    </otherwise>
                                </choice>
                                <doCatch>
                                    <exception>java.net.SocketTimeoutException</exception>
                                    <log message="ESB_DirectDMTOrchestration Exception ${exception}"></log>
                                    <!-- TimeOut Entry In Database -->
                                    <setBody>
                                        <simple>{"ActCode": "999","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "Response TimeOut","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                                    </setBody>
                                    <setHeader name="IMPSResponse">
                                        <simple>${body}</simple>
                                    </setHeader>
                                    <unmarshal><json/></unmarshal>
                                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                    <!-- TimeOut Entry In Database Ends -->
                                </doCatch>
                                <doCatch>
                                    <exception>java.net.ConnectException</exception>
                                    <log message="ESB_DirectDMTOrchestration Exception ${exception}"></log>
                                    <!-- TimeOut Entry In Database -->
                                    <setBody>
                                        <simple>{"ActCode": "999","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "Response TimeOut","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                                    </setBody>
                                    <setHeader name="IMPSResponse">
                                        <simple>${body}</simple>
                                    </setHeader>
                                    <unmarshal><json/></unmarshal>
                                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                    <!-- TimeOut Entry In Database Ends -->
                                </doCatch>
                            </doTry>
                        </loop>
                        <doCatch>
                            <exception>com.finobank.Quarkus_DirectDMTOrchestration.LoopBreakException</exception>
                            <log message="ESB_DirectDMTOrchestration Exception ${exception.stacktrace}"/>
                            <log message="ESB_DirectDMTOrchestration Exiting Inquiry Loop" />
                        </doCatch>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <log message="ESB_DirectDMTOrchestration Exception ${exception.stacktrace}"/>
                            <setHeader name="Error">
                                <simple>Error</simple>
                            </setHeader>
                        </doCatch>
                        <doFinally>
                            <log message="ESB_DirectDMTOrchestration Verification Process Ends"></log>
                            <!-- SMS For Inquiry Cases -->
                            <wireTap uri="direct:IMPSPostingSMS" />
                            <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                            <!-- SMS For Inquiry Cases Ends -->
                        </doFinally>
                    </doTry>
                </when>
            </choice>
            <removeHeader name="SplitSeq"/>
        </loop>
    </route>
    <route id="billpaySMS">
        <from uri="direct:billdeskSMS"/>
        <!-- Merchant SMS For Billdesk -->
        <doTry>
            <choice>
                <when>
                    <simple>${header.IMPS_appId} == 'FINOMER' || ${header.IMPS_appId} == 'FINOMERNP'</simple>
                    <choice>
                        <when>
                            <simple>${header.transType} == 'BILLPAY1' || ${header.transType} == 'BILLPAY1C' || ${header.transType} == 'DMTBILLPAY1' </simple>
                            <setBody>
                                <simple> {"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MerchantMobileNum}","EventId": "","NotifyParam": {"TemplateId": "415","@Amount":"${header.PaymentAmount}","@SRType":"BillPay","@BALamount": "${header.availableBalance}","@MobileNo/EmailID": "${header.MobileNumForSMS}"}} </simple>
                            </setBody>
                        </when>
                        <when>
                            <simple>${header.transType} == 'DMTTOPUP1' || ${header.transType} == 'TOPUP1' || ${header.transType} == 'TOPUP1C' </simple>
                            <setBody>
                                <simple> {"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MerchantMobileNum}","EventId": "","NotifyParam": {"TemplateId": "415","@Amount":"${header.PaymentAmount}","@SRType":"Recharge","@BALamount": "${header.availableBalance}","@MobileNo/EmailID": "${header.MobileNumForSMS}"}} </simple>
                            </setBody>
                        </when>
                        <otherwise>
                            <setBody>
                                <simple> {"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.MerchantMobileNum}","EventId": "","NotifyParam": {"TemplateId": "18","@AccountNo":"${header.AccountNumber}","@TotalINR":"${header.availableBalance}","@TranID":"${header.parentRRN}","@Date":"${date:now:yyyy-MM-dd HH:mm:ss.SSS}","@INR":"${header.PaymentAmount}"}} </simple>
                            </setBody>
                        </otherwise>
                    </choice>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO DebitSMS_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
                    <removeHeader name="otp" />
                    <removeHeader name="Fp_Auth" />
                    <removeHeader name="AddBeneficiary" />
                    <removeHeader name="CamelHttpResponseCode" />
                    <removeHeader name="CreateCustomer" />
                    <removeHeader name="Content-Length" />
                    <removeHeader name="CreateAccount" />
                    <removeHeader name="CamelHttpQuery" />
                    <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
                </when>
            </choice>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED BILLPAY MERCHANT SMS_${exception.stacktrace}" loggingLevel="INFO" />
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED BILLPAY MERCHANT SMS_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
            </doCatch>
        </doTry>
        <!-- <otherwise> -->
        <choice>
            <when>
                <simple>${header.transType} == 'DMTBILLPAY1' || ${header.transType} == 'DMTBILLPAY2' || ${header.transType} == 'DMTBILLPAY2' </simple>
                <setBody>
                    <simple> {"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.customerMobNo}","EventId": "","NotifyParam": {"TemplateId": "389","@TranID":"${header.parentRRN}","@INR":"${header.PaymentAmount}","@MobileNo/EmailID":"${header.Authenticator1}","@Name":"${header.BillerID}"}} </simple>
                </setBody>
            </when>
            <when>
                <simple>${header.transType} == 'DMTTOPUP1' || ${header.transType} == 'DMTTOPUP2' || ${header.transType} == 'DMTTOPUP3' </simple>
                <setBody>
                    <simple> {"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.customerMobNo}","EventId": "","NotifyParam": {"TemplateId": "387","@TranID":"${header.parentRRN}","@INR":"${header.PaymentAmount}","@MobileNo/EmailID":"${header.Authenticator1}","@Name":"${header.BillerID}"}} </simple>
                </setBody>
            </when>
            <otherwise>
                <setBody>
                    <simple> {"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo": "${header.customerMobNo}","EventId": "","NotifyParam": {"TemplateId": "18","@AccountNo":"${header.AccountNumber}","@TotalINR":"${header.availableBalance}","@TranID":"${header.parentRRN}","@Date":"${date:now:yyyy-MM-dd HH:mm:ss.SSS}","@INR":"${header.PaymentAmount}"}} </simple>
                </setBody>
            </otherwise>
        </choice>
        <!-- </otherwise> -->
        <!-- </choice> -->
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO DebitSMS_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <removeHeader name="otp" />
        <removeHeader name="Fp_Auth" />
        <removeHeader name="AddBeneficiary" />
        <removeHeader name="CamelHttpResponseCode" />
        <removeHeader name="CreateCustomer" />
        <removeHeader name="Content-Length" />
        <removeHeader name="CreateAccount" />
        <removeHeader name="CamelHttpQuery" />
        <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
    </route>
    <!-- Bill desk Failed SMS -->
    <route id="billpaySMSFailed">
        <from uri="direct:billdeskFailedSMS"/>
        <choice>
            <when>
                <simple>${header.transType} == 'DMTBILLPAY1' || ${header.transType} == 'DMTBILLPAY2' || ${header.transType} == 'DMTBILLPAY2'</simple>
                <setBody>
                    <simple> {"MethodId": "3","TellerID": "11","CustomerMobileNo": "${header.customerMobNo}","EventId": "","NotifyParam": {"TemplateId": "390","@TranID":"${header.parentRRN}","@INR":"${header.PaymentAmount}","@MobileNo/EmailID":"${header.Authenticator1}","@Name":"${header.BillerID}"}} </simple>
                </setBody>
            </when>
            <when>
                <simple>${header.transType} == 'DMTTOPUP1' || ${header.transType} == 'DMTTOPUP2' || ${header.transType} == 'DMTTOPUP3'</simple>
                <setBody>
                    <simple> {"MethodId": "3","TellerID": "11","CustomerMobileNo": "${header.customerMobNo}","EventId": "","NotifyParam": {"TemplateId": "388","@TranID":"${header.parentRRN}","@INR":"${header.PaymentAmount}","@MobileNo/EmailID":"${header.Authenticator1}","@Name":"${header.BillerID}"}} </simple>
                </setBody>
            </when>
            <otherwise>
                <setBody>
                    <simple> {"MethodId": "3","TellerID": "11","CustomerMobileNo": "${header.customerMobNo}","EventId": "","NotifyParam": {"TemplateId": "349","@TranID":"${header.parentRRN}","@INR":"${header.PaymentAmount}"}} </simple>
                </setBody>
            </otherwise>
        </choice>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO DebitSMS_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <removeHeader name="otp" />
        <removeHeader name="Fp_Auth" />
        <removeHeader name="AddBeneficiary" />
        <removeHeader name="CamelHttpResponseCode" />
        <removeHeader name="CreateCustomer" />
        <removeHeader name="Content-Length" />
        <removeHeader name="CreateAccount" />
        <removeHeader name="CamelHttpQuery" />
        <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
    </route>
    <!--Billdesk Bpay SMS for Success case -->
    <route id="RT17_BillDeskSMSRoute" streamCache="true">
        <from uri="direct:billdeskBpaySMS" />
        <setBody>
            <simple> {"MethodId": "3","TellerID": "11","CustomerMobileNo": "${header.customerMobNo}","EventId": "","NotifyParam": {"TemplateId": "357","@TranAmt":"${header.PaymentAmount}","@MobileNo/EmailID":"${header.Authenticator1}"}} </simple>
        </setBody>
        <log message="X-Correlation-Id_${header.XCorrelationId} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO SMS Service For BillDesk SMS_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
        <!-- <to uri="log:before?showHeaders=true" /> -->
        <removeHeader name="otp" />
        <removeHeader name="Fp_Auth" />
        <removeHeader name="AddBeneficiary" />
        <removeHeader name="CamelHttpResponseCode" />
        <removeHeader name="CreateCustomer" />
        <removeHeader name="Content-Length" />
        <removeHeader name="CreateAccount" />
        <removeHeader name="CamelHttpQuery" />
        <!-- <to uri="log:before?showHeaders=true" /> -->
        <to uri="seda:AsyncSMSSent?waitForTaskToComplete=Never" />
    </route>
    <!-- RFU Status Update in case of Refire -->
    <route id="RFUStatusUpdateForRefire" streamCache="true">
        <from uri="direct:updateStatusForRefire"/>
        <setBody>
            <simple>{"referenceNo": "${header.RFURef}","rfuField": "ZRFUN1","rfuValue": "3","reversalFlag": "1"}</simple>
        </setBody>
        <removeHeader name="RFURef"></removeHeader>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For Refire Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
        <doTry>
            <!-- <process ref="requestProcessor" /> -->
            <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
            <bean ref="requestProcessor" method="rsUpdateRFU"/>
            <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For Refire Reversal RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <setHeader name="CashOutUpdateRespCode">
                <jsonpath>$.returnCode</jsonpath>
            </setHeader>
            <choice>
                <when>
                    <simple>${header.CashOutUpdateRespCode} == '0' </simple>
                </when>
                <otherwise>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_24 Reversal Failed From CBS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <choice>
                        <when>
                            <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                            <setHeader name="checkReversalFlag">
                                <simple>true</simple>
                            </setHeader>
                        </when>
                        <otherwise>
                            <setHeader name="checkReversalFlag">
                                <simple>false</simple>
                            </setHeader>
                        </otherwise>
                    </choice>
                </otherwise>
            </choice>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_23 ERROr OCCURRED During Reversal RFUT8 Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <choice>
                    <when>
                        <simple>${header.DBTranType} == 'DMTCASHD' </simple>
                        <setHeader name="checkReversalFlag">
                            <simple>true</simple>
                        </setHeader>
                    </when>
                    <otherwise>
                        <setHeader name="checkReversalFlag">
                            <simple>false</simple>
                        </setHeader>
                    </otherwise>
                </choice>
            </doCatch>
        </doTry>
    </route>
    <route id="RT10_PostToIMPSPPI">
        <from uri="direct:PostToIMPSPPI" />
        <log message="ESB_DirectDMTOrchestration PostToIMPS Initiated"></log>
        <loop>
            <header>impsListSize</header>
            <setHeader name="CamelHttpMethod">
                <constant>POST</constant>
            </setHeader>
            <setHeader name="Content-Type">
                <constant>application/json</constant>
            </setHeader>
            <setHeader name="CurrIMPSRequest">
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setHeader>
            <setBody>
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setBody>
            <!-- <setHeader name="SplitSeq">
                <simple>${header.DBInsertSplitSeq${header[CamelLoopIndex]}}</simple>
            </setHeader> -->
              <setHeader name="SplitSeq">
                <simple>${headers['DBInsertSplitSeq' + ${headers.CamelLoopIndex}] ?: 'Not Found'}</simple>
            </setHeader> 
            <setHeader name="RetryCount">
                <simple>{{ESB_IMPS_RetryCount}}</simple>
            </setHeader>
            <setHeader name="IMPSReqType">
                <simple>IMPSPostingPPI</simple>
            </setHeader>
            <!-- <setHeader name="RetryInterval"> <simple>{{ESB_IMPS_RetryInterval}}</simple> </setHeader> -->
            <marshal><json/></marshal>
            <!-- IMPS Database Insert -->
            <unmarshal><json/></unmarshal>
            <bean ref="databaseBean" method="setIMPSDBRequestJSON" />
            <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
            <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
            <choice>
                <when>
                    <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                    <setBody>
                        <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"1","Response_Flag":"0","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","RequestOut": null,"Response_Message": "","Status_Code": "","Service_ID": "5"}</simple>
                    </setBody>
                    <wireTap uri="direct:dmtDashBoard" />
                    <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                </when>
            </choice>
            <setBody>
                <simple>${header.impsRequest${header[CamelLoopIndex]}}</simple>
            </setBody>
            <marshal><json/></marshal>
            <convertBodyTo type="java.lang.String"></convertBodyTo>
            <setHeader name="impsRequest">
                <simple>${body}</simple>
            </setHeader>
            <doTry>
                <setHeader name="TranRefNo">
                    <jsonpath>$.PaymentRef</jsonpath>
                </setHeader>
                <doCatch>
                    <exception>java.io.IOException</exception>
                    <setHeader name="TranRefNo">
                        <simple></simple>
                    </setHeader>
                </doCatch>
            </doTry>
            <!--update internal imps -->
            <!-- <doTry> <setHeader name="effectiveDate"> <simple>${date:now:yyyy-MM-dd}</simple> </setHeader> <setBody> <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"I","npciResponseCode":"int"}</simple> </setBody> <log message="Body before UpdateTransaction_${body}" /> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Request Sent To IMPSUpdate for internal_${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> <setHeader name="body"> <simple>${body}</simple> </setHeader> <process ref="requestProcessor" /> <log message="Body1 After UpdateTransaction_${body}" /> <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> <log message="Body After UpdateTransaction_${body}" /> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Response Body after IMPSUpdate for internal_${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> <doCatch> <exception>java.lang.Exception</exception> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception While Update Internal IMPS Status_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" /> <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception While Update Internal IMPS Status ${exception.stacktrace}"></log> </doCatch> </doTry> -->
            <setBody>
                <simple>${header.impsRequest}</simple>
            </setBody>
            <setHeader name="Content-Type">
                <simple>application/json</simple>
            </setHeader>
            <doTry>
                <choice>
                    <when>
                        <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 REQUEST SENT TO PPI IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <log message="ESB_DirectDMTOrchestration Calling PPI URL {{ESB_IMPS_PostPPIIMPS}}"></log>
                        <to uri="{{ESB_IMPS_PostPPIIMPS}}?httpClientConfigurerRef=myHttpClientConfigurer&amp;headerFilterStrategy=#fisHeaderFilter&amp;socketTimeout={{ESB_IMPS_Timeout}}" />
                    </when>
                </choice>
                <!-- <log message="Called URL"></log> -->
                <!-- <log message="IMPS Response ${body}" /> -->
                <convertBodyTo type="java.lang.String" />
                <setHeader name="IMPSResponse">
                    <simple>${body}</simple>
                </setHeader>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_17 RESPONSE RECEIVED FROM IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <unmarshal><json/></unmarshal>
                <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                <choice>
                    <when>
                        <simple>${header.DashBoard_Logging_Flag} == '2' || ${header.DashBoard_Logging_Flag} == '3' || ${header.DashBoard_Logging_Flag} == '4' || ${header.DashBoard_Logging_Flag} == '5'</simple>
                        <setBody>
                            <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"1","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "${header.DBtxnRespCode}","Service_ID": "5"}</simple>
                        </setBody>
                        <wireTap uri="direct:dmtDashBoard" />
                        <!-- <wireTap uri="direct:dmtDashBoard" executorServiceRef = "PoolSize"/> -->
                    </when>
                </choice>
                <setBody>
                    <simple>${header.IMPSResponse}</simple>
                </setBody>
                <setHeader name="impsReturnCode">
                    <jsonpath>$.ActCode</jsonpath>
                </setHeader>
                <bean ref="impsPostingRequestBean" method="checkIfReversalRequiredPPI"></bean>
                <!-- <log message="impsReturnCode:::${header.impsReturnCode}"></log> -->
                <choice>
                    <when>
                        <!-- <simple>${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 18 or ${header.impsReturnCode} == 19 or ${header.impsReturnCode} == 21 or ${header.impsReturnCode} == 9999 or ${header.impsReturnCode} == 30 or ${header.impsReturnCode} == 31 or ${header.impsReturnCode} == 101 or ${header.impsReturnCode} == 421 or ${header.impsReturnCode} == 420</simple> -->
                        <!-- <simple>${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 30 </simple> -->
                        <simple>${header.IMPSAwaitingFlag} == '0' </simple>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="impsRespCode">
                            <simple>0</simple>
                        </setHeader>
                        <choice>
                            <when>
                                <simple>${header.IMPSInquiryFlag} == '0'</simple>
                                <setHeader name="IMPSPostTimeOut">
                                    <simple>Y</simple>
                                </setHeader>
                                <setHeader name="IMPSPostingStatus">
                                    <simple>Awaiting</simple>
                                </setHeader>
                            </when>
                            <otherwise>
                                <!-- SMS For Awaiting -->
                                <setHeader name="IMPSPostingStatus">
                                    <simple>Awaiting</simple>
                                </setHeader>
                                <wireTap uri="direct:IMPSPostingSMS" />
                                <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                                <!-- SMS For Awaiting Ends -->
                            </otherwise>
                        </choice>
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                      <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 RESPONSE RECEIVED FROM CBS For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    </when>
                </choice>
                <choice>
                    <when>
                        <simple>${header.impsReturnCode} == '0'</simple>
                        <setHeader name="impsRespCode">
                            <simple>0</simple>
                        </setHeader>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="BankRRN">
                            <jsonpath>$.BankRRN</jsonpath>
                        </setHeader>
                        <setHeader name="TranRefNo">
                            <jsonpath>$.TranRefNo</jsonpath>
                        </setHeader>
                        <!--update IMPS status -->
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                       <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 RESPONSE RECEIVED FROM CBS For Update IMPS _${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <!-- <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                         <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update Ends -->
                        <!-- SMS For Success -->
                        <setHeader name="IMPSPostingStatus">
                            <simple>Success</simple>
                        </setHeader>
                        <wireTap uri="direct:IMPSPostingSMS" />
                        <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                        <!-- SMS For Success Ends -->
                    </when>
                    <when>
                        <!-- <simple>${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 18 or ${header.impsReturnCode} == 19 or ${header.impsReturnCode} == 21 or ${header.impsReturnCode} == 9999 or ${header.impsReturnCode} == 30 or ${header.impsReturnCode} == 31 or ${header.impsReturnCode} == 101 or ${header.impsReturnCode} == 421 or ${header.impsReturnCode} == 420</simple> -->
                        <!-- <simple> ${header.impsReturnCode} == 11 or ${header.impsReturnCode} == 30 </simple> -->
                        <simple>${header.IMPSAwaitingFlag} == '0' </simple>
                        <!--RFU Update -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update Ends -->
                    </when>
                    <otherwise>
                        <setHeader name="effectiveDate">
                            <simple>${date:now:yyyy-MM-dd}</simple>
                        </setHeader>
                        <setHeader name="impsRespCode">
                            <simple>1</simple>
                        </setHeader>
                        <log message="ESB_DirectDMTOrchestration transref:::${header.TranRefNo}"></log>
                        <!--update IMPS status -->
                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                        <setBody>
                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                        </setBody>
                        <removeHeader name="updateIMPSTxnStatus"></removeHeader>
                        <removeHeader name="updateIMPSTxnRespCode"></removeHeader>
                        <!-- <process ref="requestProcessor" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 REQUEST SENT TO CBS For Update IMPS for fail_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                       <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 RESPONSE RECEIVED FROM CBS For Update IMPS for fail_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update For Failure Reason -->
                        <setBody>
                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "${header.IMPSRFUT6}"}</simple>
                        </setBody>
                        <!-- <process ref="requestProcessor" /> -->
                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                        <!-- <process ref="requestProcessor" /> -->
                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                         <bean ref="requestProcessor" method="rsUpdateRFU"/>
                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <!--RFU Update For Failure Reason -->
                        <!-- SMS For Failure -->
                        <setHeader name="IMPSPostingStatus">
                            <simple>Fail</simple>
                        </setHeader>
                        <wireTap uri="direct:IMPSPostingSMS" />
                        <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                        <!-- SMS For Failure Ends -->
                    </otherwise>
                </choice>
                <doCatch>
                    <exception>java.net.SocketTimeoutException</exception>
                    <setHeader name="IMPSPostTimeOut">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSAwaitingFlag">
                        <simple>0</simple>
                    </setHeader>
                    <setHeader name="impsReturnCode">
                        <simple>999</simple>
                    </setHeader>
                    <setHeader name="IMPSTxnCheckFlag">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSPostingStatus">
                        <simple>Awaiting</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE TIMEOUT FROM IMPS" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_16 Exception ${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception Stack ${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update -->
                    <setBody>
                        <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"P","npciResponseCode":"pend"}</simple>
                    </setBody>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_17 Request Sent To IMPSUpdate for Timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- <process ref="requestProcessor" /> -->
                    <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                    <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_18 Response Body after IMPSUpdate for timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update Ends -->
                    <!--RFU Update -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update Ends -->
                    <!-- TimeOut Entry In Database -->
                    <setBody>
                        <simple>{"ActCode": "999","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "Response TimeOut","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                    </setBody>
                    <setHeader name="IMPSResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <!-- TimeOut Entry In Database Ends -->
                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "1","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                </doCatch>
                <doCatch>
                    <exception>java.net.ConnectException</exception>
                    <setHeader name="IMPSPostTimeOut">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSAwaitingFlag">
                        <simple>0</simple>
                    </setHeader>
                    <setHeader name="impsReturnCode">
                        <simple>999</simple>
                    </setHeader>
                    <setHeader name="IMPSTxnCheckFlag">
                        <simple>Y</simple>
                    </setHeader>
                    <setHeader name="IMPSPostingStatus">
                        <simple>Awaiting</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE TIMEOUT FROM IMPS" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_16 Exception ${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception Stack ${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update -->
                    <setBody>
                        <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"P","npciResponseCode":"pend"}</simple>
                    </setBody>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_17 Request Sent To IMPSUpdate for Timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- <process ref="requestProcessor" /> -->
                   <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                    <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_18 Response Body after IMPSUpdate for timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update Ends -->
                    <!--RFU Update -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update Ends -->
                    <!-- TimeOut Entry In Database -->
                    <setBody>
                        <simple>{"ActCode": "999","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "Response TimeOut","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                    </setBody>
                    <setHeader name="IMPSResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <!-- TimeOut Entry In Database Ends -->
                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "1","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                </doCatch>
                <doCatch>
                    <exception>java.net.NoRouteToHostException</exception>
                    <setHeader name="IMPSPostTimeOut">
                        <simple>N</simple>
                    </setHeader>
                    <setHeader name="impsReturnCode">
                        <simple>1</simple>
                    </setHeader>
                    <setHeader name="IMPSPostingStatus">
                        <simple>Fail</simple>
                    </setHeader>
                    <setHeader name="IMPSAwaitingFlag">
                        <simple>1</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration UNABLE TO CONNECT TO IMPS" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_16 Exception ${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Exception Stack ${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update -->
                    <setBody>
                        <simple>{"transactionDate":"${date:now:yyyy-MM-dd}","transactionRrn":"${header.TranRefNo}","transactionStatus":"R","npciResponseCode":"fail"}</simple>
                    </setBody>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_17 Request Sent To IMPSUpdate for Timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- <process ref="requestProcessor" /> -->
                    <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                    <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration QUARK_STEP_18 Response Body after IMPSUpdate for timeout_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- Status Update Ends -->
                    <!--RFU Update -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                    <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update Ends -->
                    <!--RFU Update For Failure Reason -->
                    <setBody>
                        <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "9998,${exception.message}"}</simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                    <!-- <process ref="requestProcessor" /> -->
                    <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                     <bean ref="requestProcessor" method="rsUpdateRFU"/>
                    <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <!--RFU Update For Failure Reason -->
                    <!-- TimeOut Entry In Database -->
                    <setBody>
                        <simple>{"ActCode": "998","BankRRN": "","BeneAccNo": "${header.IMPSBeneAccNo}","BeneIFSC": "${header.IMPSBeneIFSC}","BeneName": "","Response": "${exception}","TranRefNo": "${header.IMPSTranRefNo}","TxnAmount": "${header.DBAmt}"}</simple>
                    </setBody>
                    <setHeader name="IMPSResponse">
                        <simple>${body}</simple>
                    </setHeader>
                    <unmarshal><json/></unmarshal>
                    <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                    <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                    <!-- TimeOut Entry In Database Ends -->
                    <!-- <choice> <when> <simple>${header.DashBoard_Logging_Flag} == 'Y'</simple> <setBody> <simple>{"Method_ID":"104","Layer_ID":"5","Request_Flag":"0","Response_Flag":"1","Correlation_Request":"${header.X-Correlation-Id}","Correlation_Session":"","Node_IP_Address": "{{esbHost}}","RequestIn": "","RequestOut": "${date:now:yyyy-MM-dd HH:mm:ss.SSS}","Response_Message": "","Status_Code": "1","Service_ID": "5"}</simple> </setBody> <wireTap uri="direct:dmtDashBoard"/> </when> </choice> -->
                </doCatch>
            </doTry>
            <choice>
                <when>
                    <simple>${header.IMPSTxnCheckFlag} == 'Y'</simple>
                    <!-- IMPSTxnCheck -->
                    <doTry>
                        <setHeader name="IMPSReqType">
                            <simple>IMPSTxnCheckPPI</simple>
                        </setHeader>
                        <setBody>
                            <simple>{"PaymentRef":"${header.IMPSTranRefNo}"}</simple>
                        </setBody>
                        <bean ref="databaseBean" method="setIMPSDBTxnCheckRequestJSON" />
                        <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                        <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                        <log message="ESB_DirectDMTOrchestration Calling IMPSTxnCheck PPI URL {{ESB_IMPS_PPITxnCheck}}"></log>
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 IMPSTXNCHECK REQUEST SENT TO IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <setHeader name="Content-Type">
                            <simple>application/json</simple>
                        </setHeader>
                        <to uri="{{ESB_IMPS_PPITxnCheck}}?headerFilterStrategy=#finoHeaderFilter&amp;httpClientConfigurerRef=myHttpClientConfigurer&amp;socketTimeout={{ESB_IMPS_Timeout}}" />
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_17 IMPSTXNCHECK RESPONSE RECEIVED FROM IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                        <unmarshal><json/></unmarshal>
                        <setHeader name="IMPSTxnCheckRespCode">
                            <simple>${body[ResponseCode]}</simple>
                        </setHeader>
                        <bean ref="databaseBean" method="setIMPSDBTxnCheckResponseJSON" />
                        <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                        <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                        <choice>
                            <when>
                                <simple>${header.IMPSTxnCheckRespCode} == '1'</simple>
                                <setHeader name="IMPSPostTimeOut">
                                    <simple>N</simple>
                                </setHeader>
                                <setHeader name="RefireCount">
                                    <simple>1</simple>
                                </setHeader>
                                <to uri="direct:reInitiateTxn"/>
                            </when>
                        </choice>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration IMPSTXNCHECK ERROR OCCURRED_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 IMPSTXNCHECK ERROR OCCURRED_${exception.stacktrace}" loggingLevel="INFO" />
                        </doCatch>
                    </doTry>
                    <!-- IMPSTxnCheck Ends-->
                </when>
            </choice>
            <choice>
                <when>
                    <simple>${header.IMPSPostTimeOut} == 'Y'</simple>
                    <doTry>
                        <loop>
                            <header>RetryCount</header>
                            <log message="ESB_DirectDMTOrchestration Loop Executing : ${header[CamelLoopIndex]}"></log>
                            <log message="ESB_DirectDMTOrchestration Initiating Retry.....${header[CamelLoopIndex]}"></log>
                            <setHeader name="IMPSReqType">
                                <simple>IMPSInquiryPPI</simple>
                            </setHeader>
                            <setBody>
                                <simple>${header.CurrIMPSRequest}</simple>
                            </setBody>
                            <marshal><json/></marshal>
                            <doTry>
                                <unmarshal><json/></unmarshal>
                                <bean ref="databaseBean" method="setIMPSDBRequestJSON" />
                                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                <doCatch>
                                    <exception>java.lang.Exception</exception>
                                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request Exception ${exception}"></log>
                                </doCatch>
                                <doFinally>
                                    <setBody>
                                        <simple>${header.CurrIMPSRequest}</simple>
                                    </setBody>
                                    <marshal><json/></marshal>
                                </doFinally>
                            </doTry>
                            <!-- <removeHeaders pattern="*"></removeHeaders> -->
                            <removeHeader name="CamelHttpResponseCode" />
                            <removeHeader name="CamelRestletResponse" />
                            <removeHeaders pattern="org.restlet.*"></removeHeaders>
                            <removeHeader name="RespCode" />
                            <setHeader name="CamelHttpMethod">
                                <constant>POST</constant>
                            </setHeader>
                            <setHeader name="Content-Type">
                                <constant>application/json</constant>
                            </setHeader>
                            <doTry>
                                <choice>
                                    <when>
                                        <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 REQUEST SENT TO PPI IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <log message="ESB_DirectDMTOrchestration Calling PPI URL {{ESB_IMPS_PPIInquiry}}"></log>
                                        <to uri="{{ESB_IMPS_PPIInquiry}}?httpClientConfigurerRef=myHttpClientConfigurer&amp;headerFilterStrategy=#fisHeaderFilter&amp;socketTimeout={{ESB_IMPS_Timeout}}" />
                                    </when>
                                </choice>
                                <!-- <log message="Response Body ${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> -->
                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_17 RESPONSE RECEIVED FROM IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                <convertBodyTo type="java.lang.String" />
                                <setHeader name="IMPSResponse">
                                    <simple>${body}</simple>
                                </setHeader>
                                <setHeader name="impsReturnCode">
                                    <jsonpath>$.ActCode</jsonpath>
                                </setHeader>
                                <unmarshal><json/></unmarshal>
                                <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                <convertBodyTo type="java.lang.String" />
                                <setBody>
                                    <simple>${header.IMPSResponse}</simple>
                                </setBody>
                                <choice>
                                    <when>
                                        <simple>${header.impsReturnCode} == '0'</simple>
                                        <setHeader name="impsRespCode">
                                            <simple>0</simple>
                                        </setHeader>
                                    </when>
                                    <otherwise>
                                        <setHeader name="impsRespCode">
                                            <simple>1</simple>
                                        </setHeader>
                                    </otherwise>
                                </choice>
                                <bean ref="impsPostingRequestBean" method="checkIfReversalRequiredPPI"></bean>
                                <choice>
                                    <when>
                                        <simple>${header.IMPSInquiryFlag} == '0'</simple>
                                        <log message="ESB_DirectDMTOrchestration Resp 11 received"></log>
                                        <log message="ESB_DirectDMTOrchestration Delaying Retry....."></log>
                                        <setHeader name="IMPSPostingStatus">
                                            <simple>Awaiting</simple>
                                        </setHeader>
                                    </when>
                                    <when>
                                        <simple>${header.impsReturnCode} == '17'</simple>
                                        <log message="ESB_DirectDMTOrchestration Reinitiate Transation For Code 17"/>
                                        <choice>
                                            <when>
                                                <simple>${header.ReInitFlag} == 'Y'</simple>
                                            </when>
                                            <otherwise>
                                                <setHeader name="ReInitFlag">
                                                    <simple>Y</simple>
                                                </setHeader>
                                                <setHeader name="RefireCount">
                                                    <simple>1</simple>
                                                </setHeader>
                                                <to uri="direct:reInitiateTxn"/>
                                                <!-- <throwException ref="loopBreak"></throwException> -->
                                            </otherwise>
                                        </choice>
                                        <log message="ESB_DirectDMTOrchestration Before Delay"></log>
                                        <delay>
                                            <constant>{{ESB_IMPS_Timeout}}</constant>
                                        </delay>
                                        <log message="ESB_DirectDMTOrchestration After Delay"></log>
                                    </when>
                                    <otherwise>
                                        <choice>
                                            <when>
                                                <simple>${header.IMPSAwaitingFlag} == '0'</simple>
                                                <setHeader name="IMPSPostingStatus">
                                                    <simple>Awaiting</simple>
                                                </setHeader>
                                            </when>
                                            <when>
                                                <simple>${header.IMPSAwaitingFlag} == '1'</simple>
                                                <choice>
                                                    <when>
                                                        <simple>${header.impsReturnCode} == '0'</simple>
                                                        <setHeader name="IMPSPostingStatus">
                                                            <simple>Success</simple>
                                                        </setHeader>
                                                    </when>
                                                    <otherwise>
                                                        <setHeader name="IMPSPostingStatus">
                                                            <simple>Fail</simple>
                                                        </setHeader>
                                                    </otherwise>
                                                </choice>
                                            </when>
                                        </choice>
                                        <!--update IMPS status -->
                                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                                        <setBody>
                                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                                        </setBody>
                                        <!-- <process ref="requestProcessor" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                        <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 RESPONSE RECEIVED FROM CBS For Update IMPS _${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!--RFU Update -->
                                        <setBody>
                                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField":"ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                                        </setBody>
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <choice>
                                            <when>
                                                <simple>${header.updateIMPSTxnStatus} == 'R'</simple>
                                                <!--RFU Update For Failure Reason -->
                                                <setBody>
                                                    <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "${header.IMPSRFUT6}"}</simple>
                                                </setBody>
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                                <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                                <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <!--RFU Update For Failure Reason -->
                                            </when>
                                        </choice>
                                        <setBody>
                                            <simple>${header.IMPSResponse}</simple>
                                        </setBody>
                                        <throwException ref="loopBreak"></throwException>
                                    </otherwise>
                                </choice>
                                <doCatch>
                                    <exception>java.net.SocketTimeoutException</exception>
                                    <log message="ESB_DirectDMTOrchestration Exception ${exception}"></log>
                                </doCatch>
                                <doCatch>
                                    <exception>java.net.ConnectException</exception>
                                    <log message="ESB_DirectDMTOrchestration Exception ${exception}"></log>
                                </doCatch>
                            </doTry>
                        </loop>
                        <doCatch>
                            <exception>com.finobank.Quarkus_DirectDMTOrchestration.LoopBreakException</exception>
                            <log message="ESB_DirectDMTOrchestration Exception ${exception.stacktrace}"/>
                            <log message="ESB_DirectDMTOrchestration Exiting Inquiry Loop" />
                        </doCatch>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <log message="ESB_DirectDMTOrchestration Exception ${exception.stacktrace}"/>
                            <setHeader name="Error">
                                <simple>Error</simple>
                            </setHeader>
                        </doCatch>
                        <doFinally>
                            <log message="ESB_DirectDMTOrchestration Verification Process Ends"></log>
                            <!-- SMS For Inquiry Cases -->
                            <wireTap uri="direct:IMPSPostingSMS" />
                            <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                            <!-- SMS For Inquiry Cases Ends -->
                        </doFinally>
                    </doTry>
                </when>
            </choice>
            <choice>
                <when>
                    <simple>${header.IMPSVerifyFlag} == '0'</simple>
                    <doTry>
                        <loop>
                            <header>RetryCount</header>
                            <log message="ESB_DirectDMTOrchestration Loop Executing : ${header[CamelLoopIndex]}"></log>
                            <log message="ESB_DirectDMTOrchestration Initiating Retry.....${header[CamelLoopIndex]}"></log>
                            <setHeader name="IMPSReqType">
                                <simple>IMPSVerifyPPI</simple>
                            </setHeader>
                            <setBody>
                                <simple>${header.CurrIMPSRequest}</simple>
                            </setBody>
                            <marshal><json/></marshal>
                            <doTry>
                                <unmarshal><json/></unmarshal>
                                <bean ref="databaseBean" method="setIMPSDBRequestJSON" />
                                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                <doCatch>
                                    <exception>java.lang.Exception</exception>
                                    <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request Exception ${exception}"></log>
                                </doCatch>
                                <doFinally>
                                    <setBody>
                                        <simple>${header.CurrIMPSRequest}</simple>
                                    </setBody>
                                    <marshal><json/></marshal>
                                </doFinally>
                            </doTry>
                            <!-- <removeHeaders pattern="*"></removeHeaders> -->
                            <removeHeader name="CamelHttpResponseCode" />
                            <removeHeader name="CamelRestletResponse" />
                            <removeHeaders pattern="org.restlet.*"></removeHeaders>
                            <removeHeader name="RespCode" />
                            <setHeader name="CamelHttpMethod">
                                <constant>POST</constant>
                            </setHeader>
                            <setHeader name="Content-Type">
                                <constant>application/json</constant>
                            </setHeader>
                            <doTry>
                                <choice>
                                    <when>
                                        <simple>${header.IMPSPPIIdentifier} == 'A'</simple>
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_16 REQUEST SENT TO PPI IMPS For Verification_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <log message="ESB_DirectDMTOrchestration Calling PPI URL {{ESB_IMPS_PPIVerify}}"></log>
                                        <to uri="{{ESB_IMPS_PPIVerify}}?httpClientConfigurerRef=myHttpClientConfigurer&amp;headerFilterStrategy=#fisHeaderFilter&amp;socketTimeout={{ESB_IMPS_Timeout}}" />
                                    </when>
                                </choice>
                                <!-- <log message="Response Body ${body}" loggingLevel="INFO" logName="com.fino.asynclog" /> -->
                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_17 RESPONSE RECEIVED FROM IMPS For Verification_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                <convertBodyTo type="java.lang.String" />
                                <setHeader name="IMPSResponse">
                                    <simple>${body}</simple>
                                </setHeader>
                                <setHeader name="impsReturnCode">
                                    <jsonpath>$.ActCode</jsonpath>
                                </setHeader>
                                <unmarshal><json/></unmarshal>
                                <bean ref="databaseBean" method="setIMPSDBResponseJSON" />
                                <log message="ESB_DirectDMTOrchestration Request TO Database Queue For Transaction Request ${header.TransactionQueryReq}"></log>
                                <to pattern="InOnly" uri="activemq:queue:TransactionQueue"></to>
                                <convertBodyTo type="java.lang.String" />
                                <setBody>
                                    <simple>${header.IMPSResponse}</simple>
                                </setBody>
                                <choice>
                                    <when>
                                        <simple>${header.impsReturnCode} == '0'</simple>
                                        <setHeader name="impsRespCode">
                                            <simple>0</simple>
                                        </setHeader>
                                    </when>
                                    <otherwise>
                                        <setHeader name="impsRespCode">
                                            <simple>1</simple>
                                        </setHeader>
                                    </otherwise>
                                </choice>
                                <bean ref="impsPostingRequestBean" method="checkIfReversalRequiredPPI"></bean>
                                <choice>
                                    <when>
                                        <simple>${header.IMPSVerifyFlag} == '0'</simple>
                                        <log message="ESB_DirectDMTOrchestration Resp 11 received"></log>
                                        <log message="ESB_DirectDMTOrchestration Delaying Retry....."></log>
                                        <setHeader name="IMPSPostingStatus">
                                            <simple>Awaiting</simple>
                                        </setHeader>
                                    </when>
                                    <when>
                                        <simple>${header.impsReturnCode} == '17'</simple>
                                        <log message="ESB_DirectDMTOrchestration Reinitiate Transation For Code 17"/>
                                        <choice>
                                            <when>
                                                <simple>${header.ReInitFlag} == 'Y'</simple>
                                            </when>
                                            <otherwise>
                                                <setHeader name="ReInitFlag">
                                                    <simple>Y</simple>
                                                </setHeader>
                                                <setHeader name="RefireCount">
                                                    <simple>1</simple>
                                                </setHeader>
                                                <to uri="direct:reInitiateTxn"/>
                                                <!-- <throwException ref="loopBreak"></throwException> -->
                                            </otherwise>
                                        </choice>
                                        <log message="ESB_DirectDMTOrchestration Before Delay"></log>
                                        <delay>
                                            <constant>{{ESB_IMPS_Timeout}}</constant>
                                        </delay>
                                        <log message="ESB_DirectDMTOrchestration After Delay"></log>
                                    </when>
                                    <otherwise>
                                        <choice>
                                            <when>
                                                <simple>${header.IMPSAwaitingFlag} == '0'</simple>
                                                <setHeader name="IMPSPostingStatus">
                                                    <simple>Awaiting</simple>
                                                </setHeader>
                                            </when>
                                            <when>
                                                <simple>${header.IMPSAwaitingFlag} == '1'</simple>
                                                <choice>
                                                    <when>
                                                        <simple>${header.impsReturnCode} == '0'</simple>
                                                        <setHeader name="IMPSPostingStatus">
                                                            <simple>Success</simple>
                                                        </setHeader>
                                                    </when>
                                                    <otherwise>
                                                        <setHeader name="IMPSPostingStatus">
                                                            <simple>Fail</simple>
                                                        </setHeader>
                                                    </otherwise>
                                                </choice>
                                            </when>
                                        </choice>
                                        <!--update IMPS status -->
                                        <bean ref="updateIMPSStatusRequestBean" method="setUpdateImpsTxn" />
                                        <setBody>
                                            <simple>{"transactionDate":"${header.effectiveDate}","transactionRrn":"${header.TranRefNo}","transactionStatus":"${header.updateIMPSTxnStatus}","npciResponseCode":"${header.updateIMPSTxnRespCode}"}</simple>
                                        </setBody>
                                        <!-- <process ref="requestProcessor" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 REQUEST SENT TO CBS For For Update IMPS_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,X-Correlation-Id,RequestorId and request body -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                       <bean method="rsUpdateIMPSTransaction" ref="requestProcessor"/> 
                                        <!-- <to pattern="InOut" uri="cxfrs:bean:rsUpdateIMPSTransaction?headerFilterStrategy=#fisHeaderFilter" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 RESPONSE RECEIVED FROM CBS For Update IMPS _${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!--RFU Update -->
                                        <setBody>
                                            <simple>{"referenceNo": "${header.TranRefNo}","rfuField":"ZRFUT8","rfuValue": "${header.BankRRN}"}</simple>
                                        </setBody>
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 REQUEST SENT TO CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                        <!-- <process ref="requestProcessor" /> -->
                                        <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                        <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                        <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 RESPONSE RECEIVED FROM CBS For RFU Update_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                        <choice>
                                            <when>
                                                <simple>${header.updateIMPSTxnStatus} == 'R'</simple>
                                                <!--RFU Update For Failure Reason -->
                                                <setBody>
                                                    <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT6","rfuValue": "${header.IMPSRFUT6}"}</simple>
                                                </setBody>
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!--*********** Version 1.0.4 changed : Replace RRN with X-Correlation-Id -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_22 REQUEST SENT TO CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh java bean called to set token,RRN,RequestorId,TokenId and request body -->
                                                <!-- <process ref="requestProcessor" /> -->
                                                <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
                                                <bean ref="requestProcessor" method="rsUpdateRFU"/>
                                                <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
                                                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_23 RESPONSE RECEIVED FROM CBS For RFU Update For IMPS Response_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
                                                <!--RFU Update For Failure Reason -->
                                            </when>
                                        </choice>
                                        <setBody>
                                            <simple>${header.IMPSResponse}</simple>
                                        </setBody>
                                        <throwException ref="loopBreak"></throwException>
                                    </otherwise>
                                </choice>
                                <doCatch>
                                    <exception>java.net.SocketTimeoutException</exception>
                                    <log message="ESB_DirectDMTOrchestration Exception ${exception}"></log>
                                </doCatch>
                                <doCatch>
                                    <exception>java.net.ConnectException</exception>
                                    <log message="ESB_DirectDMTOrchestration Exception ${exception}"></log>
                                </doCatch>
                            </doTry>
                        </loop>
                        <doCatch>
                            <exception>com.finobank.Quarkus_DirectDMTOrchestration.LoopBreakException</exception>
                            <log message="ESB_DirectDMTOrchestration Exception ${exception.stacktrace}"/>
                            <log message="ESB_DirectDMTOrchestration Exiting Inquiry Loop" />
                        </doCatch>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <log message="ESB_DirectDMTOrchestration Exception ${exception.stacktrace}"/>
                            <setHeader name="Error">
                                <simple>Error</simple>
                            </setHeader>
                        </doCatch>
                        <doFinally>
                            <log message="ESB_DirectDMTOrchestration Verification Process Ends"></log>
                            <!-- SMS For Inquiry Cases -->
                            <wireTap uri="direct:IMPSPostingSMS" />
                            <!-- <wireTap uri="direct:IMPSPostingSMS" executorServiceRef = "PoolSize"/> -->
                            <!-- SMS For Inquiry Cases Ends -->
                        </doFinally>
                    </doTry>
                </when>
            </choice>
            <removeHeader name="SplitSeq"/>
        </loop>
    </route>
    <route id="RT_RFUUpdateForNPCI">
        <!-- RFUT8 Update For NPCI -->
        <from uri="direct:RFUUpdateForNPCI"/>
        <doTry>
            <!--RFU Update -->
            <setBody>
                <simple>{"referenceNo": "${header.TranRefNo}","rfuField": "ZRFUT8","rfuValue": "${header.TranRefNo}"}</simple>
            </setBody>
            <!-- <process ref="requestProcessor" /> -->
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO CBS For RFU Update For NPCI_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <!-- ESB ESB_to_Quarkus GitID Quarkus bkp_migrationTool.sh config.xml esbToQuarkus.py migrationTool.sh migrationTool_Bkp.sh called cxf rest to hit CBS url -->
            <bean ref="requestProcessor" method="rsUpdateRFU"/>
            <!-- <to uri="cxfrs:bean:rsUpdateRFU?headerFilterStrategy=#fisHeaderFilter" /> -->
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration RESPONSE RECEIVED FROM CBS For RFU Update For NPCI_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <!--RFU Update Ends -->
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception Occurred During NPCI RFUT8 Update_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception Occurred During NPCI RFUT8 Update_${exception.stacktrace}" loggingLevel="INFO" logName="com.fino.asynclog" />
            </doCatch>
        </doTry>
    </route>
    <route id="RT_IMPSBenerevPosting">
        <from uri="direct:IMPSBenerevPost" />
        <removeHeaders pattern="Camel*"/>
        <removeHeaders pattern="org.restlet.*"/>
        <removeHeader name="dMSDetails"/>
        <removeHeader name="AddBeneficiary"/>
        <removeHeader name="CreateAccount"/>
        <removeHeader name="CreateCustomer"/>
        <removeHeader name="CustomerAuth"/>
        <removeHeader name="Authentication"/>
        <removeHeader name="frmEventId"/>
        <removeHeader name="FRMImpsRequest"/>
        <removeHeaders pattern="Billdesk*"/>
        <removeHeaders pattern="BillDesk*"/>
        <setHeader name="Method">
            <simple>POST</simple>
        </setHeader>
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <setBody>
            <simple>{"RequestId":"${header.TranRefNo}"}</simple>
        </setBody>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_18 Request Sent to fetch RRN_${body}_${headers}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <doTry>
            <to uri="{{ESB_FetchRRN_URL_{{currentSetUp}}}}?throwExceptionOnFailure=false"/>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} ESB_DirectDMTOrchestration Response received from fetch RRN_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <setHeader name="fetchRRN">
                <jsonpath>$.RRN</jsonpath>
            </setHeader>
            <setBody>
                <simple>${header.PostTransaction}</simple>
            </setBody>
            <bean ref="benRevPosting" method="checkTxnType" />
            <choice>
                <when>
                    <simple>${header.chargeAmount} != '0' </simple>
                    <setBody>
                        <simple>${header.postingLegBene}</simple>
                    </setBody>
                    <marshal><json/></marshal>
                    <setHeader name="TransactionQueryReq">
                        <simple>{"Insert_Type": "0","requestType": "1","ACCTNUM": "${header.accountNumber}","PCODE": "${header.pcode}","MSGTYPE": "1","TRACE": "${header.fetchRRN}","AMOUNT": "${header.chargeAmount}","TERMID": "${header.RequestorId}","Support_data": "${header.supportData}","CostCenter":"${header.costCenter}","Credit_Debit_Flag": "C","appId": "${header.appId}","isInclusive": "${header.isInclusive}","Method_Id": "${header.MethodId}","X_CORRELATION_ID": "${header.X-Correlation-Id}","Layer": "ESB","TXNDEST": "{{esbHost}}"}</simple>
                    </setHeader>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration DBrequest Insert_${header.TransactionQueryReq}" loggingLevel="INFO" logName="com.fino.asynclog" />
                    <doTry>
                        <to pattern="InOnly" uri="activemq:queue:TransactionQueue" />
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <log message="ESB_DirectDMTOrchestration Exception Occured while que insert: ${exception.stacktrace}"></log>
                        </doCatch>
                    </doTry>
                    <setBody>
                        <simple> {"appId":"${header.appId}","valueDate":null,"analysisFlag":0,"isInclusive":0,"isClubbed":1,"reversalFlag":null,"referenceNo":"${header.fetchRRN}","acctFundTransferLegs":${body}} </simple>
                    </setBody>
                    <!-- <process ref="requestProcessor" /> -->
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_19 REQUEST SENT TO CBS FOR POST TRANSACTION Bene Rev Posting_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
                    <doTry>
                        <bean method="rsPostTransaction" ref="requestProcessor"/>
                        <!-- <to uri="cxfrs:bean:rsPostTransaction?headerFilterStrategy=#fisHeaderFilter&amp;throwExceptionOnFailure=false" /> -->
                        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_20 Response from CBS CBS FOR POST TRANSACTION Bene Rev Posting_${body} " loggingLevel="INFO" logName="com.fino.asynclog" />
                        <choice>
                            <when>
                                <simple>${header.CamelHttpResponseCode} == '200'</simple>
                                <setHeader name="cbsreturnCode">
                                    <jsonpath>$.returnCode</jsonpath>
                                </setHeader>
                                <choice>
                                    <when>
                                        <simple>${header.cbsreturnCode} == '0'</simple>
                                        <setHeader name="cbsreturnCode">
                                            <simple>0</simple>
                                        </setHeader>
                                        <setHeader name="cbsresponseMsg">
                                            <simple>Success</simple>
                                        </setHeader>
                                        <setHeader name="cbsTxnReferenceNo">
                                            <jsonpath>$.cbsTxnReferenceNo</jsonpath>
                                        </setHeader>
                                        <setHeader name="availableBalance">
                                            <jsonpath>$.balancesList[0].ledgerBalance</jsonpath>
                                        </setHeader>
                                        <setHeader name="GlAvailableBalance">
                                            <jsonpath>$.balancesList[0].availableBalance</jsonpath>
                                        </setHeader>
                                    </when>
                                    <otherwise>
                                        <setHeader name="cbsreturnCode">
                                            <simple>${header.returnCode}</simple>
                                        </setHeader>
                                        <doTry>
                                            <setHeader name="cbsresponseMsg">
                                                <jsonpath>$.responseMessage</jsonpath>
                                            </setHeader>
                                            <doCatch>
                                                <exception>java.lang.Exception</exception>
                                                <setHeader name="cbsresponseMsg">
                                                    <simple>Error Occurred From CBS</simple>
                                                </setHeader>
                                            </doCatch>
                                        </doTry>
                                    </otherwise>
                                </choice>
                            </when>
                            <otherwise>
                                <setHeader name="cbsreturnCode">
                                    <simple>1</simple>
                                </setHeader>
                                <setHeader name="cbsresponseMsg">
                                    <simple>Error Occurred From CBS</simple>
                                </setHeader>
                            </otherwise>
                        </choice>
                        <doCatch>
                            <exception>java.net.SocketTimeoutException</exception>
                            <setHeader name="cbsreturnCode">
                                <simple>1</simple>
                            </setHeader>
                            <setHeader name="cbsresponseMsg">
                                <simple>Socket timeout from ESB</simple>
                            </setHeader>
                        </doCatch>
                        <doCatch>
                            <exception>java.lang.Exception</exception>
                            <setHeader name="cbsreturnCode">
                                <simple>999</simple>
                            </setHeader>
                            <setHeader name="cbsresponseMsg">
                                <simple>Error Occured</simple>
                            </setHeader>
                        </doCatch>
                        <doFinally>
                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration QUARK_STEP_21 INSERT TransactionQueryReq STEP 8" loggingLevel="INFO" logName="com.fino.asynclog" />
                            <setHeader name="TransactionQueryReq">
                                <simple>{"Insert_Type": "1","Request_Type": "1","ACCTNUM": "${header.accountNumber}","PCODE": "${header.pcode}","MSGTYPE": "1","RESPCODE": "${header.cbsreturnCode}","Response_Msg": "${header.cbsresponseMsg}","TRACE": "${header.fetchRRN}","REFNUM": "${header.ActualRRN}","AMOUNT": "${header.chargeAmount}","TERMID": "${header.RequestorId}","Ledger_Balance": "${header.availableBalance}","GL_Ledger_Balance": "${header.GlAvailableBalance}","X_CORRELATION_ID": "${header.X-Correlation-Id}"}</simple>
                            </setHeader>
                            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration QUARK_STEP_22 DBResponse Insert_${header.TransactionQueryReq}" loggingLevel="INFO" logName="com.fino.asynclog" />
                            <doTry>
                                <to pattern="InOnly" uri="activemq:queue:TransactionQueue" />
                                <doCatch>
                                    <exception>java.lang.Exception</exception>
                                    <log message="ESB_DirectDMTOrchestration Exception Occured while que insert: ${exception.stacktrace}"></log>
                                </doCatch>
                            </doTry>
                        </doFinally>
                    </doTry>
                </when>
                <otherwise>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DMTOrchestration No Reversal required charges 0" loggingLevel="INFO" logName="com.fino.asynclog" />
                </otherwise>
            </choice>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} ESB_DirectDMTOrchestration QUARK_STEP_23 Exception while calling BLL fetchRRN service_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
            </doCatch>
        </doTry>
    </route>
    <route id="RT6_IMPSFRM_Queue" streamCache="true">
        <from uri="seda:IMPSFRMQueueInsert?concurrentConsumers={{minConcurrentConsumers}}" />
        <setBody>
            <simple>${header.FRMImpsRequest}</simple>
        </setBody>
        <marshal><json/></marshal>
        <setHeader name="IMPSFRMRequest">
            <simple>{"tranType":"IMPS","eventId":"${header.frmEventId}","X-Correlation-Id":"${header.X-Correlation-Id}","Request":${body},"Response":${header.FRMImpsResponse}}</simple>
        </setHeader>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SENT TO IMPSFRMQueue_${header.IMPSFRMRequest}" loggingLevel="INFO" logName="com.fino.asynclog" />
        <doTry>
            <setHeader name="X-Correlation-Id">
                <simple>${header.X-Correlation-Id}</simple>
            </setHeader>
            <setBody>
                <simple>${header.IMPSFRMRequest}</simple>
            </setBody>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UseRId_${header.RequestorId} | ESB_DirectDMTOrchestration FRM que insert_${body}"></log>
            <to pattern="InOnly" uri="activemq:queue:IMPSFRMQueue" />
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UseRId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception Occured while FRM que insert: ${exception.stacktrace}_${body}"></log>
            </doCatch>
        </doTry>
        <removeHeader name="IMPSFRMRequest" />
    </route>
    <route id="RT6_Async_SMSSent" streamCache="true">
        <from uri="seda:AsyncSMSSent?concurrentConsumers={{minConcurrentConsumers}}" />
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <setHeader name="CamelHttpMethod">
            <simple>POST</simple>
        </setHeader>
        <doTry>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Request SENT TO SMS Service_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <to uri="{{ESB_SMSService_FINO_Replica_URL_{{currentSetUp}}}}?headerFilterStrategy=#finoHeaderFilter&amp;httpClientConfigurerRef=myHttpClientConfigurer&amp;socketTimeout={{DEFAULT_TIMEOUT}}"/>
            <removeHeader name="CamelHttpMethod"></removeHeader>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Response Recieve From SMS Service_${body}" loggingLevel="INFO" logName="com.fino.asynclog" />
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED in SMS_${exception.stacktrace}" loggingLevel="INFO" />
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED NEFT INIT SMS_${exception}" loggingLevel="INFO" logName="com.fino.asynclog" />
            </doCatch>
        </doTry>
    </route>

    <route id="MTAPostingRoute" streamCache="true">
        <from uri="seda:MTAPostingRoute"/>
        <doTry>
            <setBody><simple>${exchangeProperty.MTARequest}</simple></setBody>
            <setHeader name="MTAPostingToken"><simple>${exchangeProperty.Authorization}</simple></setHeader>
            <log
                    message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} |ESB_DirectDMTOrchestration Request Sent to Activemq MTAPosting_${body}"></log>
            <to pattern="InOnly" uri="activemqMTA:queue:MTAPosting"></to>
            <log
                    message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} |ESB_DirectDMTOrchestration Response Received from amq MTAPosting_"></log>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log
                        message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURRED while queue Insertion_${exception.stacktrace}"
                        loggingLevel="INFO" />
            </doCatch>
        </doTry>
    </route>

    <route id="RT_checkLimitIMPS">
        <from uri="direct:checkLimitIMPS"/>
        <doTry>
            <bean ref="splitTransactionBean" method="checkLimitDate"/>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Inside checkLimitIMPS route ${header.accnoForLimit}  Flag: ${header.dateDecideFlag}"
                 loggingLevel="INFO" logName="com.fino.asynclog"/>

            <choice>
                <when>
                    <simple>${header.dateDecideFlag} == 'Even'</simple>
                    <setBody>
                        <simple>{{ESB_IMPS_Limits_Query_Even}}</simple>
                    </setBody>

                </when>
                <when>
                    <simple>${header.dateDecideFlag} == 'Odd'</simple>
                    <setBody>
                        <simple>{{ESB_IMPS_Limits_Query_Odd}}</simple>
                    </setBody>

                </when>
            </choice>
            <transform>
                <simple>${body.replaceAll("#requestKey#",${header.accnoForLimit})}</simple>
            </transform>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration Before checkLimitIMPS DbBody_${body}"
                 loggingLevel="INFO" logName="com.fino.asynclog"/>
            <to uri="jdbc:esbDataSource"/>
            <log message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.Requestorid} | ESB_DirectDMTOrchestration DbBody_${body}"
                 loggingLevel="INFO" logName="com.fino.asynclog"/>
            <bean ref="splitTransactionBean" method="checkLimit"/>
            <choice>
                <when>
                    <simple>${header.countFlag} == 'true'</simple>
                    <setHeader name="impsLimitFlag">
                        <simple>on</simple>
                    </setHeader>
                </when>
                <otherwise>
                    <setHeader name="impsLimitFlag">
                        <simple>off</simple>
                    </setHeader>
                </otherwise>

            </choice>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UseRId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception Occured Route-checkLimitIMPS: ${exception.stacktrace}"></log>
            </doCatch>
        </doTry>

    </route>

    <route id="RT_InsertRouteLimits" streamCache="true">
        <from uri="seda:InsertRouteLimits?concurrentConsumers={{minConcurrentConsumers}}"/>
        <log message="X-Correlation-Id_${header.X-Correlation-Id} | UseRId_${header.RequestorId} | ESB_DirectDMTOrchestration InsertRouteLimits Flag: ${header.dateToDecide}"
             loggingLevel="INFO"/>
        <doTry>
            <choice>
                <when>
                    <simple>${header.accnoForLimit} != '0'</simple>
                    <choice>
                        <when>
                            <simple>${header.dateDecideFlag} == 'Even'</simple>
                            <setBody>
                                <simple>INSERT INTO
                                    ESB_Transactions..IMPS_Retail_Limits_Even(logtime,RRN,AccountNumber,responsecode,amount)
                                    values
                                    (GETDATE(),'${header.BankRRN}','${header.accnoForLimit}','${header.impsReturnCode}','${header.IMPSTxnAmount}')
                                </simple>
                            </setBody>

                        </when>
                        <when>
                            <simple>${header.dateDecideFlag} == 'Odd'</simple>
                            <setBody>
                                <simple>INSERT INTO
                                    ESB_Transactions..IMPS_Retail_Limits_Odd(logtime,RRN,AccountNumber,responsecode,amount)
                                    values
                                    (GETDATE(),'${header.BankRRN}','${header.accnoForLimit}','${header.impsReturnCode}','${header.IMPSTxnAmount}')
                                </simple>
                            </setBody>

                        </when>
                    </choice>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UseRId_${header.RequestorId} | ESB_DirectDMTOrchestration REQUEST SEND TO ESB DATABASE_${body}"
                         loggingLevel="INFO" logName="com.fino.asynclog"/>
                    <to uri="jdbc:esbDataSource"/>
                    <log message="X-Correlation-Id_${header.X-Correlation-Id} | UseRId_${header.RequestorId} | ESB_DirectDMTOrchestration InsertRouteLimits Row Update Count : ${header.CamelJdbcUpdateCount}"
                         loggingLevel="INFO" logName="com.fino.asynclog"/>
                </when>
            </choice>

            <doCatch>
                <exception>java.lang.Exception</exception>
                <log message="X-Correlation-Id_${header.X-Correlation-Id} | UseRId_${header.RequestorId} | ESB_DirectDMTOrchestration EXCEPTION OCCURED IN InsertRouteLimits DB REQUEST INSERTION_${exception}"
                     loggingLevel="INFO" logName="com.fino.asynclog"/>
            </doCatch>
        </doTry>
    </route>

    <route id="RT_SMS_Route_EKYC" streamCache="true">
        <from uri="seda:SendSMSEkyc?concurrentConsumers={{maxConcurrentConsumers}}"/>
        <log
                message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration INSIDE_SMS_Route_EKYC_${body}"
                loggingLevel="INFO" logName="com.fino.asynclog"/>
        <setBody>
            <simple>{"MethodId": "3","TellerID": "${header.RequestorId}","CustomerMobileNo":
                "${header.MobileNumForSMS}","EventId": "","NotifyParam":
                {"TemplateId":"4155","@Amount":"${header.ekycChargeAmount}"}}
            </simple>
        </setBody>
        <removeHeader name="CamelHttpMethod"/>
        <removeHeader name="CamelHttpUri"/>
        <removeHeader name="CamelRestletRequest"/>
        <removeHeader name="CamelRestletResponse"/>
        <removeHeader name="charset"/>
        <removeHeader name="org.restlet.http.headers"/>
        <removeHeader name="org.restlet.startTime"/>
        <setHeader name="Content-Type">
            <simple>application/json</simple>
        </setHeader>
        <setHeader name="CamelHttpMethod">
            <simple>POST</simple>
        </setHeader>
        <log
                message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Request Sent to SMS service after Ekyc Charge_${body}"
                loggingLevel="INFO" logName="com.fino.asynclog"/>
        <!-- <to uri="{{ESB_SMSService_FINO_URL_{{currentSetup}}}}" /> -->
        <setHeader name="CamelHttpMethod">
            <simple>POST</simple>
        </setHeader>
        <to uri="{{ESB_SMSService_FINO_Replica_URL_{{currentSetUp}}}}?headerFilterStrategy=#finoHeaderFilter&amp;httpClientConfigurerRef=myHttpClientConfigurer&amp;socketTimeout={{DEFAULT_TIMEOUT}}"/>
        <log
                message="X-Correlation-Id_${header.X-Correlation-Id} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Response Received from SMS after Ekyc Charge_${body}"
                loggingLevel="INFO" logName="com.fino.asynclog"/>
    </route>

    <route id="RT3_AddBeneficiarydbInsertion" streamCache="true">
        <from uri="direct:dbInsertion" />
        <setBody><simple>${header.AddBeneficiary}</simple></setBody>
        <setHeader name="beneficiaryBank">
            <simple>${body[beneficiaryBank]}</simple>
        </setHeader>
         <setHeader name="appId">
           <simple>${body[appId]}</simple>
        </setHeader>
        <setHeader name="beneficiaryMaxLimit">
            <simple>${body[beneficiaryMaxLimit]}</simple>
        </setHeader>
        <setHeader name="customerNumber">
            <simple>${body[customerNumber]}</simple>
        </setHeader>
        <setHeader name="beneficiaryType">
            <simple>${body[beneficiaryType]}</simple>
        </setHeader>
        <setHeader name="nickName">
            <simple>${body[nickName]}</simple>
        </setHeader>
        <setHeader name="beneficiaryAccount">
            <simple>${body[beneficiaryAccount]}</simple>
        </setHeader>
        <setHeader name="beneficiaryAccountType">
            <simple>${body[beneficiaryAccountType]}</simple>
        </setHeader>
        <setHeader name="beneficiaryName">
            <simple>${body[beneficiaryName]}</simple>
        </setHeader>
        <setHeader name="beneficiaryBank">
            <simple>${body[beneficiaryBank]}</simple>
        </setHeader>
        <setHeader name="beneficiaryBankIfsc">
            <simple>${body[beneficiaryBankIfsc]}</simple>
        </setHeader>
        <setHeader name="beneficiaryAddress1">
            <simple>${body[beneficiaryAddress1]}</simple>
        </setHeader>
        <setHeader name="beneficiaryState">
            <simple>${body[beneficiaryState]}</simple>
        </setHeader>
        <setHeader name="beneficiaryCity">
            <simple>${body[beneficiaryCity]}</simple>
        </setHeader>
        <setHeader name="beneficiaryZip">
            <simple>${body[beneficiaryZip]}</simple>
        </setHeader>
        <setHeader name="beneficiaryEmailId">
            <simple>${body[beneficiaryEmailId]}</simple>
        </setHeader>
        <setHeader name="beneficiaryMobileNumber">
            <simple>${body[beneficiaryMobileNumber]}</simple>
        </setHeader>
        <setHeader name="beneficiaryBankMicr">
            <simple>${body[beneficiaryBankMicr]}</simple>
        </setHeader>
        <setHeader name="verificationStatus">
            <simple>${body[verificationStatus]}</simple>
        </setHeader>
        <setHeader name="beneficiaryBankCity">
            <simple>${body[beneficiaryBankCity]}</simple>
        </setHeader>
        <setHeader name="beneficiaryBankBranch">
            <simple>${body[beneficiaryBankBranch]}</simple>
        </setHeader>
		<doTry>
     <setBody><simple>insert into BeneficiaryDetails(beneficiaryMaxLimit,appId,customerNumber,beneficiaryType,nickName,
     beneficiaryAccount,beneficiaryAccountType,beneficiaryName,beneficiaryBank,beneficiaryBankIfsc,beneficiaryAddress1,beneficiaryState,beneficiaryCity,beneficiaryZip,
     beneficiaryEmailId,beneficiaryMobileNumber,beneficiaryBankMicr,verificationStatus,beneficiaryBankCity,beneficiaryBankBranch,createdDateTime) 
     values ('${header.beneficiaryMaxLimit}','${header.appId}','${header.customerNumber}','${header.beneficiaryType}','${header.nickName}',
     '${header.beneficiaryAccount}','${header.beneficiaryAccountType}','${header.beneficiaryName}','${header.beneficiaryBank}','${header.beneficiaryBankIfsc}',
     '${header.beneficiaryAddress1}','${header.beneficiaryState}','${header.beneficiaryCity}','${header.beneficiaryZip}',
     '${header.beneficiaryEmailId}','${header.beneficiaryMobileNumber}','${header.beneficiaryBankMicr}','${header.verificationStatus}','${header.beneficiaryBankCity}','${header.beneficiaryBankBranch}','${date:now:yyyy-MM-dd HH:mm:ss}')</simple></setBody>
        <log message="X-Correlation-Id_${header.XCorrelationId} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Request Sent for db Insertion_${body}"/>
         <to uri="jdbc:esbDataSource" />
	<doCatch>
		<exception>java.lang.Exception</exception>
		<log message="X-Correlation-Id_${header.XCorrelationId} | UserId_${header.RequestorId} | ESB_DirectDMTOrchestration Exception Occured While db Insert_${exception.stacktrace}"/>
	</doCatch>
		 </doTry>
    </route>  


   

</routes>