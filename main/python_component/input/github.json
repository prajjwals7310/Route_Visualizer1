{
  "aws2-lambda": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "invokeFunction",
        "pojoRequest": "false",
        "region": "",
        "trustAllCertificates": "false",
        "awsLambdaClient": "",
        "basicPropertyBinding": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "accessKey": "",
        "secretKey": "",
        "function": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "invokeFunction",
        "pojoRequest": "false",
        "region": "",
        "trustAllCertificates": "false",
        "awsLambdaClient": "",
        "basicPropertyBinding": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "accessKey": "",
        "secretKey": "",
        "function": "",
        "synchronous": "false"
      }
    }
  },
  "atom": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "feedUri": "",
        "feedHeader": "true",
        "filter": "true",
        "lastUpdate": "",
        "password": "",
        "sendEmptyMessageWhenIdle": "false",
        "sortEntries": "false",
        "splitEntries": "true",
        "throttleEntries": "true",
        "username": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "feedUri": "",
        "feedHeader": "true",
        "filter": "true",
        "lastUpdate": "",
        "password": "",
        "sendEmptyMessageWhenIdle": "false",
        "sortEntries": "false",
        "splitEntries": "true",
        "throttleEntries": "true",
        "username": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "spring-batch": {
    "Consumer": {
      "endpoint_parameters": {
        "jobLauncher": "",
        "jobRegistry": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "jobName": "",
        "jobFromHeader": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "jobLauncher": "",
        "jobRegistry": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "jobName": "",
        "jobFromHeader": "false",
        "synchronous": "false"
      }
    }
  },
  "openstack-cinder": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    }
  },
  "cometd": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "extensions": "",
        "securityPolicy": "",
        "sslContextParameters": "",
        "sslKeyPassword": "",
        "sslKeystore": "",
        "sslPassword": "",
        "useGlobalSslContextParameters": "false",
        "host": "",
        "port": "",
        "channelName": "",
        "allowedOrigins": "*",
        "baseResource": "",
        "crossOriginFilterOn": "false",
        "filterPath": "",
        "interval": "",
        "jsonCommented": "true",
        "logLevel": "1",
        "maxInterval": "30000",
        "multiFrameInterval": "1500",
        "timeout": "240000",
        "sessionHeadersEnabled": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "disconnectLocalSession": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "extensions": "",
        "securityPolicy": "",
        "sslContextParameters": "",
        "sslKeyPassword": "",
        "sslKeystore": "",
        "sslPassword": "",
        "useGlobalSslContextParameters": "false",
        "host": "",
        "port": "",
        "channelName": "",
        "allowedOrigins": "*",
        "baseResource": "",
        "crossOriginFilterOn": "false",
        "filterPath": "",
        "interval": "",
        "jsonCommented": "true",
        "logLevel": "1",
        "maxInterval": "30000",
        "multiFrameInterval": "1500",
        "timeout": "240000",
        "sessionHeadersEnabled": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "disconnectLocalSession": "false",
        "synchronous": "false"
      }
    }
  },
  "aws-iam": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "iamClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "iamClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "aws-ddb": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonDDBClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "consistentRead": "false",
        "keyAttributeName": "",
        "keyAttributeType": "",
        "lazyStartProducer": "false",
        "operation": "PutItem",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "readCapacity": "",
        "region": "",
        "writeCapacity": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "tableName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonDDBClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "consistentRead": "false",
        "keyAttributeName": "",
        "keyAttributeType": "",
        "lazyStartProducer": "false",
        "operation": "PutItem",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "readCapacity": "",
        "region": "",
        "writeCapacity": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "tableName": "",
        "synchronous": "false"
      }
    }
  },
  "browse": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "aws2-msk": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "mskClient": "",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "mskClient": "",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "atomix-map": {
    "Consumer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "PUT",
        "key": "",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "ttl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "PUT",
        "key": "",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "ttl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "vertx": {
    "Consumer": {
      "endpoint_parameters": {
        "host": "",
        "port": "",
        "timeout": "60",
        "vertx": "",
        "vertxOptions": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "vertxFactory": "",
        "address": "",
        "pubSub": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "host": "",
        "port": "",
        "timeout": "60",
        "vertx": "",
        "vertxOptions": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "vertxFactory": "",
        "address": "",
        "pubSub": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "string-template": {
    "Consumer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "contentCache": "false",
        "delimiterStart": "<",
        "delimiterStop": ">",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "contentCache": "false",
        "delimiterStart": "<",
        "delimiterStop": ">",
        "synchronous": "false"
      }
    }
  },
  "jdbc": {
    "Consumer": {
      "endpoint_parameters": {
        "dataSource": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dataSourceName": "",
        "allowNamedParameters": "true",
        "outputClass": "",
        "outputType": "SelectList",
        "parameters": "",
        "readSize": "",
        "resetAutoCommit": "true",
        "transacted": "false",
        "useGetBytesForBlob": "false",
        "useHeadersAsParameters": "false",
        "useJDBC4ColumnNameAndLabel{zwsp}Semantics": "true",
        "beanRowMapper": "",
        "prepareStatementStrategy": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "dataSource": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dataSourceName": "",
        "allowNamedParameters": "true",
        "outputClass": "",
        "outputType": "SelectList",
        "parameters": "",
        "readSize": "",
        "resetAutoCommit": "true",
        "transacted": "false",
        "useGetBytesForBlob": "false",
        "useHeadersAsParameters": "false",
        "useJDBC4ColumnNameAndLabel{zwsp}Semantics": "true",
        "beanRowMapper": "",
        "prepareStatementStrategy": "",
        "synchronous": "false"
      }
    }
  },
  "fhir": {
    "Consumer": {
      "endpoint_parameters": {
        "encoding": "",
        "fhirVersion": "R4",
        "log": "false",
        "prettyPrint": "false",
        "serverUrl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "client": "",
        "clientFactory": "",
        "compress": "false",
        "configuration": "",
        "connectionTimeout": "10000",
        "deferModelScanning": "false",
        "fhirContext": "",
        "forceConformanceCheck": "false",
        "sessionCookie": "",
        "socketTimeout": "10000",
        "summary": "",
        "validationMode": "ONCE",
        "proxyHost": "",
        "proxyPassword": "",
        "proxyPort": "",
        "proxyUser": "",
        "accessToken": "",
        "password": "",
        "username": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "capabilities": "API to Fetch the capability statement for the server",
        "create": "API for the create operation, which creates a new resource instance on the server",
        "delete": "The IBaseMetaType class",
        "history": "API for the history method",
        "load-page": "API that Loads the previous/next bundle of resources from a paged set, using the link specified in the link type=next tag within the atom bundle",
        "meta": "API for the meta operations, which can be used to get, add and remove tags and other Meta elements from a resource or across the server",
        "operation": "API for extended FHIR operations https://www",
        "patch": "API for the patch operation, which performs a logical patch on a server resource",
        "read": "API method for read operations",
        "search": "API to search for resources matching a given set of criteria",
        "transaction": "API for sending a transaction (collection of resources) to the server to be executed as a single unit",
        "update": "API for the update operation, which performs a logical delete on a server resource",
        "validate": "API for validating resources",
        "ofType": "The model type",
        "resource": "",
        "resourceById": "*Optional*",
        "resourceConditionalByUrl": "The search URL to use. The format of this URL should be of the form ResourceTypeParameters, for example: Patientname=Smith&amp;identifier=13.2.4.11.4%7C847366",
        "onInstance": "Use HTTP GET verb",
        "onServer": "Use HTTP GET verb",
        "onType": "Use HTTP GET verb",
        "byUrl": "The search url",
        "next": "*Optional*  See ExtraParameters for a full list of parameters that can be passed, may be NULL",
        "previous": "*Optional*  See ExtraParameters for a full list of parameters that can be passed, may be NULL",
        "add": "The IBaseMetaType class",
        "getFromResource": "The IBaseMetaType class",
        "getFromServer": "The type of the meta datatype for the given FHIR model version (should be MetaDt.class or MetaType.class)",
        "getFromType": "The resource type e.g Patient",
        "onInstanceVersion": "Use HTTP GET verb",
        "processMessage": "The response class",
        "patchById": "The resource ID to patch",
        "patchByUrl": "The search URL to use. The format of this URL should be of the form ResourceTypeParameters, for example: Patientname=Smith&amp;identifier=13.2.4.11.4%7C847366",
        "resourceByUrl": "",
        "searchByUrl": "The URL to search for. Note that this URL may be complete (e.g. \\http://example.com/base/Patientname=foo) in which case the client's base URL will be ignored. Or it can be relative (e.g. Patientname=foo) in which case the client's base URL will be used.",
        "withBundle": "Bundle to use in the transaction",
        "withResources": "Resources to use in the transaction",
        "resourceBySearchUrl": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "encoding": "",
        "fhirVersion": "R4",
        "log": "false",
        "prettyPrint": "false",
        "serverUrl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "client": "",
        "clientFactory": "",
        "compress": "false",
        "configuration": "",
        "connectionTimeout": "10000",
        "deferModelScanning": "false",
        "fhirContext": "",
        "forceConformanceCheck": "false",
        "sessionCookie": "",
        "socketTimeout": "10000",
        "summary": "",
        "validationMode": "ONCE",
        "proxyHost": "",
        "proxyPassword": "",
        "proxyPort": "",
        "proxyUser": "",
        "accessToken": "",
        "password": "",
        "username": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "capabilities": "API to Fetch the capability statement for the server",
        "create": "API for the create operation, which creates a new resource instance on the server",
        "delete": "The IBaseMetaType class",
        "history": "API for the history method",
        "load-page": "API that Loads the previous/next bundle of resources from a paged set, using the link specified in the link type=next tag within the atom bundle",
        "meta": "API for the meta operations, which can be used to get, add and remove tags and other Meta elements from a resource or across the server",
        "operation": "API for extended FHIR operations https://www",
        "patch": "API for the patch operation, which performs a logical patch on a server resource",
        "read": "API method for read operations",
        "search": "API to search for resources matching a given set of criteria",
        "transaction": "API for sending a transaction (collection of resources) to the server to be executed as a single unit",
        "update": "API for the update operation, which performs a logical delete on a server resource",
        "validate": "API for validating resources",
        "ofType": "The model type",
        "resource": "",
        "resourceById": "*Optional*",
        "resourceConditionalByUrl": "The search URL to use. The format of this URL should be of the form ResourceTypeParameters, for example: Patientname=Smith&amp;identifier=13.2.4.11.4%7C847366",
        "onInstance": "Use HTTP GET verb",
        "onServer": "Use HTTP GET verb",
        "onType": "Use HTTP GET verb",
        "byUrl": "The search url",
        "next": "*Optional*  See ExtraParameters for a full list of parameters that can be passed, may be NULL",
        "previous": "*Optional*  See ExtraParameters for a full list of parameters that can be passed, may be NULL",
        "add": "The IBaseMetaType class",
        "getFromResource": "The IBaseMetaType class",
        "getFromServer": "The type of the meta datatype for the given FHIR model version (should be MetaDt.class or MetaType.class)",
        "getFromType": "The resource type e.g Patient",
        "onInstanceVersion": "Use HTTP GET verb",
        "processMessage": "The response class",
        "patchById": "The resource ID to patch",
        "patchByUrl": "The search URL to use. The format of this URL should be of the form ResourceTypeParameters, for example: Patientname=Smith&amp;identifier=13.2.4.11.4%7C847366",
        "resourceByUrl": "",
        "searchByUrl": "The URL to search for. Note that this URL may be complete (e.g. \\http://example.com/base/Patientname=foo) in which case the client's base URL will be ignored. Or it can be relative (e.g. Patientname=foo) in which case the client's base URL will be used.",
        "withBundle": "Bundle to use in the transaction",
        "withResources": "Resources to use in the transaction",
        "resourceBySearchUrl": ""
      }
    }
  },
  "nats": {
    "Consumer": {
      "endpoint_parameters": {
        "servers": "",
        "verbose": "false",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "topic": "",
        "connectionTimeout": "2000",
        "flushConnection": "true",
        "flushTimeout": "1000",
        "maxPingsOut": "2",
        "maxReconnectAttempts": "60",
        "noEcho": "false",
        "noRandomizeServers": "false",
        "pedantic": "false",
        "pingInterval": "120000",
        "reconnect": "true",
        "reconnectTimeWait": "2000",
        "requestCleanupInterval": "5000",
        "maxMessages": "",
        "poolSize": "10",
        "queueName": "",
        "replyToDisabled": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "replySubject": "",
        "connection": "",
        "synchronous": "false",
        "secure": "false",
        "sslContextParameters": "",
        "CamelNatsSID": "The SID of a consumed message.",
        "CamelNatsReplyTo": "The ReplyTo of a consumed message (may be null).",
        "CamelNatsSubject": "The Subject of a consumed message.",
        "CamelNatsQueueName": "The Queue name of a consumed message (may be null).",
        "CamelNatsMessageTimestamp": "The timestamp of a consumed message."
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "servers": "",
        "verbose": "false",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "topic": "",
        "connectionTimeout": "2000",
        "flushConnection": "true",
        "flushTimeout": "1000",
        "maxPingsOut": "2",
        "maxReconnectAttempts": "60",
        "noEcho": "false",
        "noRandomizeServers": "false",
        "pedantic": "false",
        "pingInterval": "120000",
        "reconnect": "true",
        "reconnectTimeWait": "2000",
        "requestCleanupInterval": "5000",
        "maxMessages": "",
        "poolSize": "10",
        "queueName": "",
        "replyToDisabled": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "replySubject": "",
        "connection": "",
        "synchronous": "false",
        "secure": "false",
        "sslContextParameters": "",
        "CamelNatsSID": "The SID of a consumed message.",
        "CamelNatsReplyTo": "The ReplyTo of a consumed message (may be null).",
        "CamelNatsSubject": "The Subject of a consumed message.",
        "CamelNatsQueueName": "The Queue name of a consumed message (may be null).",
        "CamelNatsMessageTimestamp": "The timestamp of a consumed message."
      }
    }
  },
  "ignite-compute": {
    "Consumer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "endpointId": "",
        "clusterGroupExpression": "",
        "computeName": "",
        "executionType": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "taskName": "",
        "timeoutMillis": "",
        "treatCollectionsAsCacheObjects": "false",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteComputeExecutionType": "IgniteComputeExecutionType enum",
        "CamelIgniteComputeParameters": "Any object or Collection of objects.",
        "CamelIgniteComputeReducer": "IgniteReducer",
        "CamelIgniteComputeAffinityCacheName": "String",
        "CamelIgniteComputeAffinityKey": "Object"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "endpointId": "",
        "clusterGroupExpression": "",
        "computeName": "",
        "executionType": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "taskName": "",
        "timeoutMillis": "",
        "treatCollectionsAsCacheObjects": "false",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteComputeExecutionType": "IgniteComputeExecutionType enum",
        "CamelIgniteComputeParameters": "Any object or Collection of objects.",
        "CamelIgniteComputeReducer": "IgniteReducer",
        "CamelIgniteComputeAffinityCacheName": "String",
        "CamelIgniteComputeAffinityKey": "Object"
      }
    }
  },
  "rest-swagger": {
    "Consumer": {
      "endpoint_parameters": {
        "basePath": "",
        "componentName": "",
        "consumes": "",
        "host": "",
        "lazyStartProducer": "false",
        "produces": "",
        "specificationUri": "swagger.json",
        "basicPropertyBinding": "false",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "operationId": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "basePath": "",
        "componentName": "",
        "consumes": "",
        "host": "",
        "lazyStartProducer": "false",
        "produces": "",
        "specificationUri": "swagger.json",
        "basicPropertyBinding": "false",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "operationId": "",
        "synchronous": "false"
      }
    }
  },
  "ehcache": {
    "Consumer": {
      "endpoint_parameters": {
        "cacheManager": "",
        "cacheManagerConfiguration": "",
        "configurationUri": "",
        "createCacheIfNotExist": "true",
        "bridgeErrorHandler": "false",
        "eventFiring": "ASYNCHRONOUS",
        "eventOrdering": "ORDERED",
        "eventTypes": "",
        "action": "",
        "key": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "configurations": "",
        "keyType": "",
        "valueType": "",
        "cacheName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "cacheManager": "",
        "cacheManagerConfiguration": "",
        "configurationUri": "",
        "createCacheIfNotExist": "true",
        "bridgeErrorHandler": "false",
        "eventFiring": "ASYNCHRONOUS",
        "eventOrdering": "ORDERED",
        "eventTypes": "",
        "action": "",
        "key": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "configurations": "",
        "keyType": "",
        "valueType": "",
        "cacheName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "aws2-sts": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "assumeRole",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "aws-global",
        "stsClient": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "assumeRole",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "aws-global",
        "stsClient": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "dropbox": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "accessToken": "",
        "client": "",
        "clientIdentifier": "",
        "localPath": "",
        "newRemotePath": "",
        "query": "",
        "remotePath": "",
        "uploadMode": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "accessToken": "",
        "client": "",
        "clientIdentifier": "",
        "localPath": "",
        "newRemotePath": "",
        "query": "",
        "remotePath": "",
        "uploadMode": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "debezium-mongodb": {
    "Consumer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "internalKeyConverter": "org.apache.kafka.connect.json.JsonConverter",
        "internalValueConverter": "org.apache.kafka.connect.json.JsonConverter",
        "offsetCommitPolicy": "io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy",
        "offsetCommitTimeoutMs": "5s",
        "offsetFlushIntervalMs": "60s",
        "offsetStorage": "org.apache.kafka.connect.storage.FileOffsetBackingStore",
        "offsetStorageFileName": "",
        "offsetStoragePartitions": "",
        "offsetStorageReplicationFactor": "",
        "offsetStorageTopic": "",
        "basicPropertyBinding": "false",
        "collectionExcludeList": "",
        "collectionIncludeList": "",
        "connectBackoffInitialDelayMs": "1s",
        "connectBackoffMaxDelayMs": "2m",
        "connectMaxAttempts": "16",
        "converters": "",
        "databaseExcludeList": "",
        "databaseHistoryFileFilename": "",
        "databaseIncludeList": "",
        "eventProcessingFailureHandling{zwsp}Mode": "fail",
        "fieldExcludeList": "",
        "fieldRenames": "",
        "heartbeatIntervalMs": "0ms",
        "heartbeatTopicsPrefix": "__debezium-heartbeat",
        "initialSyncMaxThreads": "1",
        "maxBatchSize": "2048",
        "maxQueueSize": "8192",
        "mongodbAuthsource": "admin",
        "mongodbConnectTimeoutMs": "10s",
        "mongodbHosts": "",
        "mongodbMembersAutoDiscover": "true",
        "mongodbName": "",
        "mongodbPassword": "",
        "mongodbPollIntervalMs": "30s",
        "mongodbServerSelectionTimeout{zwsp}Ms": "30s",
        "mongodbSocketTimeoutMs": "0ms",
        "mongodbSslEnabled": "false",
        "mongodbSslInvalidHostname{zwsp}Allowed": "false",
        "mongodbUser": "",
        "pollIntervalMs": "500ms",
        "provideTransactionMetadata": "false",
        "queryFetchSize": "0",
        "retriableRestartConnectorWait{zwsp}Ms": "10s",
        "sanitizeFieldNames": "false",
        "skippedOperations": "",
        "snapshotDelayMs": "0ms",
        "snapshotFetchSize": "",
        "snapshotMode": "initial",
        "sourceStructVersion": "v2",
        "tombstonesOnDelete": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "DebeziumConstants.HEADER_IDENTIFIER": "String",
        "DebeziumConstants.HEADER_KEY": "Struct",
        "DebeziumConstants.HEADER_SOURCE_METADATA": "Map",
        "DebeziumConstants.HEADER_OPERATION": "String",
        "DebeziumConstants.HEADER_TIMESTAMP": "Long"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "internalKeyConverter": "org.apache.kafka.connect.json.JsonConverter",
        "internalValueConverter": "org.apache.kafka.connect.json.JsonConverter",
        "offsetCommitPolicy": "io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy",
        "offsetCommitTimeoutMs": "5s",
        "offsetFlushIntervalMs": "60s",
        "offsetStorage": "org.apache.kafka.connect.storage.FileOffsetBackingStore",
        "offsetStorageFileName": "",
        "offsetStoragePartitions": "",
        "offsetStorageReplicationFactor": "",
        "offsetStorageTopic": "",
        "basicPropertyBinding": "false",
        "collectionExcludeList": "",
        "collectionIncludeList": "",
        "connectBackoffInitialDelayMs": "1s",
        "connectBackoffMaxDelayMs": "2m",
        "connectMaxAttempts": "16",
        "converters": "",
        "databaseExcludeList": "",
        "databaseHistoryFileFilename": "",
        "databaseIncludeList": "",
        "eventProcessingFailureHandling{zwsp}Mode": "fail",
        "fieldExcludeList": "",
        "fieldRenames": "",
        "heartbeatIntervalMs": "0ms",
        "heartbeatTopicsPrefix": "__debezium-heartbeat",
        "initialSyncMaxThreads": "1",
        "maxBatchSize": "2048",
        "maxQueueSize": "8192",
        "mongodbAuthsource": "admin",
        "mongodbConnectTimeoutMs": "10s",
        "mongodbHosts": "",
        "mongodbMembersAutoDiscover": "true",
        "mongodbName": "",
        "mongodbPassword": "",
        "mongodbPollIntervalMs": "30s",
        "mongodbServerSelectionTimeout{zwsp}Ms": "30s",
        "mongodbSocketTimeoutMs": "0ms",
        "mongodbSslEnabled": "false",
        "mongodbSslInvalidHostname{zwsp}Allowed": "false",
        "mongodbUser": "",
        "pollIntervalMs": "500ms",
        "provideTransactionMetadata": "false",
        "queryFetchSize": "0",
        "retriableRestartConnectorWait{zwsp}Ms": "10s",
        "sanitizeFieldNames": "false",
        "skippedOperations": "",
        "snapshotDelayMs": "0ms",
        "snapshotFetchSize": "",
        "snapshotMode": "initial",
        "sourceStructVersion": "v2",
        "tombstonesOnDelete": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "DebeziumConstants.HEADER_IDENTIFIER": "String",
        "DebeziumConstants.HEADER_KEY": "Struct",
        "DebeziumConstants.HEADER_SOURCE_METADATA": "Map",
        "DebeziumConstants.HEADER_OPERATION": "String",
        "DebeziumConstants.HEADER_TIMESTAMP": "Long"
      }
    }
  },
  "ignite-idgen": {
    "Consumer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "batchSize": "",
        "initialValue": "0",
        "operation": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "batchSize": "",
        "initialValue": "0",
        "operation": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "synchronous": "false"
      }
    }
  },
  "kubernetes-persistent-volumes-claims": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "soroush": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "authorizationToken": "",
        "action": "",
        "connectionTimeout": "30000",
        "maxConnectionRetry": "4",
        "concurrentConsumers": "1",
        "queueCapacityPerThread": "0",
        "exceptionHandler": "",
        "exchangePattern": "",
        "autoDownload": "false",
        "autoUploadFile": "true",
        "downloadThumbnail": "true",
        "forceDownload": "false",
        "forceUpload": "false",
        "synchronous": "false",
        "backOffStrategy": "Exponential",
        "maxRetryWaitingTime": "3600000",
        "reconnectIdleConnectionTimeout": "300000",
        "retryExponentialCoefficient": "2",
        "retryLinearIncrement": "10000",
        "retryWaitingTime": "1000"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "authorizationToken": "",
        "action": "",
        "connectionTimeout": "30000",
        "maxConnectionRetry": "4",
        "concurrentConsumers": "1",
        "queueCapacityPerThread": "0",
        "exceptionHandler": "",
        "exchangePattern": "",
        "autoDownload": "false",
        "autoUploadFile": "true",
        "downloadThumbnail": "true",
        "forceDownload": "false",
        "forceUpload": "false",
        "synchronous": "false",
        "backOffStrategy": "Exponential",
        "maxRetryWaitingTime": "3600000",
        "reconnectIdleConnectionTimeout": "300000",
        "retryExponentialCoefficient": "2",
        "retryLinearIncrement": "10000",
        "retryWaitingTime": "1000"
      }
    }
  },
  "git": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "localPath": "",
        "branchName": "",
        "password": "",
        "remoteName": "",
        "remotePath": "",
        "tagName": "",
        "username": "",
        "type": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "allowEmpty": "true",
        "operation": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "localPath": "",
        "branchName": "",
        "password": "",
        "remoteName": "",
        "remotePath": "",
        "tagName": "",
        "username": "",
        "type": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "allowEmpty": "true",
        "operation": "",
        "synchronous": "false"
      }
    }
  },
  "jpa": {
    "Consumer": {
      "endpoint_parameters": {
        "entityManagerFactory": "",
        "joinTransaction": "true",
        "sharedEntityManager": "false",
        "transactionManager": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "entityType": "",
        "maximumResults": "-1",
        "namedQuery": "",
        "nativeQuery": "",
        "persistenceUnit": "camel",
        "query": "",
        "resultClass": "",
        "consumeDelete": "true",
        "consumeLockEntity": "true",
        "deleteHandler": "",
        "lockModeType": "PESSIMISTIC_WRITE",
        "maxMessagesPerPoll": "",
        "preDeleteHandler": "",
        "sendEmptyMessageWhenIdle": "false",
        "skipLockedEntity": "false",
        "transacted": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "parameters": "",
        "pollStrategy": "",
        "findEntity": "false",
        "flushOnSend": "true",
        "remove": "false",
        "useExecuteUpdate": "",
        "usePersist": "false",
        "usePassedInEntityManager": "false",
        "entityManagerProperties": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "entityManagerFactory": "",
        "joinTransaction": "true",
        "sharedEntityManager": "false",
        "transactionManager": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "entityType": "",
        "maximumResults": "-1",
        "namedQuery": "",
        "nativeQuery": "",
        "persistenceUnit": "camel",
        "query": "",
        "resultClass": "",
        "consumeDelete": "true",
        "consumeLockEntity": "true",
        "deleteHandler": "",
        "lockModeType": "PESSIMISTIC_WRITE",
        "maxMessagesPerPoll": "",
        "preDeleteHandler": "",
        "sendEmptyMessageWhenIdle": "false",
        "skipLockedEntity": "false",
        "transacted": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "parameters": "",
        "pollStrategy": "",
        "findEntity": "false",
        "flushOnSend": "true",
        "remove": "false",
        "useExecuteUpdate": "",
        "usePersist": "false",
        "usePassedInEntityManager": "false",
        "entityManagerProperties": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "kubernetes-secrets": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "elasticsearch-rest": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "client": "",
        "connectionTimeout": "30000",
        "enableSniffer": "false",
        "hostAddresses": "",
        "maxRetryTimeout": "30000",
        "sniffAfterFailureDelay": "60000",
        "snifferInterval": "300000",
        "socketTimeout": "30000",
        "enableSSL": "false",
        "password": "",
        "user": "",
        "clusterName": "",
        "disconnect": "false",
        "from": "",
        "indexName": "",
        "operation": "",
        "scrollKeepAliveMs": "60000",
        "size": "",
        "useScroll": "false",
        "waitForActiveShards": "1",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "client": "",
        "connectionTimeout": "30000",
        "enableSniffer": "false",
        "hostAddresses": "",
        "maxRetryTimeout": "30000",
        "sniffAfterFailureDelay": "60000",
        "snifferInterval": "300000",
        "socketTimeout": "30000",
        "enableSSL": "false",
        "password": "",
        "user": "",
        "clusterName": "",
        "disconnect": "false",
        "from": "",
        "indexName": "",
        "operation": "",
        "scrollKeepAliveMs": "60000",
        "size": "",
        "useScroll": "false",
        "waitForActiveShards": "1",
        "synchronous": "false"
      }
    }
  },
  "aws2-s3": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonS3Client": "",
        "autoCreateBucket": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "overrideEndpoint": "false",
        "pojoRequest": "false",
        "policy": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "uriEndpointOverride": "",
        "useIAMCredentials": "false",
        "customerAlgorithm": "",
        "customerKeyId": "",
        "customerKeyMD5": "",
        "bridgeErrorHandler": "false",
        "deleteAfterRead": "true",
        "delimiter": "",
        "destinationBucket": "",
        "destinationBucketPrefix": "",
        "destinationBucketSuffix": "",
        "fileName": "",
        "includeBody": "true",
        "includeFolders": "true",
        "moveAfterRead": "false",
        "prefix": "",
        "autocloseBody": "true",
        "deleteAfterWrite": "false",
        "keyName": "",
        "lazyStartProducer": "false",
        "multiPartUpload": "false",
        "operation": "",
        "partSize": "26214400",
        "storageClass": "",
        "awsKMSKeyId": "",
        "useAwsKMS": "false",
        "useCustomerKey": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "bucketNameOrArn": "",
        "maxConnections": "60",
        "maxMessagesPerPoll": "10",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonS3Client": "",
        "autoCreateBucket": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "overrideEndpoint": "false",
        "pojoRequest": "false",
        "policy": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "uriEndpointOverride": "",
        "useIAMCredentials": "false",
        "customerAlgorithm": "",
        "customerKeyId": "",
        "customerKeyMD5": "",
        "bridgeErrorHandler": "false",
        "deleteAfterRead": "true",
        "delimiter": "",
        "destinationBucket": "",
        "destinationBucketPrefix": "",
        "destinationBucketSuffix": "",
        "fileName": "",
        "includeBody": "true",
        "includeFolders": "true",
        "moveAfterRead": "false",
        "prefix": "",
        "autocloseBody": "true",
        "deleteAfterWrite": "false",
        "keyName": "",
        "lazyStartProducer": "false",
        "multiPartUpload": "false",
        "operation": "",
        "partSize": "26214400",
        "storageClass": "",
        "awsKMSKeyId": "",
        "useAwsKMS": "false",
        "useCustomerKey": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "bucketNameOrArn": "",
        "maxConnections": "60",
        "maxMessagesPerPoll": "10",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "openstack-glance": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "username": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "username": "",
        "synchronous": "false"
      }
    }
  },
  "hazelcast-topic": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "reliable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "reliable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "aws-kms": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "kmsClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "kmsClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "atomix-multimap": {
    "Consumer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "PUT",
        "key": "",
        "lazyStartProducer": "false",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "ttl": "",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "PUT",
        "key": "",
        "lazyStartProducer": "false",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "ttl": "",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "synchronous": "false"
      }
    }
  },
  "velocity": {
    "Consumer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "velocityEngine": "",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "loaderCache": "true",
        "propertiesFile": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "velocityEngine": "",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "loaderCache": "true",
        "propertiesFile": "",
        "synchronous": "false"
      }
    }
  },
  "arangodb": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "documentCollection": "",
        "edgeCollection": "",
        "graph": "",
        "host": "",
        "lazyStartProducer": "false",
        "operation": "",
        "port": "",
        "vertexCollection": "",
        "basicPropertyBinding": "false",
        "password": "",
        "user": "",
        "database": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "documentCollection": "",
        "edgeCollection": "",
        "graph": "",
        "host": "",
        "lazyStartProducer": "false",
        "operation": "",
        "port": "",
        "vertexCollection": "",
        "basicPropertyBinding": "false",
        "password": "",
        "user": "",
        "database": "",
        "synchronous": "false"
      }
    }
  },
  "ignite-events": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "basicPropertyBinding": "false",
        "endpointId": "",
        "clusterGroupExpression": "",
        "events": "EVTS_ALL",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "basicPropertyBinding": "false",
        "endpointId": "",
        "clusterGroupExpression": "",
        "events": "EVTS_ALL",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "metrics": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "metricRegistry": "",
        "metricsType": "",
        "metricsName": "",
        "action": "",
        "decrement": "",
        "increment": "",
        "mark": "",
        "subject": "",
        "value": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "metricRegistry": "",
        "metricsType": "",
        "metricsName": "",
        "action": "",
        "decrement": "",
        "increment": "",
        "mark": "",
        "subject": "",
        "value": "",
        "synchronous": "false"
      }
    }
  },
  "jt400": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionPool": "",
        "userID": "",
        "password": "",
        "systemName": "",
        "objectPath": "",
        "type": "",
        "ccsid": "",
        "format": "text",
        "guiAvailable": "false",
        "keyed": "false",
        "searchKey": "",
        "messageAction": "OLD",
        "readTimeout": "30000",
        "searchType": "EQ",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "outputFieldsIdxArray": "",
        "outputFieldsLengthArray": "",
        "procedureName": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "secured": "false",
        "Header constant": "Type",
        "Jt400Endpoint.SENDER_INFORMATION": "String",
        "Jt400Endpoint.MESSAGE_ID": "String",
        "Jt400Endpoint.MESSAGE_FILE": "String",
        "Jt400Endpoint.MESSAGE_TYPE": "Integer"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionPool": "",
        "userID": "",
        "password": "",
        "systemName": "",
        "objectPath": "",
        "type": "",
        "ccsid": "",
        "format": "text",
        "guiAvailable": "false",
        "keyed": "false",
        "searchKey": "",
        "messageAction": "OLD",
        "readTimeout": "30000",
        "searchType": "EQ",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "outputFieldsIdxArray": "",
        "outputFieldsLengthArray": "",
        "procedureName": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "secured": "false",
        "Header constant": "Type",
        "Jt400Endpoint.SENDER_INFORMATION": "String",
        "Jt400Endpoint.MESSAGE_ID": "String",
        "Jt400Endpoint.MESSAGE_FILE": "String",
        "Jt400Endpoint.MESSAGE_TYPE": "Integer"
      }
    }
  },
  "kudu": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "tableName": "",
        "operation": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "tableName": "",
        "operation": "",
        "synchronous": "false"
      }
    }
  },
  "openstack-swift": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    }
  },
  "microprofile-metrics": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "metricRegistry": "",
        "metricType": "",
        "metricName": "",
        "action": "",
        "counterIncrement": "",
        "description": "",
        "displayName": "",
        "gaugeDecrement": "",
        "gaugeIncrement": "",
        "gaugeValue": "",
        "mark": "",
        "metricUnit": "",
        "tags": "",
        "value": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "metricRegistry": "",
        "metricType": "",
        "metricName": "",
        "action": "",
        "counterIncrement": "",
        "description": "",
        "displayName": "",
        "gaugeDecrement": "",
        "gaugeIncrement": "",
        "gaugeValue": "",
        "mark": "",
        "metricUnit": "",
        "tags": "",
        "value": "",
        "synchronous": "false"
      }
    }
  },
  "lucene": {
    "Consumer": {
      "endpoint_parameters": {
        "analyzer": "",
        "indexDir": "",
        "lazyStartProducer": "false",
        "maxHits": "",
        "srcDir": "",
        "basicPropertyBinding": "false",
        "config": "",
        "host": "",
        "operation": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "analyzer": "",
        "indexDir": "",
        "lazyStartProducer": "false",
        "maxHits": "",
        "srcDir": "",
        "basicPropertyBinding": "false",
        "config": "",
        "host": "",
        "operation": "",
        "synchronous": "false"
      }
    }
  },
  "ldif": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "ldapConnectionName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "ldapConnectionName": "",
        "synchronous": "false"
      }
    }
  },
  "xslt": {
    "Consumer": {
      "endpoint_parameters": {
        "contentCache": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "transformerFactoryClass": "",
        "transformerFactory{zwsp}ConfigurationStrategy": "",
        "uriResolver": "",
        "uriResolverFactory": "",
        "resourceUri": "",
        "deleteOutputFile": "false",
        "failOnNullBody": "true",
        "output": "string",
        "transformerCacheSize": "0",
        "entityResolver": "",
        "errorListener": "",
        "resultHandlerFactory": "",
        "synchronous": "false",
        "transformerFactory": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "contentCache": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "transformerFactoryClass": "",
        "transformerFactory{zwsp}ConfigurationStrategy": "",
        "uriResolver": "",
        "uriResolverFactory": "",
        "resourceUri": "",
        "deleteOutputFile": "false",
        "failOnNullBody": "true",
        "output": "string",
        "transformerCacheSize": "0",
        "entityResolver": "",
        "errorListener": "",
        "resultHandlerFactory": "",
        "synchronous": "false",
        "transformerFactory": ""
      }
    }
  },
  "scheduler": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "concurrentTasks": "1",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "concurrentTasks": "1",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "sql-stored": {
    "Consumer": {
      "endpoint_parameters": {
        "dataSource": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "template": "",
        "batch": "false",
        "function": "false",
        "noop": "false",
        "outputHeader": "",
        "useMessageBodyForTemplate": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "dataSource": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "template": "",
        "batch": "false",
        "function": "false",
        "noop": "false",
        "outputHeader": "",
        "useMessageBodyForTemplate": "false",
        "synchronous": "false"
      }
    }
  },
  "crypto-cms": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "envelopedDataDecryptor{zwsp}Configuration": "",
        "signedDataVerifier{zwsp}Configuration": "",
        "cryptoOperation": "",
        "keyStore": "",
        "keyStoreParameters": "",
        "synchronous": "false",
        "password": "",
        "fromBase64": "false",
        "contentEncryptionAlgorithm": "",
        "originatorInformationProvider": "",
        "recipient": "",
        "secretKeyLength": "",
        "unprotectedAttributesGenerator{zwsp}Provider": "",
        "toBase64": "false",
        "includeContent": "true",
        "signer": "",
        "signedDataHeaderBase64": "false",
        "verifySignaturesOfAllSigners": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "envelopedDataDecryptor{zwsp}Configuration": "",
        "signedDataVerifier{zwsp}Configuration": "",
        "cryptoOperation": "",
        "keyStore": "",
        "keyStoreParameters": "",
        "synchronous": "false",
        "password": "",
        "fromBase64": "false",
        "contentEncryptionAlgorithm": "",
        "originatorInformationProvider": "",
        "recipient": "",
        "secretKeyLength": "",
        "unprotectedAttributesGenerator{zwsp}Provider": "",
        "toBase64": "false",
        "includeContent": "true",
        "signer": "",
        "signedDataHeaderBase64": "false",
        "verifySignaturesOfAllSigners": "true"
      }
    }
  },
  "ignite-cache": {
    "Consumer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "cacheName": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "autoUnsubscribe": "true",
        "fireExistingQueryResults": "false",
        "oneExchangePerUpdate": "true",
        "pageSize": "1",
        "query": "",
        "remoteFilter": "",
        "timeInterval": "0",
        "exceptionHandler": "",
        "exchangePattern": "",
        "cachePeekMode": "ALL",
        "failIfInexistentCache": "false",
        "operation": "",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteCacheKey": "String",
        "CamelIgniteCacheQuery": "Query",
        "CamelIgniteCacheOperation": "IgniteCacheOperation enum",
        "CamelIgniteCachePeekMode": "CachePeekMode enum",
        "CamelIgniteCacheEventType": "int (EventType constants)",
        "CamelIgniteCacheName": "String",
        "CamelIgniteCacheOldValue": "Object"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "cacheName": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "autoUnsubscribe": "true",
        "fireExistingQueryResults": "false",
        "oneExchangePerUpdate": "true",
        "pageSize": "1",
        "query": "",
        "remoteFilter": "",
        "timeInterval": "0",
        "exceptionHandler": "",
        "exchangePattern": "",
        "cachePeekMode": "ALL",
        "failIfInexistentCache": "false",
        "operation": "",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteCacheKey": "String",
        "CamelIgniteCacheQuery": "Query",
        "CamelIgniteCacheOperation": "IgniteCacheOperation enum",
        "CamelIgniteCachePeekMode": "CachePeekMode enum",
        "CamelIgniteCacheEventType": "int (EventType constants)",
        "CamelIgniteCacheName": "String",
        "CamelIgniteCacheOldValue": "Object"
      }
    }
  },
  "reactive-streams": {
    "Consumer": {
      "endpoint_parameters": {
        "threadPoolMaxSize": "10",
        "threadPoolMinSize": "",
        "threadPoolName": "CamelReactiveStreamsWorker",
        "bridgeErrorHandler": "false",
        "backpressureStrategy": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "reactiveStreamsEngine{zwsp}Configuration": "",
        "serviceType": "",
        "stream": "",
        "concurrentConsumers": "1",
        "exchangesRefillLowWatermark": "0.25",
        "forwardOnComplete": "false",
        "forwardOnError": "false",
        "maxInflightExchanges": "128",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "threadPoolMaxSize": "10",
        "threadPoolMinSize": "",
        "threadPoolName": "CamelReactiveStreamsWorker",
        "bridgeErrorHandler": "false",
        "backpressureStrategy": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "reactiveStreamsEngine{zwsp}Configuration": "",
        "serviceType": "",
        "stream": "",
        "concurrentConsumers": "1",
        "exchangesRefillLowWatermark": "0.25",
        "forwardOnComplete": "false",
        "forwardOnError": "false",
        "maxInflightExchanges": "128",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "google-mail": {
    "Consumer": {
      "endpoint_parameters": {
        "applicationName": "",
        "clientId": "",
        "configuration": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "attachments": "The attachments collection of methods",
        "drafts": "The drafts collection of methods",
        "history": "The history collection of methods",
        "labels": "The labels collection of methods",
        "messages": "The messages collection of methods",
        "threads": "The threads collection of methods",
        "users": "The users collection of methods",
        "get": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "create": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "delete": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "list": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "send": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "update": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "patch": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "batchDelete": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "batchModify": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "gmailImport": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "insert": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "modify": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "trash": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "untrash": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "getProfile": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "stop": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "watch": "The user's email address. The special value me can be used to indicate the authenticated user. default: me"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "applicationName": "",
        "clientId": "",
        "configuration": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "attachments": "The attachments collection of methods",
        "drafts": "The drafts collection of methods",
        "history": "The history collection of methods",
        "labels": "The labels collection of methods",
        "messages": "The messages collection of methods",
        "threads": "The threads collection of methods",
        "users": "The users collection of methods",
        "get": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "create": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "delete": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "list": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "send": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "update": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "patch": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "batchDelete": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "batchModify": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "gmailImport": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "insert": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "modify": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "trash": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "untrash": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "getProfile": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "stop": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "watch": "The user's email address. The special value me can be used to indicate the authenticated user. default: me"
      }
    }
  },
  "undertow": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "muteException": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hostOptions": "",
        "undertowHttpBinding": "",
        "allowedRoles": "",
        "securityConfiguration": "",
        "securityProvider": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "httpURI": "",
        "useStreaming": "false",
        "accessLog": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "optionsEnabled": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "handlers": "",
        "cookieHandler": "",
        "keepAlive": "true",
        "options": "",
        "preserveHostHeader": "true",
        "reuseAddresses": "true",
        "tcpNoDelay": "true",
        "throwExceptionOnFailure": "true",
        "transferException": "false",
        "accessLogReceiver": "",
        "headerFilterStrategy": "",
        "synchronous": "false",
        "fireWebSocketChannelEvents": "false",
        "sendTimeout": "30000",
        "sendToAll": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "muteException": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hostOptions": "",
        "undertowHttpBinding": "",
        "allowedRoles": "",
        "securityConfiguration": "",
        "securityProvider": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "httpURI": "",
        "useStreaming": "false",
        "accessLog": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "optionsEnabled": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "handlers": "",
        "cookieHandler": "",
        "keepAlive": "true",
        "options": "",
        "preserveHostHeader": "true",
        "reuseAddresses": "true",
        "tcpNoDelay": "true",
        "throwExceptionOnFailure": "true",
        "transferException": "false",
        "accessLogReceiver": "",
        "headerFilterStrategy": "",
        "synchronous": "false",
        "fireWebSocketChannelEvents": "false",
        "sendTimeout": "30000",
        "sendToAll": ""
      }
    }
  },
  "influxdb": {
    "Consumer": {
      "endpoint_parameters": {
        "influxDB": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionBean": "",
        "batch": "false",
        "databaseName": "",
        "operation": "insert",
        "query": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "influxDB": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionBean": "",
        "batch": "false",
        "databaseName": "",
        "operation": "insert",
        "query": "",
        "synchronous": "false"
      }
    }
  },
  "kubernetes-pods": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "xmpp": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "participant": "",
        "login": "true",
        "nickname": "",
        "pubsub": "false",
        "room": "",
        "serviceName": "",
        "testConnectionOnStartup": "true",
        "createAccount": "false",
        "resource": "Camel",
        "connectionPollDelay": "10",
        "doc": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "connectionConfig": "",
        "synchronous": "false",
        "headerFilterStrategy": "",
        "password": "",
        "roomPassword": "",
        "user": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "participant": "",
        "login": "true",
        "nickname": "",
        "pubsub": "false",
        "room": "",
        "serviceName": "",
        "testConnectionOnStartup": "true",
        "createAccount": "false",
        "resource": "Camel",
        "connectionPollDelay": "10",
        "doc": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "connectionConfig": "",
        "synchronous": "false",
        "headerFilterStrategy": "",
        "password": "",
        "roomPassword": "",
        "user": ""
      }
    }
  },
  "yammer": {
    "Consumer": {
      "endpoint_parameters": {
        "useJson": "false",
        "bridgeErrorHandler": "false",
        "delay": "5000",
        "limit": "-1",
        "newerThan": "-1",
        "olderThan": "-1",
        "threaded": "",
        "userId": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "requestor": "",
        "accessToken": "",
        "consumerKey": "",
        "consumerSecret": "",
        "function": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "useJson": "false",
        "bridgeErrorHandler": "false",
        "delay": "5000",
        "limit": "-1",
        "newerThan": "-1",
        "olderThan": "-1",
        "threaded": "",
        "userId": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "requestor": "",
        "accessToken": "",
        "consumerKey": "",
        "consumerSecret": "",
        "function": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "aws2-kinesis": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonKinesisClient": "",
        "autoDiscoverClient": "true",
        "cborEnabled": "true",
        "configuration": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "bridgeErrorHandler": "false",
        "iteratorType": "TRIM_HORIZON",
        "maxResultsPerRequest": "1",
        "sequenceNumber": "",
        "shardClosed": "ignore",
        "shardId": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "streamName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonKinesisClient": "",
        "autoDiscoverClient": "true",
        "cborEnabled": "true",
        "configuration": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "bridgeErrorHandler": "false",
        "iteratorType": "TRIM_HORIZON",
        "maxResultsPerRequest": "1",
        "sequenceNumber": "",
        "shardClosed": "ignore",
        "shardId": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "streamName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "optaplanner": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configFile": "",
        "problemId": "1L",
        "solverId": "DEFAULT_SOLVER",
        "useSolverManager": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "async": "false",
        "threadPoolSize": "10",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configFile": "",
        "problemId": "1L",
        "solverId": "DEFAULT_SOLVER",
        "useSolverManager": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "async": "false",
        "threadPoolSize": "10",
        "synchronous": "false"
      }
    }
  },
  "beanstalk": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionSettingsFactory": "",
        "connectionSettings": "",
        "command": "",
        "jobDelay": "0",
        "jobPriority": "1000",
        "jobTimeToRun": "60",
        "awaitJob": "true",
        "onFailure": "",
        "sendEmptyMessageWhenIdle": "false",
        "useBlockIO": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionSettingsFactory": "",
        "connectionSettings": "",
        "command": "",
        "jobDelay": "0",
        "jobPriority": "1000",
        "jobTimeToRun": "60",
        "awaitJob": "true",
        "onFailure": "",
        "sendEmptyMessageWhenIdle": "false",
        "useBlockIO": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "grape": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "patchesRepository": "",
        "defaultCoordinates": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "patchesRepository": "",
        "defaultCoordinates": "",
        "synchronous": "false"
      }
    }
  },
  "debezium-mysql": {
    "Consumer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "internalKeyConverter": "org.apache.kafka.connect.json.JsonConverter",
        "internalValueConverter": "org.apache.kafka.connect.json.JsonConverter",
        "offsetCommitPolicy": "io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy",
        "offsetCommitTimeoutMs": "5s",
        "offsetFlushIntervalMs": "60s",
        "offsetStorage": "org.apache.kafka.connect.storage.FileOffsetBackingStore",
        "offsetStorageFileName": "",
        "offsetStoragePartitions": "",
        "offsetStorageReplicationFactor": "",
        "offsetStorageTopic": "",
        "basicPropertyBinding": "false",
        "bigintUnsignedHandlingMode": "long",
        "binaryHandlingMode": "bytes",
        "binlogBufferSize": "0",
        "columnBlacklist": "",
        "columnExcludeList": "",
        "columnIncludeList": "",
        "connectKeepAlive": "true",
        "connectKeepAliveIntervalMs": "1m",
        "connectTimeoutMs": "30s",
        "databaseExcludeList": "",
        "databaseHistory": "io.debezium.relational.history.FileDatabaseHistory",
        "databaseHistoryFileFilename": "",
        "databaseHistoryKafkaBootstrap{zwsp}Servers": "",
        "databaseHistoryKafkaRecovery{zwsp}Attempts": "100",
        "databaseHistoryKafkaRecovery{zwsp}PollIntervalMs": "100ms",
        "databaseHistoryKafkaTopic": "",
        "databaseHistorySkipUnparseable{zwsp}Ddl": "false",
        "databaseHistoryStoreOnly{zwsp}MonitoredTablesDdl": "false",
        "databaseHostname": "",
        "databaseIncludeList": "",
        "databaseInitialStatements": "",
        "databaseJdbcDriver": "class com.mysql.cj.jdbc.Driver",
        "databasePassword": "",
        "databasePort": "3306",
        "databaseServerId": "",
        "databaseServerIdOffset": "10000",
        "databaseServerName": "",
        "databaseSslKeystore": "",
        "databaseSslKeystorePassword": "",
        "databaseSslMode": "disabled",
        "databaseSslTruststore": "",
        "databaseSslTruststorePassword": "",
        "databaseUser": "",
        "decimalHandlingMode": "precise",
        "enableTimeAdjuster": "true",
        "eventDeserializationFailure{zwsp}HandlingMode": "fail",
        "eventProcessingFailureHandling{zwsp}Mode": "fail",
        "gtidNewChannelPosition": "earliest",
        "gtidSourceExcludes": "",
        "gtidSourceFilterDmlEvents": "true",
        "gtidSourceIncludes": "",
        "heartbeatIntervalMs": "0ms",
        "heartbeatTopicsPrefix": "__debezium-heartbeat",
        "includeQuery": "false",
        "includeSchemaChanges": "true",
        "inconsistentSchemaHandlingMode": "fail",
        "maxBatchSize": "2048",
        "maxQueueSize": "8192",
        "messageKeyColumns": "",
        "pollIntervalMs": "500ms",
        "skippedOperations": "",
        "snapshotDelayMs": "0ms",
        "snapshotFetchSize": "",
        "snapshotLockingMode": "minimal",
        "snapshotMode": "initial",
        "snapshotNewTables": "off",
        "snapshotSelectStatement{zwsp}Overrides": "",
        "sourceStructVersion": "v2",
        "tableBlacklist": "",
        "tableExcludeList": "",
        "tableIgnoreBuiltin": "true",
        "tableIncludeList": "",
        "tableWhitelist": "",
        "timePrecisionMode": "adaptive_time_microseconds",
        "tombstonesOnDelete": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "DebeziumConstants.HEADER_IDENTIFIER": "String",
        "DebeziumConstants.HEADER_KEY": "Struct",
        "DebeziumConstants.HEADER_SOURCE_METADATA": "Map",
        "DebeziumConstants.HEADER_OPERATION": "String",
        "DebeziumConstants.HEADER_TIMESTAMP": "Long",
        "DebeziumConstants.HEADER_BEFORE": "Struct"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "internalKeyConverter": "org.apache.kafka.connect.json.JsonConverter",
        "internalValueConverter": "org.apache.kafka.connect.json.JsonConverter",
        "offsetCommitPolicy": "io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy",
        "offsetCommitTimeoutMs": "5s",
        "offsetFlushIntervalMs": "60s",
        "offsetStorage": "org.apache.kafka.connect.storage.FileOffsetBackingStore",
        "offsetStorageFileName": "",
        "offsetStoragePartitions": "",
        "offsetStorageReplicationFactor": "",
        "offsetStorageTopic": "",
        "basicPropertyBinding": "false",
        "bigintUnsignedHandlingMode": "long",
        "binaryHandlingMode": "bytes",
        "binlogBufferSize": "0",
        "columnBlacklist": "",
        "columnExcludeList": "",
        "columnIncludeList": "",
        "connectKeepAlive": "true",
        "connectKeepAliveIntervalMs": "1m",
        "connectTimeoutMs": "30s",
        "databaseExcludeList": "",
        "databaseHistory": "io.debezium.relational.history.FileDatabaseHistory",
        "databaseHistoryFileFilename": "",
        "databaseHistoryKafkaBootstrap{zwsp}Servers": "",
        "databaseHistoryKafkaRecovery{zwsp}Attempts": "100",
        "databaseHistoryKafkaRecovery{zwsp}PollIntervalMs": "100ms",
        "databaseHistoryKafkaTopic": "",
        "databaseHistorySkipUnparseable{zwsp}Ddl": "false",
        "databaseHistoryStoreOnly{zwsp}MonitoredTablesDdl": "false",
        "databaseHostname": "",
        "databaseIncludeList": "",
        "databaseInitialStatements": "",
        "databaseJdbcDriver": "class com.mysql.cj.jdbc.Driver",
        "databasePassword": "",
        "databasePort": "3306",
        "databaseServerId": "",
        "databaseServerIdOffset": "10000",
        "databaseServerName": "",
        "databaseSslKeystore": "",
        "databaseSslKeystorePassword": "",
        "databaseSslMode": "disabled",
        "databaseSslTruststore": "",
        "databaseSslTruststorePassword": "",
        "databaseUser": "",
        "decimalHandlingMode": "precise",
        "enableTimeAdjuster": "true",
        "eventDeserializationFailure{zwsp}HandlingMode": "fail",
        "eventProcessingFailureHandling{zwsp}Mode": "fail",
        "gtidNewChannelPosition": "earliest",
        "gtidSourceExcludes": "",
        "gtidSourceFilterDmlEvents": "true",
        "gtidSourceIncludes": "",
        "heartbeatIntervalMs": "0ms",
        "heartbeatTopicsPrefix": "__debezium-heartbeat",
        "includeQuery": "false",
        "includeSchemaChanges": "true",
        "inconsistentSchemaHandlingMode": "fail",
        "maxBatchSize": "2048",
        "maxQueueSize": "8192",
        "messageKeyColumns": "",
        "pollIntervalMs": "500ms",
        "skippedOperations": "",
        "snapshotDelayMs": "0ms",
        "snapshotFetchSize": "",
        "snapshotLockingMode": "minimal",
        "snapshotMode": "initial",
        "snapshotNewTables": "off",
        "snapshotSelectStatement{zwsp}Overrides": "",
        "sourceStructVersion": "v2",
        "tableBlacklist": "",
        "tableExcludeList": "",
        "tableIgnoreBuiltin": "true",
        "tableIncludeList": "",
        "tableWhitelist": "",
        "timePrecisionMode": "adaptive_time_microseconds",
        "tombstonesOnDelete": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "DebeziumConstants.HEADER_IDENTIFIER": "String",
        "DebeziumConstants.HEADER_KEY": "Struct",
        "DebeziumConstants.HEADER_SOURCE_METADATA": "Map",
        "DebeziumConstants.HEADER_OPERATION": "String",
        "DebeziumConstants.HEADER_TIMESTAMP": "Long",
        "DebeziumConstants.HEADER_BEFORE": "Struct"
      }
    }
  },
  "openshift-build-configs": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "sjms-batch": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "asyncStartListener": "false",
        "basicPropertyBinding": "false",
        "connectionFactory": "",
        "recoveryInterval": "5000",
        "headerFilterStrategy": "",
        "destinationName": "",
        "aggregationStrategy": "",
        "allowNullBody": "true",
        "completionInterval": "1000",
        "completionPredicate": "",
        "completionSize": "200",
        "completionTimeout": "500",
        "consumerCount": "1",
        "eagerCheckCompletion": "false",
        "includeAllJMSXProperties": "false",
        "mapJmsMessage": "true",
        "pollDuration": "1000",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "jmsKeyFormatStrategy": "",
        "keepAliveDelay": "5000",
        "messageCreatedStrategy": "",
        "synchronous": "false",
        "timeoutCheckerExecutorService": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "asyncStartListener": "false",
        "basicPropertyBinding": "false",
        "connectionFactory": "",
        "recoveryInterval": "5000",
        "headerFilterStrategy": "",
        "destinationName": "",
        "aggregationStrategy": "",
        "allowNullBody": "true",
        "completionInterval": "1000",
        "completionPredicate": "",
        "completionSize": "200",
        "completionTimeout": "500",
        "consumerCount": "1",
        "eagerCheckCompletion": "false",
        "includeAllJMSXProperties": "false",
        "mapJmsMessage": "true",
        "pollDuration": "1000",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "jmsKeyFormatStrategy": "",
        "keepAliveDelay": "5000",
        "messageCreatedStrategy": "",
        "synchronous": "false",
        "timeoutCheckerExecutorService": ""
      }
    }
  },
  "ganglia": {
    "Consumer": {
      "endpoint_parameters": {
        "dmax": "0",
        "groupName": "java",
        "lazyStartProducer": "false",
        "metricName": "metric",
        "mode": "MULTICAST",
        "prefix": "",
        "slope": "BOTH",
        "spoofHostname": "",
        "tmax": "60",
        "ttl": "5",
        "type": "STRING",
        "units": "",
        "wireFormat31x": "true",
        "basicPropertyBinding": "false",
        "configuration": "",
        "host": "239.2.11.71",
        "port": "8649",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "dmax": "0",
        "groupName": "java",
        "lazyStartProducer": "false",
        "metricName": "metric",
        "mode": "MULTICAST",
        "prefix": "",
        "slope": "BOTH",
        "spoofHostname": "",
        "tmax": "60",
        "ttl": "5",
        "type": "STRING",
        "units": "",
        "wireFormat31x": "true",
        "basicPropertyBinding": "false",
        "configuration": "",
        "host": "239.2.11.71",
        "port": "8649",
        "synchronous": "false"
      }
    }
  },
  "google-sheets": {
    "Consumer": {
      "endpoint_parameters": {
        "applicationName": "",
        "clientId": "",
        "configuration": "",
        "bridgeErrorHandler": "false",
        "splitResult": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "data": "The values collection of methods",
        "spreadsheets": "The spreadsheets collection of methods",
        "append": "The com.google.api.services.sheets.v4.model.ValueRange",
        "batchClear": "The ID of the spreadsheet to update",
        "batchClearByDataFilter": "The ID of the spreadsheet to update",
        "batchGet": "The ID of the spreadsheet to retrieve data from",
        "batchGetByDataFilter": "The ID of the spreadsheet to retrieve data from",
        "batchUpdate": "The spreadsheet to apply the updates to",
        "batchUpdateByDataFilter": "The ID of the spreadsheet to update",
        "clear": "The ID of the spreadsheet to update",
        "get": "The spreadsheet to request",
        "update": "The com.google.api.services.sheets.v4.model.ValueRange",
        "create": "The com.google.api.services.sheets.v4.model.Spreadsheet",
        "getByDataFilter": "The spreadsheet to request"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "applicationName": "",
        "clientId": "",
        "configuration": "",
        "bridgeErrorHandler": "false",
        "splitResult": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "data": "The values collection of methods",
        "spreadsheets": "The spreadsheets collection of methods",
        "append": "The com.google.api.services.sheets.v4.model.ValueRange",
        "batchClear": "The ID of the spreadsheet to update",
        "batchClearByDataFilter": "The ID of the spreadsheet to update",
        "batchGet": "The ID of the spreadsheet to retrieve data from",
        "batchGetByDataFilter": "The ID of the spreadsheet to retrieve data from",
        "batchUpdate": "The spreadsheet to apply the updates to",
        "batchUpdateByDataFilter": "The ID of the spreadsheet to update",
        "clear": "The ID of the spreadsheet to update",
        "get": "The spreadsheet to request",
        "update": "The com.google.api.services.sheets.v4.model.ValueRange",
        "create": "The com.google.api.services.sheets.v4.model.Spreadsheet",
        "getByDataFilter": "The spreadsheet to request"
      }
    }
  },
  "aws-ec2": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "amazonEc2Client": "",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "amazonEc2Client": "",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "aws2-kms": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "kmsClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "kmsClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "hazelcast-set": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "mllp": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultCharset": "ISO-8859-1",
        "logPhi": "true",
        "logPhiMaxBytes": "5120",
        "hostname": "",
        "port": "",
        "autoAck": "true",
        "bufferWrites": "false",
        "hl7Headers": "true",
        "requireEndOfData": "true",
        "stringPayload": "true",
        "validatePayload": "false",
        "exceptionHandler": "",
        "exchangePattern": "InOut",
        "synchronous": "true",
        "charsetName": "",
        "backlog": "5",
        "keepAlive": "true",
        "lenientBind": "false",
        "maxConcurrentConsumers": "5",
        "receiveBufferSize": "8192",
        "reuseAddress": "false",
        "sendBufferSize": "8192",
        "tcpNoDelay": "true",
        "acceptTimeout": "60000",
        "bindRetryInterval": "5000",
        "bindTimeout": "30000",
        "connectTimeout": "30000",
        "idleTimeout": "",
        "maxReceiveTimeouts": "",
        "readTimeout": "5000",
        "receiveTimeout": "15000"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultCharset": "ISO-8859-1",
        "logPhi": "true",
        "logPhiMaxBytes": "5120",
        "hostname": "",
        "port": "",
        "autoAck": "true",
        "bufferWrites": "false",
        "hl7Headers": "true",
        "requireEndOfData": "true",
        "stringPayload": "true",
        "validatePayload": "false",
        "exceptionHandler": "",
        "exchangePattern": "InOut",
        "synchronous": "true",
        "charsetName": "",
        "backlog": "5",
        "keepAlive": "true",
        "lenientBind": "false",
        "maxConcurrentConsumers": "5",
        "receiveBufferSize": "8192",
        "reuseAddress": "false",
        "sendBufferSize": "8192",
        "tcpNoDelay": "true",
        "acceptTimeout": "60000",
        "bindRetryInterval": "5000",
        "bindTimeout": "30000",
        "connectTimeout": "30000",
        "idleTimeout": "",
        "maxReceiveTimeouts": "",
        "readTimeout": "5000",
        "receiveTimeout": "15000"
      }
    }
  },
  "hazelcast-seda": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "concurrentConsumers": "1",
        "onErrorDelay": "1000",
        "pollTimeout": "1000",
        "transacted": "false",
        "transferExchange": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "concurrentConsumers": "1",
        "onErrorDelay": "1000",
        "pollTimeout": "1000",
        "transacted": "false",
        "transferExchange": "false"
      }
    }
  },
  "aws2-ses": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonSESClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "replyToAddresses": "",
        "returnPath": "",
        "subject": "",
        "to": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "from": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonSESClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "replyToAddresses": "",
        "returnPath": "",
        "subject": "",
        "to": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "from": "",
        "synchronous": "false"
      }
    }
  },
  "spark": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "rdd": "",
        "rddCallback": "",
        "basicPropertyBinding": "false",
        "endpointType": "",
        "collect": "true",
        "dataFrame": "",
        "dataFrameCallback": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "rdd": "",
        "rddCallback": "",
        "basicPropertyBinding": "false",
        "endpointType": "",
        "collect": "true",
        "dataFrame": "",
        "dataFrameCallback": "",
        "synchronous": "false"
      }
    }
  },
  "solr": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "url": "",
        "allowCompression": "",
        "connectionTimeout": "",
        "defaultMaxConnectionsPerHost": "",
        "followRedirects": "",
        "maxRetries": "",
        "maxTotalConnections": "",
        "requestHandler": "",
        "soTimeout": "",
        "streamingQueueSize": "10",
        "streamingThreadCount": "2",
        "synchronous": "false",
        "password": "",
        "username": "",
        "collection": "",
        "zkHost": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "url": "",
        "allowCompression": "",
        "connectionTimeout": "",
        "defaultMaxConnectionsPerHost": "",
        "followRedirects": "",
        "maxRetries": "",
        "maxTotalConnections": "",
        "requestHandler": "",
        "soTimeout": "",
        "streamingQueueSize": "10",
        "streamingThreadCount": "2",
        "synchronous": "false",
        "password": "",
        "username": "",
        "collection": "",
        "zkHost": ""
      }
    }
  },
  "kubernetes-persistent-volumes": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "jing": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "compactSyntax": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "compactSyntax": "false",
        "synchronous": "false"
      }
    }
  },
  "hazelcast-queue": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "pollingTimeout": "10000",
        "poolSize": "1",
        "queueConsumerMode": "Listen",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "pollingTimeout": "10000",
        "poolSize": "1",
        "queueConsumerMode": "Listen",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "direct": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "block": "true",
        "lazyStartProducer": "false",
        "timeout": "30000",
        "basicPropertyBinding": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "failIfNoConsumers": "true",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "block": "true",
        "lazyStartProducer": "false",
        "timeout": "30000",
        "basicPropertyBinding": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "failIfNoConsumers": "true",
        "synchronous": "false"
      }
    }
  },
  "google-drive": {
    "Consumer": {
      "endpoint_parameters": {
        "applicationName": "",
        "clientId": "",
        "configuration": "",
        "scopes": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "drive-apps": "The apps collection of methods",
        "drive-changes": "The changes collection of methods",
        "drive-channels": "The channels collection of methods",
        "drive-children": "The children collection of methods",
        "drive-comments": "The comments collection of methods",
        "drive-files": "The files collection of methods",
        "drive-parents": "The parents collection of methods",
        "drive-permissions": "The permissions collection of methods",
        "drive-properties": "The properties collection of methods",
        "drive-realtime": "The realtime collection of methods",
        "drive-replies": "The replies collection of methods",
        "drive-revisions": "The revisions collection of methods",
        "get": "The ID of the revision",
        "watch": "The ID for the file in question",
        "stop": "The com.google.api.services.drive.model.Channel",
        "delete": "The ID of the revision",
        "insert": "The ID of the file",
        "list": "The ID of the file",
        "patch": "The ID for the revision",
        "update": "The ID for the revision",
        "copy": "The ID of the file to copy",
        "export": "The MIME type of the format requested for this export",
        "touch": "The ID of the file to update",
        "trash": "The ID of the file to trash",
        "untrash": "The ID of the file to untrash",
        "getIdForEmail": "The email address for which to return a permission ID"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "applicationName": "",
        "clientId": "",
        "configuration": "",
        "scopes": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "drive-apps": "The apps collection of methods",
        "drive-changes": "The changes collection of methods",
        "drive-channels": "The channels collection of methods",
        "drive-children": "The children collection of methods",
        "drive-comments": "The comments collection of methods",
        "drive-files": "The files collection of methods",
        "drive-parents": "The parents collection of methods",
        "drive-permissions": "The permissions collection of methods",
        "drive-properties": "The properties collection of methods",
        "drive-realtime": "The realtime collection of methods",
        "drive-replies": "The replies collection of methods",
        "drive-revisions": "The revisions collection of methods",
        "get": "The ID of the revision",
        "watch": "The ID for the file in question",
        "stop": "The com.google.api.services.drive.model.Channel",
        "delete": "The ID of the revision",
        "insert": "The ID of the file",
        "list": "The ID of the file",
        "patch": "The ID for the revision",
        "update": "The ID for the revision",
        "copy": "The ID of the file to copy",
        "export": "The MIME type of the format requested for this export",
        "touch": "The ID of the file to update",
        "trash": "The ID of the file to trash",
        "untrash": "The ID of the file to untrash",
        "getIdForEmail": "The email address for which to return a permission ID"
      }
    }
  },
  "pulsar": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "ackGroupTimeMillis": "100",
        "ackTimeoutMillis": "10000",
        "allowManualAcknowledgement": "false",
        "bridgeErrorHandler": "false",
        "consumerName": "sole-consumer",
        "consumerNamePrefix": "cons",
        "consumerQueueSize": "10",
        "deadLetterTopic": "",
        "maxRedeliverCount": "",
        "negativeAckRedeliveryDelay{zwsp}Micros": "60000000",
        "numberOfConsumers": "1",
        "subscriptionInitialPosition": "LATEST",
        "subscriptionName": "subs",
        "subscriptionTopicsMode": "PersistentOnly",
        "subscriptionType": "EXCLUSIVE",
        "topicsPattern": "false",
        "pulsarMessageReceiptFactory": "",
        "batchingEnabled": "true",
        "batchingMaxMessages": "1000",
        "batchingMaxPublishDelayMicros": "1000",
        "blockIfQueueFull": "false",
        "compressionType": "NONE",
        "initialSequenceId": "-1",
        "lazyStartProducer": "false",
        "maxPendingMessages": "1000",
        "maxPendingMessagesAcross{zwsp}Partitions": "50000",
        "messageRouter": "",
        "messageRoutingMode": "RoundRobinPartition",
        "producerName": "",
        "sendTimeoutMs": "30000",
        "autoConfiguration": "",
        "basicPropertyBinding": "false",
        "pulsarClient": "",
        "persistence": "",
        "tenant": "",
        "namespace": "",
        "topic": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "true",
        "Header": "Description",
        "`CamelPulsarProducerMessageKey`": "Sets the key on the message for the Pulsar routing policy",
        "`CamelPulsarProducerMessageProperties`": "The properties to set on the Pulsar message",
        "`CamelPulsarProducerEventTime`": "Sets the event time on the message",
        "`properties`": "The properties from the Pulsar message or the empty Map if unset on the Pulsar message",
        "`producer_name`": "The name of the producer that created the message",
        "`sequence_id`": "Sequence identifier of the Pulsar message",
        "`publish_time`": "Time the Pulsar message was published to the topic",
        "`message_id`": "Unique identifier of the message",
        "`event_time`": "The event time associated with the message or 0 if unset on the Pulsar message",
        "`key`": "The key of the Pulsar message in String form or the empty string if unset on the Pulsar message",
        "`key_bytes`": "The bytes in the key. If the key has been base64 encoded, it is decoded before being returned. Otherwise, if the key is a plain string, the UTF-8 encoded bytes of the string.",
        "`topic_name`": "The topic to which the message was published",
        "`manual_acknowledgement`": "If allowManualAcknowledgement is set, this will contain the object for manually acknowledging the Pulsar message; otherwise it is unset"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "ackGroupTimeMillis": "100",
        "ackTimeoutMillis": "10000",
        "allowManualAcknowledgement": "false",
        "bridgeErrorHandler": "false",
        "consumerName": "sole-consumer",
        "consumerNamePrefix": "cons",
        "consumerQueueSize": "10",
        "deadLetterTopic": "",
        "maxRedeliverCount": "",
        "negativeAckRedeliveryDelay{zwsp}Micros": "60000000",
        "numberOfConsumers": "1",
        "subscriptionInitialPosition": "LATEST",
        "subscriptionName": "subs",
        "subscriptionTopicsMode": "PersistentOnly",
        "subscriptionType": "EXCLUSIVE",
        "topicsPattern": "false",
        "pulsarMessageReceiptFactory": "",
        "batchingEnabled": "true",
        "batchingMaxMessages": "1000",
        "batchingMaxPublishDelayMicros": "1000",
        "blockIfQueueFull": "false",
        "compressionType": "NONE",
        "initialSequenceId": "-1",
        "lazyStartProducer": "false",
        "maxPendingMessages": "1000",
        "maxPendingMessagesAcross{zwsp}Partitions": "50000",
        "messageRouter": "",
        "messageRoutingMode": "RoundRobinPartition",
        "producerName": "",
        "sendTimeoutMs": "30000",
        "autoConfiguration": "",
        "basicPropertyBinding": "false",
        "pulsarClient": "",
        "persistence": "",
        "tenant": "",
        "namespace": "",
        "topic": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "true",
        "Header": "Description",
        "`CamelPulsarProducerMessageKey`": "Sets the key on the message for the Pulsar routing policy",
        "`CamelPulsarProducerMessageProperties`": "The properties to set on the Pulsar message",
        "`CamelPulsarProducerEventTime`": "Sets the event time on the message",
        "`properties`": "The properties from the Pulsar message or the empty Map if unset on the Pulsar message",
        "`producer_name`": "The name of the producer that created the message",
        "`sequence_id`": "Sequence identifier of the Pulsar message",
        "`publish_time`": "Time the Pulsar message was published to the topic",
        "`message_id`": "Unique identifier of the message",
        "`event_time`": "The event time associated with the message or 0 if unset on the Pulsar message",
        "`key`": "The key of the Pulsar message in String form or the empty string if unset on the Pulsar message",
        "`key_bytes`": "The bytes in the key. If the key has been base64 encoded, it is decoded before being returned. Otherwise, if the key is a plain string, the UTF-8 encoded bytes of the string.",
        "`topic_name`": "The topic to which the message was published",
        "`manual_acknowledgement`": "If allowManualAcknowledgement is set, this will contain the object for manually acknowledging the Pulsar message; otherwise it is unset"
      }
    }
  },
  "zookeeper-master": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "maximumConnectionTimeout": "10000",
        "zkRoot": "/camel/zookeepermaster/clusters/master",
        "zooKeeperUrl": "localhost:2181",
        "basicPropertyBinding": "false",
        "containerIdFactory": "",
        "curator": "",
        "zooKeeperPassword": "",
        "groupName": "",
        "consumerEndpointUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "maximumConnectionTimeout": "10000",
        "zkRoot": "/camel/zookeepermaster/clusters/master",
        "zooKeeperUrl": "localhost:2181",
        "basicPropertyBinding": "false",
        "containerIdFactory": "",
        "curator": "",
        "zooKeeperPassword": "",
        "groupName": "",
        "consumerEndpointUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "web3j": {
    "Consumer": {
      "endpoint_parameters": {
        "addresses": "",
        "configuration": "",
        "fromAddress": "",
        "fromBlock": "latest",
        "fullTransactionObjects": "false",
        "gasLimit": "",
        "privateFor": "",
        "quorumAPI": "false",
        "toAddress": "",
        "toBlock": "latest",
        "topics": "",
        "web3j": "",
        "bridgeErrorHandler": "false",
        "address": "",
        "atBlock": "latest",
        "blockHash": "",
        "clientId": "",
        "data": "",
        "databaseName": "",
        "filterId": "",
        "gasPrice": "",
        "hashrate": "",
        "headerPowHash": "",
        "index": "",
        "keyName": "",
        "lazyStartProducer": "false",
        "mixDigest": "",
        "nonce": "",
        "operation": "transaction",
        "position": "",
        "priority": "",
        "sha3HashOfDataToSign": "",
        "signedTransactionData": "",
        "sourceCode": "",
        "transactionHash": "",
        "ttl": "",
        "value": "",
        "basicPropertyBinding": "false",
        "nodeAddress": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "addresses": "",
        "configuration": "",
        "fromAddress": "",
        "fromBlock": "latest",
        "fullTransactionObjects": "false",
        "gasLimit": "",
        "privateFor": "",
        "quorumAPI": "false",
        "toAddress": "",
        "toBlock": "latest",
        "topics": "",
        "web3j": "",
        "bridgeErrorHandler": "false",
        "address": "",
        "atBlock": "latest",
        "blockHash": "",
        "clientId": "",
        "data": "",
        "databaseName": "",
        "filterId": "",
        "gasPrice": "",
        "hashrate": "",
        "headerPowHash": "",
        "index": "",
        "keyName": "",
        "lazyStartProducer": "false",
        "mixDigest": "",
        "nonce": "",
        "operation": "transaction",
        "position": "",
        "priority": "",
        "sha3HashOfDataToSign": "",
        "signedTransactionData": "",
        "sourceCode": "",
        "transactionHash": "",
        "ttl": "",
        "value": "",
        "basicPropertyBinding": "false",
        "nodeAddress": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "zendesk": {
    "Consumer": {
      "endpoint_parameters": {
        "serverUrl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "zendesk": "",
        "oauthToken": "",
        "password": "",
        "token": "",
        "username": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "DEFAULT": "",
        "addTagToOrganisations": "",
        "addTagToTicket": "",
        "addTagToTopics": "",
        "associateAttachmentsToArticle": "",
        "changeUserPassword": "",
        "createArticle": "",
        "createArticleTranslation": "",
        "createAutomation": "",
        "createCategory": "",
        "createCategoryTranslation": "",
        "createComment": "",
        "createDynamicContentItem": "",
        "createDynamicContentItemVariant": "",
        "createForum": "",
        "createGroup": "",
        "createGroupMembership": "",
        "createMacro": "",
        "createOrganization": "",
        "createOrganizationMembership": "",
        "createOrganizationMemberships": "",
        "createOrganizationMembershipsAsync": "",
        "createOrganizations": "",
        "createOrganizationsAsync": "",
        "createOrUpdateUser": "",
        "createOrUpdateUsers": "",
        "createOrUpdateUsersAsync": "",
        "createPermissionGroup": "",
        "createRequest": "",
        "createSatisfactionRating": "",
        "createSection": "",
        "createSectionTranslation": "",
        "createTarget": "",
        "createTicket": "",
        "createTicketAsync": "",
        "createTicketField": "",
        "createTicketForm": "",
        "createTicketFromTweet": "",
        "createTickets": "",
        "createTicketsAsync": "",
        "createTopic": "",
        "createTrigger": "",
        "createUpload": "",
        "createUploadArticle": "",
        "createUser": "",
        "createUserIdentity": "",
        "createUsers": "",
        "createUsersAsync": "",
        "createUserSegment": "",
        "deleteArticle": "",
        "deleteArticleAttachment": "Attachment identifier",
        "deleteAttachment": "",
        "deleteAutomation": "",
        "deleteCategory": "",
        "deleteDynamicContentItem": "",
        "deleteDynamicContentItemVariant": "",
        "deleteForum": "",
        "deleteGroup": "",
        "deleteGroupMembership": "",
        "deleteOrganization": "",
        "deleteOrganizationMembership": "",
        "deleteOrganizationMemberships": "",
        "deletePermissionGroup": "",
        "deleteSection": "",
        "deleteSuspendedTicket": "",
        "deleteTarget": "",
        "deleteTicket": "",
        "deleteTicketField": "",
        "deleteTickets": "",
        "deleteTopic": "",
        "deleteTranslation": "",
        "deleteTrigger": "",
        "deleteUpload": "",
        "deleteUser": "",
        "deleteUserIdentity": "",
        "deleteUserSegment": "",
        "getArticle": "",
        "getArticleFromSearch": "",
        "getArticles": "",
        "getArticlesFromAllLabels": "",
        "getArticlesFromAnyLabels": "",
        "getArticlesFromPage": "",
        "getArticlesIncrementally": "",
        "getArticleSubscriptions": "",
        "getArticleTranslations": "",
        "getAssignableGroupMemberships": "",
        "getAttachment": "",
        "getAttachmentsFromArticle": "",
        "getAutoCompleteOrganizations": "",
        "getAutomation": "",
        "getCategory": "",
        "getCategoryTranslations": "",
        "getComplianceDeletionStatuses": "",
        "getDeletedTickets": "",
        "getDynamicContentItem": "",
        "getDynamicContentItemVariant": "",
        "getDynamicContentItemVariants": "",
        "getForum": "",
        "getForums": "",
        "getGroup": "",
        "getGroupMembership": "",
        "getGroupMembershipByUser": "",
        "getGroupMemberships": "",
        "getGroupOrganization": "",
        "getGroupUsers": "",
        "getHolidaysForSchedule": "",
        "getIncrementalTicketsResult": "",
        "getJobStatus": "",
        "getJobStatusAsync": "",
        "getJobStatuses": "",
        "getJobStatusesAsync": "",
        "getMacro": "",
        "getOrganization": "",
        "getOrganizationMembership": "",
        "getOrganizationMembershipByUser": "",
        "getOrganizationMembershipForUser": "",
        "getOrganizationMembershipsForOrg": "",
        "getOrganizationMembershipsForUser": "",
        "getOrganizationsIncrementally": "",
        "getOrganizationTickets": "",
        "getOrganizationUsers": "",
        "getPermissionGroup": "",
        "getRequest": "",
        "getRequestComment": "",
        "getRequestComments": "",
        "getSatisfactionRating": "",
        "getSchedule": "",
        "getSearchResults": "",
        "getSection": "",
        "getSections": "",
        "getSectionSubscriptions": "",
        "getSectionTranslations": "",
        "getTarget": "",
        "getTicket": "",
        "getTicketAudit": "",
        "getTicketAudits": "",
        "getTicketCollaborators": "",
        "getTicketComments": "",
        "getTicketField": "",
        "getTicketForm": "",
        "getTicketIncidents": "",
        "getTicketMetric": "",
        "getTicketMetricByTicket": "",
        "getTickets": "",
        "getTicketsByExternalId": "",
        "getTicketsFromSearch": "",
        "getTicketsIncrementally": "",
        "getTopic": "",
        "getTopics": "",
        "getTopicsByUser": "",
        "getTrigger": "",
        "getUser": "",
        "getUserCCDTickets": "",
        "getUserIdentities": "",
        "getUserIdentity": "",
        "getUserRelatedInfo": "",
        "getUserRequestedTickets": "",
        "getUserRequests": "",
        "getUsersByRole": "",
        "getUserSegment": "",
        "getUserSegments": "",
        "getUsersIncrementally": "",
        "getUserSubscriptions": "",
        "importTicket": "",
        "importTopic": "",
        "lookupOrganizationsByExternalId": "",
        "lookupUserByEmail": "",
        "lookupUserByExternalId": "",
        "macrosShowChangesToTicket": "",
        "macrosShowTicketAfterChanges": "",
        "makePrivateTicketAudit": "",
        "markTicketAsSpam": "",
        "mergeUsers": "",
        "notifyApp": "",
        "permanentlyDeleteTicket": "",
        "permanentlyDeleteTickets": "",
        "permanentlyDeleteUser": "",
        "queueCreateTicketAsync": "",
        "removeTagFromOrganisations": "",
        "removeTagFromTicket": "",
        "removeTagFromTopics": "",
        "requestVerifyUserIdentity": "",
        "resetUserPassword": "",
        "setGroupMembershipAsDefault": "",
        "setOrganizationMembershipAsDefault": "",
        "setTagOnOrganisations": "",
        "setTagOnTicket": "",
        "setTagOnTopics": "",
        "setUserPrimaryIdentity": "",
        "suspendUser": "",
        "trustTicketAudit": "",
        "unsuspendUser": "",
        "updateArticle": "",
        "updateArticleTranslation": "",
        "updateAutomation": "",
        "updateCategory": "",
        "updateCategoryTranslation": "",
        "updateDynamicContentItem": "",
        "updateDynamicContentItemVariant": "",
        "updateForum": "",
        "updateGroup": "",
        "updateInstallation": "",
        "updateMacro": "",
        "updateOrganization": "",
        "updateOrganizations": "",
        "updateOrganizationsAsync": "",
        "updatePermissionGroup": "",
        "updateRequest": "",
        "updateSection": "",
        "updateSectionTranslation": "",
        "updateTicket": "",
        "updateTicketField": "",
        "updateTickets": "",
        "updateTicketsAsync": "",
        "updateTopic": "",
        "updateTrigger": "",
        "updateUser": "",
        "updateUserIdentity": "",
        "updateUsers": "",
        "updateUsersAsync": "",
        "updateUserSegment": "",
        "verifyUserIdentity": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "serverUrl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "zendesk": "",
        "oauthToken": "",
        "password": "",
        "token": "",
        "username": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "DEFAULT": "",
        "addTagToOrganisations": "",
        "addTagToTicket": "",
        "addTagToTopics": "",
        "associateAttachmentsToArticle": "",
        "changeUserPassword": "",
        "createArticle": "",
        "createArticleTranslation": "",
        "createAutomation": "",
        "createCategory": "",
        "createCategoryTranslation": "",
        "createComment": "",
        "createDynamicContentItem": "",
        "createDynamicContentItemVariant": "",
        "createForum": "",
        "createGroup": "",
        "createGroupMembership": "",
        "createMacro": "",
        "createOrganization": "",
        "createOrganizationMembership": "",
        "createOrganizationMemberships": "",
        "createOrganizationMembershipsAsync": "",
        "createOrganizations": "",
        "createOrganizationsAsync": "",
        "createOrUpdateUser": "",
        "createOrUpdateUsers": "",
        "createOrUpdateUsersAsync": "",
        "createPermissionGroup": "",
        "createRequest": "",
        "createSatisfactionRating": "",
        "createSection": "",
        "createSectionTranslation": "",
        "createTarget": "",
        "createTicket": "",
        "createTicketAsync": "",
        "createTicketField": "",
        "createTicketForm": "",
        "createTicketFromTweet": "",
        "createTickets": "",
        "createTicketsAsync": "",
        "createTopic": "",
        "createTrigger": "",
        "createUpload": "",
        "createUploadArticle": "",
        "createUser": "",
        "createUserIdentity": "",
        "createUsers": "",
        "createUsersAsync": "",
        "createUserSegment": "",
        "deleteArticle": "",
        "deleteArticleAttachment": "Attachment identifier",
        "deleteAttachment": "",
        "deleteAutomation": "",
        "deleteCategory": "",
        "deleteDynamicContentItem": "",
        "deleteDynamicContentItemVariant": "",
        "deleteForum": "",
        "deleteGroup": "",
        "deleteGroupMembership": "",
        "deleteOrganization": "",
        "deleteOrganizationMembership": "",
        "deleteOrganizationMemberships": "",
        "deletePermissionGroup": "",
        "deleteSection": "",
        "deleteSuspendedTicket": "",
        "deleteTarget": "",
        "deleteTicket": "",
        "deleteTicketField": "",
        "deleteTickets": "",
        "deleteTopic": "",
        "deleteTranslation": "",
        "deleteTrigger": "",
        "deleteUpload": "",
        "deleteUser": "",
        "deleteUserIdentity": "",
        "deleteUserSegment": "",
        "getArticle": "",
        "getArticleFromSearch": "",
        "getArticles": "",
        "getArticlesFromAllLabels": "",
        "getArticlesFromAnyLabels": "",
        "getArticlesFromPage": "",
        "getArticlesIncrementally": "",
        "getArticleSubscriptions": "",
        "getArticleTranslations": "",
        "getAssignableGroupMemberships": "",
        "getAttachment": "",
        "getAttachmentsFromArticle": "",
        "getAutoCompleteOrganizations": "",
        "getAutomation": "",
        "getCategory": "",
        "getCategoryTranslations": "",
        "getComplianceDeletionStatuses": "",
        "getDeletedTickets": "",
        "getDynamicContentItem": "",
        "getDynamicContentItemVariant": "",
        "getDynamicContentItemVariants": "",
        "getForum": "",
        "getForums": "",
        "getGroup": "",
        "getGroupMembership": "",
        "getGroupMembershipByUser": "",
        "getGroupMemberships": "",
        "getGroupOrganization": "",
        "getGroupUsers": "",
        "getHolidaysForSchedule": "",
        "getIncrementalTicketsResult": "",
        "getJobStatus": "",
        "getJobStatusAsync": "",
        "getJobStatuses": "",
        "getJobStatusesAsync": "",
        "getMacro": "",
        "getOrganization": "",
        "getOrganizationMembership": "",
        "getOrganizationMembershipByUser": "",
        "getOrganizationMembershipForUser": "",
        "getOrganizationMembershipsForOrg": "",
        "getOrganizationMembershipsForUser": "",
        "getOrganizationsIncrementally": "",
        "getOrganizationTickets": "",
        "getOrganizationUsers": "",
        "getPermissionGroup": "",
        "getRequest": "",
        "getRequestComment": "",
        "getRequestComments": "",
        "getSatisfactionRating": "",
        "getSchedule": "",
        "getSearchResults": "",
        "getSection": "",
        "getSections": "",
        "getSectionSubscriptions": "",
        "getSectionTranslations": "",
        "getTarget": "",
        "getTicket": "",
        "getTicketAudit": "",
        "getTicketAudits": "",
        "getTicketCollaborators": "",
        "getTicketComments": "",
        "getTicketField": "",
        "getTicketForm": "",
        "getTicketIncidents": "",
        "getTicketMetric": "",
        "getTicketMetricByTicket": "",
        "getTickets": "",
        "getTicketsByExternalId": "",
        "getTicketsFromSearch": "",
        "getTicketsIncrementally": "",
        "getTopic": "",
        "getTopics": "",
        "getTopicsByUser": "",
        "getTrigger": "",
        "getUser": "",
        "getUserCCDTickets": "",
        "getUserIdentities": "",
        "getUserIdentity": "",
        "getUserRelatedInfo": "",
        "getUserRequestedTickets": "",
        "getUserRequests": "",
        "getUsersByRole": "",
        "getUserSegment": "",
        "getUserSegments": "",
        "getUsersIncrementally": "",
        "getUserSubscriptions": "",
        "importTicket": "",
        "importTopic": "",
        "lookupOrganizationsByExternalId": "",
        "lookupUserByEmail": "",
        "lookupUserByExternalId": "",
        "macrosShowChangesToTicket": "",
        "macrosShowTicketAfterChanges": "",
        "makePrivateTicketAudit": "",
        "markTicketAsSpam": "",
        "mergeUsers": "",
        "notifyApp": "",
        "permanentlyDeleteTicket": "",
        "permanentlyDeleteTickets": "",
        "permanentlyDeleteUser": "",
        "queueCreateTicketAsync": "",
        "removeTagFromOrganisations": "",
        "removeTagFromTicket": "",
        "removeTagFromTopics": "",
        "requestVerifyUserIdentity": "",
        "resetUserPassword": "",
        "setGroupMembershipAsDefault": "",
        "setOrganizationMembershipAsDefault": "",
        "setTagOnOrganisations": "",
        "setTagOnTicket": "",
        "setTagOnTopics": "",
        "setUserPrimaryIdentity": "",
        "suspendUser": "",
        "trustTicketAudit": "",
        "unsuspendUser": "",
        "updateArticle": "",
        "updateArticleTranslation": "",
        "updateAutomation": "",
        "updateCategory": "",
        "updateCategoryTranslation": "",
        "updateDynamicContentItem": "",
        "updateDynamicContentItemVariant": "",
        "updateForum": "",
        "updateGroup": "",
        "updateInstallation": "",
        "updateMacro": "",
        "updateOrganization": "",
        "updateOrganizations": "",
        "updateOrganizationsAsync": "",
        "updatePermissionGroup": "",
        "updateRequest": "",
        "updateSection": "",
        "updateSectionTranslation": "",
        "updateTicket": "",
        "updateTicketField": "",
        "updateTickets": "",
        "updateTicketsAsync": "",
        "updateTopic": "",
        "updateTrigger": "",
        "updateUser": "",
        "updateUserIdentity": "",
        "updateUsers": "",
        "updateUsersAsync": "",
        "updateUserSegment": "",
        "verifyUserIdentity": ""
      }
    }
  },
  "couchdb": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "protocol": "",
        "hostname": "",
        "port": "5984",
        "database": "",
        "createDatabase": "false",
        "deletes": "true",
        "heartbeat": "30000",
        "since": "",
        "style": "main_only",
        "updates": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "password": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "protocol": "",
        "hostname": "",
        "port": "5984",
        "database": "",
        "createDatabase": "false",
        "deletes": "true",
        "heartbeat": "30000",
        "since": "",
        "style": "main_only",
        "updates": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "password": "",
        "username": ""
      }
    }
  },
  "websocket-jsr356": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "serverEndpointDeployment{zwsp}Strategy": "",
        "uri": "",
        "sessionCount": "1",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "serverEndpointDeployment{zwsp}Strategy": "",
        "uri": "",
        "sessionCount": "1",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "sjms2": {
    "Consumer": {
      "endpoint_parameters": {
        "connectionCount": "",
        "bridgeErrorHandler": "false",
        "reconnectBackOff": "5000",
        "reconnectOnError": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionClientId": "",
        "connectionFactory": "",
        "connectionMaxWait": "5000",
        "connectionResource": "",
        "connectionTestOnBorrow": "true",
        "destinationCreationStrategy": "",
        "jmsKeyFormatStrategy": "",
        "messageCreatedStrategy": "",
        "timedTaskManager": "",
        "headerFilterStrategy": "",
        "connectionPassword": "",
        "connectionUsername": "",
        "transactionCommitStrategy": "",
        "destinationType": "queue",
        "destinationName": "",
        "acknowledgementMode": "AUTO_ACKNOWLEDGE",
        "consumerCount": "1",
        "durable": "false",
        "durableSubscriptionId": "",
        "shared": "false",
        "subscriptionId": "",
        "synchronous": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "messageSelector": "",
        "namedReplyTo": "",
        "persistent": "true",
        "producerCount": "1",
        "ttl": "-1",
        "allowNullBody": "true",
        "prefillPool": "true",
        "responseTimeOut": "5s",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "exceptionListener": "",
        "includeAllJMSXProperties": "false",
        "mapJmsMessage": "true",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "transacted": "false",
        "transactionBatchCount": "-1",
        "transactionBatchTimeout": "5s",
        "sharedJMSSession": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "connectionCount": "",
        "bridgeErrorHandler": "false",
        "reconnectBackOff": "5000",
        "reconnectOnError": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionClientId": "",
        "connectionFactory": "",
        "connectionMaxWait": "5000",
        "connectionResource": "",
        "connectionTestOnBorrow": "true",
        "destinationCreationStrategy": "",
        "jmsKeyFormatStrategy": "",
        "messageCreatedStrategy": "",
        "timedTaskManager": "",
        "headerFilterStrategy": "",
        "connectionPassword": "",
        "connectionUsername": "",
        "transactionCommitStrategy": "",
        "destinationType": "queue",
        "destinationName": "",
        "acknowledgementMode": "AUTO_ACKNOWLEDGE",
        "consumerCount": "1",
        "durable": "false",
        "durableSubscriptionId": "",
        "shared": "false",
        "subscriptionId": "",
        "synchronous": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "messageSelector": "",
        "namedReplyTo": "",
        "persistent": "true",
        "producerCount": "1",
        "ttl": "-1",
        "allowNullBody": "true",
        "prefillPool": "true",
        "responseTimeOut": "5s",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "exceptionListener": "",
        "includeAllJMSXProperties": "false",
        "mapJmsMessage": "true",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "transacted": "false",
        "transactionBatchCount": "-1",
        "transactionBatchTimeout": "5s",
        "sharedJMSSession": "true"
      }
    }
  },
  "spring-ldap": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "templateName": "",
        "operation": "",
        "scope": "subtree",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "templateName": "",
        "operation": "",
        "scope": "subtree",
        "synchronous": "false"
      }
    }
  },
  "rss": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "feedUri": "",
        "feedHeader": "true",
        "filter": "true",
        "lastUpdate": "",
        "password": "",
        "sendEmptyMessageWhenIdle": "false",
        "sortEntries": "false",
        "splitEntries": "true",
        "throttleEntries": "true",
        "username": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "feedUri": "",
        "feedHeader": "true",
        "filter": "true",
        "lastUpdate": "",
        "password": "",
        "sendEmptyMessageWhenIdle": "false",
        "sortEntries": "false",
        "splitEntries": "true",
        "throttleEntries": "true",
        "username": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "cron": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "cronService": "",
        "schedule": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "cronService": "",
        "schedule": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "hazelcast-atomicvalue": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "synchronous": "false"
      }
    }
  },
  "debezium-sqlserver": {
    "Consumer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "internalKeyConverter": "org.apache.kafka.connect.json.JsonConverter",
        "internalValueConverter": "org.apache.kafka.connect.json.JsonConverter",
        "offsetCommitPolicy": "io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy",
        "offsetCommitTimeoutMs": "5s",
        "offsetFlushIntervalMs": "60s",
        "offsetStorage": "org.apache.kafka.connect.storage.FileOffsetBackingStore",
        "offsetStorageFileName": "",
        "offsetStoragePartitions": "",
        "offsetStorageReplicationFactor": "",
        "offsetStorageTopic": "",
        "basicPropertyBinding": "false",
        "columnBlacklist": "",
        "columnExcludeList": "",
        "columnIncludeList": "",
        "columnPropagateSourceType": "",
        "columnWhitelist": "",
        "converters": "",
        "databaseDbname": "",
        "databaseHistory": "io.debezium.relational.history.FileDatabaseHistory",
        "databaseHistoryFileFilename": "",
        "databaseHistoryKafkaBootstrap{zwsp}Servers": "",
        "databaseHistoryKafkaRecovery{zwsp}Attempts": "100",
        "databaseHistoryKafkaRecovery{zwsp}PollIntervalMs": "100ms",
        "databaseHistoryKafkaTopic": "",
        "databaseHostname": "",
        "databaseInstance": "",
        "databasePassword": "",
        "databasePort": "1433",
        "databaseServerName": "",
        "databaseServerTimezone": "",
        "databaseUser": "",
        "datatypePropagateSourceType": "",
        "decimalHandlingMode": "precise",
        "eventProcessingFailureHandling{zwsp}Mode": "fail",
        "heartbeatIntervalMs": "0ms",
        "heartbeatTopicsPrefix": "__debezium-heartbeat",
        "includeSchemaChanges": "true",
        "maxBatchSize": "2048",
        "maxQueueSize": "8192",
        "messageKeyColumns": "",
        "pollIntervalMs": "500ms",
        "provideTransactionMetadata": "false",
        "queryFetchSize": "0",
        "retriableRestartConnectorWait{zwsp}Ms": "10s",
        "sanitizeFieldNames": "false",
        "skippedOperations": "",
        "snapshotDelayMs": "0ms",
        "snapshotFetchSize": "",
        "snapshotIsolationMode": "repeatable_read",
        "snapshotLockTimeoutMs": "10s",
        "snapshotMode": "initial",
        "snapshotSelectStatement{zwsp}Overrides": "",
        "sourceStructVersion": "v2",
        "sourceTimestampMode": "commit",
        "tableBlacklist": "",
        "tableExcludeList": "",
        "tableIgnoreBuiltin": "true",
        "tableIncludeList": "",
        "tableWhitelist": "",
        "timePrecisionMode": "adaptive",
        "tombstonesOnDelete": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "DebeziumConstants.HEADER_IDENTIFIER": "String",
        "DebeziumConstants.HEADER_KEY": "Struct",
        "DebeziumConstants.HEADER_SOURCE_METADATA": "Map",
        "DebeziumConstants.HEADER_OPERATION": "String",
        "DebeziumConstants.HEADER_TIMESTAMP": "Long",
        "DebeziumConstants.HEADER_BEFORE": "Struct"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "internalKeyConverter": "org.apache.kafka.connect.json.JsonConverter",
        "internalValueConverter": "org.apache.kafka.connect.json.JsonConverter",
        "offsetCommitPolicy": "io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy",
        "offsetCommitTimeoutMs": "5s",
        "offsetFlushIntervalMs": "60s",
        "offsetStorage": "org.apache.kafka.connect.storage.FileOffsetBackingStore",
        "offsetStorageFileName": "",
        "offsetStoragePartitions": "",
        "offsetStorageReplicationFactor": "",
        "offsetStorageTopic": "",
        "basicPropertyBinding": "false",
        "columnBlacklist": "",
        "columnExcludeList": "",
        "columnIncludeList": "",
        "columnPropagateSourceType": "",
        "columnWhitelist": "",
        "converters": "",
        "databaseDbname": "",
        "databaseHistory": "io.debezium.relational.history.FileDatabaseHistory",
        "databaseHistoryFileFilename": "",
        "databaseHistoryKafkaBootstrap{zwsp}Servers": "",
        "databaseHistoryKafkaRecovery{zwsp}Attempts": "100",
        "databaseHistoryKafkaRecovery{zwsp}PollIntervalMs": "100ms",
        "databaseHistoryKafkaTopic": "",
        "databaseHostname": "",
        "databaseInstance": "",
        "databasePassword": "",
        "databasePort": "1433",
        "databaseServerName": "",
        "databaseServerTimezone": "",
        "databaseUser": "",
        "datatypePropagateSourceType": "",
        "decimalHandlingMode": "precise",
        "eventProcessingFailureHandling{zwsp}Mode": "fail",
        "heartbeatIntervalMs": "0ms",
        "heartbeatTopicsPrefix": "__debezium-heartbeat",
        "includeSchemaChanges": "true",
        "maxBatchSize": "2048",
        "maxQueueSize": "8192",
        "messageKeyColumns": "",
        "pollIntervalMs": "500ms",
        "provideTransactionMetadata": "false",
        "queryFetchSize": "0",
        "retriableRestartConnectorWait{zwsp}Ms": "10s",
        "sanitizeFieldNames": "false",
        "skippedOperations": "",
        "snapshotDelayMs": "0ms",
        "snapshotFetchSize": "",
        "snapshotIsolationMode": "repeatable_read",
        "snapshotLockTimeoutMs": "10s",
        "snapshotMode": "initial",
        "snapshotSelectStatement{zwsp}Overrides": "",
        "sourceStructVersion": "v2",
        "sourceTimestampMode": "commit",
        "tableBlacklist": "",
        "tableExcludeList": "",
        "tableIgnoreBuiltin": "true",
        "tableIncludeList": "",
        "tableWhitelist": "",
        "timePrecisionMode": "adaptive",
        "tombstonesOnDelete": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "DebeziumConstants.HEADER_IDENTIFIER": "String",
        "DebeziumConstants.HEADER_KEY": "Struct",
        "DebeziumConstants.HEADER_SOURCE_METADATA": "Map",
        "DebeziumConstants.HEADER_OPERATION": "String",
        "DebeziumConstants.HEADER_TIMESTAMP": "Long",
        "DebeziumConstants.HEADER_BEFORE": "Struct"
      }
    }
  },
  "aws-eks": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "eksClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "eksClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "exec": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "executable": "",
        "args": "",
        "binding": "",
        "commandExecutor": "",
        "commandLogLevel": "DEBUG",
        "outFile": "",
        "timeout": "",
        "useStderrOnEmptyStdout": "false",
        "workingDir": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "executable": "",
        "args": "",
        "binding": "",
        "commandExecutor": "",
        "commandLogLevel": "DEBUG",
        "outFile": "",
        "timeout": "",
        "useStderrOnEmptyStdout": "false",
        "workingDir": "",
        "synchronous": "false"
      }
    }
  },
  "webhook": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "webhookAutoRegister": "true",
        "webhookBasePath": "",
        "webhookComponentName": "",
        "webhookExternalUrl": "",
        "webhookPath": "",
        "basicPropertyBinding": "false",
        "configuration": "",
        "endpointUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "webhookAutoRegister": "true",
        "webhookBasePath": "",
        "webhookComponentName": "",
        "webhookExternalUrl": "",
        "webhookPath": "",
        "basicPropertyBinding": "false",
        "configuration": "",
        "endpointUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "google-calendar": {
    "Consumer": {
      "endpoint_parameters": {
        "applicationName": "",
        "clientId": "",
        "configuration": "",
        "emailAddress": "",
        "p12FileName": "",
        "scopes": "https://www.googleapis.com/auth/calendar",
        "user": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "acl": "The acl collection of methods",
        "calendars": "The calendars collection of methods",
        "channels": "The channels collection of methods",
        "events": "The events collection of methods",
        "freebusy": "The freebusy collection of methods",
        "list": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "settings": "The settings collection of methods",
        "delete": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "get": "The id of the user setting",
        "insert": "The com.google.api.services.calendar.model.CalendarListEntry",
        "patch": "The com.google.api.services.calendar.model.CalendarListEntry",
        "update": "The com.google.api.services.calendar.model.CalendarListEntry",
        "watch": "The com.google.api.services.calendar.model.Channel",
        "clear": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "stop": "The com.google.api.services.calendar.model.Channel",
        "calendarImport": "The com.google.api.services.calendar.model.Event",
        "instances": "Recurring event identifier",
        "move": "Event identifier",
        "quickAdd": "The text describing the event to be created",
        "query": "The com.google.api.services.calendar.model.FreeBusyRequest"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "applicationName": "",
        "clientId": "",
        "configuration": "",
        "emailAddress": "",
        "p12FileName": "",
        "scopes": "https://www.googleapis.com/auth/calendar",
        "user": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "acl": "The acl collection of methods",
        "calendars": "The calendars collection of methods",
        "channels": "The channels collection of methods",
        "events": "The events collection of methods",
        "freebusy": "The freebusy collection of methods",
        "list": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "settings": "The settings collection of methods",
        "delete": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "get": "The id of the user setting",
        "insert": "The com.google.api.services.calendar.model.CalendarListEntry",
        "patch": "The com.google.api.services.calendar.model.CalendarListEntry",
        "update": "The com.google.api.services.calendar.model.CalendarListEntry",
        "watch": "The com.google.api.services.calendar.model.Channel",
        "clear": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "stop": "The com.google.api.services.calendar.model.Channel",
        "calendarImport": "The com.google.api.services.calendar.model.Event",
        "instances": "Recurring event identifier",
        "move": "Event identifier",
        "quickAdd": "The text describing the event to be created",
        "query": "The com.google.api.services.calendar.model.FreeBusyRequest"
      }
    }
  },
  "aws2-ddb": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonDDBClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "consistentRead": "false",
        "keyAttributeName": "",
        "keyAttributeType": "",
        "lazyStartProducer": "false",
        "operation": "PutItem",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "readCapacity": "",
        "region": "",
        "trustAllCertificates": "false",
        "writeCapacity": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "tableName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonDDBClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "consistentRead": "false",
        "keyAttributeName": "",
        "keyAttributeType": "",
        "lazyStartProducer": "false",
        "operation": "PutItem",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "readCapacity": "",
        "region": "",
        "trustAllCertificates": "false",
        "writeCapacity": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "tableName": "",
        "synchronous": "false"
      }
    }
  },
  "aws-kinesis-firehose": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonKinesisFirehoseClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "streamName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonKinesisFirehoseClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "streamName": "",
        "synchronous": "false"
      }
    }
  },
  "dataset": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dataSetIndex": "lenient",
        "initialDelay": "1000",
        "minRate": "0",
        "preloadSize": "0",
        "produceDelay": "3",
        "exceptionHandler": "",
        "exchangePattern": "",
        "assertPeriod": "0",
        "consumeDelay": "0",
        "expectedCount": "-1",
        "failFast": "false",
        "reportGroup": "",
        "resultMinimumWaitTime": "0",
        "resultWaitTime": "0",
        "retainFirst": "-1",
        "retainLast": "-1",
        "sleepForEmptyTest": "0",
        "copyOnExchange": "true",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dataSetIndex": "lenient",
        "initialDelay": "1000",
        "minRate": "0",
        "preloadSize": "0",
        "produceDelay": "3",
        "exceptionHandler": "",
        "exchangePattern": "",
        "assertPeriod": "0",
        "consumeDelay": "0",
        "expectedCount": "-1",
        "failFast": "false",
        "reportGroup": "",
        "resultMinimumWaitTime": "0",
        "resultWaitTime": "0",
        "retainFirst": "-1",
        "retainLast": "-1",
        "sleepForEmptyTest": "0",
        "copyOnExchange": "true",
        "synchronous": "false"
      }
    }
  },
  "salesforce": {
    "Consumer": {
      "endpoint_parameters": {
        "Property": "Flow",
        "clientId": "",
        "clientSecret": "",
        "userName": "",
        "password": "",
        "refreshToken": "",
        "keystore": "",
        "apexMethod": "",
        "apexQueryParams": "",
        "apexUrl": "",
        "apiVersion": "34.0",
        "backoffIncrement": "1000",
        "batchId": "",
        "contentType": "",
        "defaultReplayId": "",
        "format": "",
        "httpClient": "",
        "httpClientConnectionTimeout": "60000",
        "httpClientIdleTimeout": "10000",
        "httpMaxContentLength": "",
        "includeDetails": "",
        "initialReplayIdMap": "",
        "instanceId": "",
        "jobId": "",
        "limit": "",
        "maxBackoff": "30000",
        "notFoundBehaviour": "EXCEPTION",
        "notifyForFields": "",
        "notifyForOperationCreate": "",
        "notifyForOperationDelete": "",
        "notifyForOperations": "",
        "notifyForOperationUndelete": "",
        "notifyForOperationUpdate": "",
        "objectMapper": "",
        "packages": "",
        "rawPayload": "false",
        "reportId": "",
        "reportMetadata": "",
        "resultId": "",
        "sObjectBlobFieldName": "",
        "sObjectClass": "",
        "sObjectFields": "",
        "sObjectId": "",
        "sObjectIdName": "",
        "sObjectIdValue": "",
        "sObjectName": "",
        "sObjectQuery": "",
        "sObjectSearch": "",
        "updateTopic": "false",
        "config": "",
        "httpClientProperties": "",
        "longPollingTransportProperties": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpProxyExcludedAddresses": "",
        "httpProxyHost": "",
        "httpProxyIncludedAddresses": "",
        "httpProxyPort": "",
        "httpProxySocks4": "false",
        "authenticationType": "",
        "httpProxyAuthUri": "",
        "httpProxyPassword": "",
        "httpProxyRealm": "",
        "httpProxySecure": "true",
        "httpProxyUseDigestAuth": "false",
        "httpProxyUsername": "",
        "instanceUrl": "",
        "lazyLogin": "false",
        "loginConfig": "",
        "loginUrl": "https://login.salesforce.com",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "operationName": "",
        "topicName": "",
        "replayId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "Property": "Flow",
        "clientId": "",
        "clientSecret": "",
        "userName": "",
        "password": "",
        "refreshToken": "",
        "keystore": "",
        "apexMethod": "",
        "apexQueryParams": "",
        "apexUrl": "",
        "apiVersion": "34.0",
        "backoffIncrement": "1000",
        "batchId": "",
        "contentType": "",
        "defaultReplayId": "",
        "format": "",
        "httpClient": "",
        "httpClientConnectionTimeout": "60000",
        "httpClientIdleTimeout": "10000",
        "httpMaxContentLength": "",
        "includeDetails": "",
        "initialReplayIdMap": "",
        "instanceId": "",
        "jobId": "",
        "limit": "",
        "maxBackoff": "30000",
        "notFoundBehaviour": "EXCEPTION",
        "notifyForFields": "",
        "notifyForOperationCreate": "",
        "notifyForOperationDelete": "",
        "notifyForOperations": "",
        "notifyForOperationUndelete": "",
        "notifyForOperationUpdate": "",
        "objectMapper": "",
        "packages": "",
        "rawPayload": "false",
        "reportId": "",
        "reportMetadata": "",
        "resultId": "",
        "sObjectBlobFieldName": "",
        "sObjectClass": "",
        "sObjectFields": "",
        "sObjectId": "",
        "sObjectIdName": "",
        "sObjectIdValue": "",
        "sObjectName": "",
        "sObjectQuery": "",
        "sObjectSearch": "",
        "updateTopic": "false",
        "config": "",
        "httpClientProperties": "",
        "longPollingTransportProperties": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpProxyExcludedAddresses": "",
        "httpProxyHost": "",
        "httpProxyIncludedAddresses": "",
        "httpProxyPort": "",
        "httpProxySocks4": "false",
        "authenticationType": "",
        "httpProxyAuthUri": "",
        "httpProxyPassword": "",
        "httpProxyRealm": "",
        "httpProxySecure": "true",
        "httpProxyUseDigestAuth": "false",
        "httpProxyUsername": "",
        "instanceUrl": "",
        "lazyLogin": "false",
        "loginConfig": "",
        "loginUrl": "https://login.salesforce.com",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "operationName": "",
        "topicName": "",
        "replayId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "saga": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "action": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "action": "",
        "synchronous": "false"
      }
    }
  },
  "weka": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "command": "",
        "synchronous": "false",
        "apply": "",
        "build": "",
        "dsname": "",
        "folds": "10",
        "loadFrom": "",
        "saveTo": "",
        "seed": "1",
        "xval": "false",
        "path": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "command": "",
        "synchronous": "false",
        "apply": "",
        "build": "",
        "dsname": "",
        "folds": "10",
        "loadFrom": "",
        "saveTo": "",
        "seed": "1",
        "xval": "false",
        "path": ""
      }
    }
  },
  "aws-sdb": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "domainName": "",
        "accessKey": "",
        "amazonSDBClient": "",
        "consistentRead": "false",
        "maxNumberOfDomains": "",
        "operation": "PutAttributes",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "domainName": "",
        "accessKey": "",
        "amazonSDBClient": "",
        "consistentRead": "false",
        "maxNumberOfDomains": "",
        "operation": "PutAttributes",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "synchronous": "false"
      }
    }
  },
  "google-calendar-stream": {
    "Consumer": {
      "endpoint_parameters": {
        "applicationName": "",
        "bridgeErrorHandler": "false",
        "calendarId": "primary",
        "clientId": "",
        "configuration": "",
        "considerLastUpdate": "false",
        "consumeFromNow": "true",
        "maxResults": "10",
        "query": "The com.google.api.services.calendar.model.FreeBusyRequest",
        "scopes": "",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "index": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "acl": "The acl collection of methods",
        "calendars": "The calendars collection of methods",
        "channels": "The channels collection of methods",
        "events": "The events collection of methods",
        "freebusy": "The freebusy collection of methods",
        "list": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "settings": "The settings collection of methods",
        "delete": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "get": "The id of the user setting",
        "insert": "The com.google.api.services.calendar.model.CalendarListEntry",
        "patch": "The com.google.api.services.calendar.model.CalendarListEntry",
        "update": "The com.google.api.services.calendar.model.CalendarListEntry",
        "watch": "The com.google.api.services.calendar.model.Channel",
        "clear": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "stop": "The com.google.api.services.calendar.model.Channel",
        "calendarImport": "The com.google.api.services.calendar.model.Event",
        "instances": "Recurring event identifier",
        "move": "Event identifier",
        "quickAdd": "The text describing the event to be created"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "applicationName": "",
        "bridgeErrorHandler": "false",
        "calendarId": "primary",
        "clientId": "",
        "configuration": "",
        "considerLastUpdate": "false",
        "consumeFromNow": "true",
        "maxResults": "10",
        "query": "The com.google.api.services.calendar.model.FreeBusyRequest",
        "scopes": "",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "index": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "acl": "The acl collection of methods",
        "calendars": "The calendars collection of methods",
        "channels": "The channels collection of methods",
        "events": "The events collection of methods",
        "freebusy": "The freebusy collection of methods",
        "list": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "settings": "The settings collection of methods",
        "delete": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "get": "The id of the user setting",
        "insert": "The com.google.api.services.calendar.model.CalendarListEntry",
        "patch": "The com.google.api.services.calendar.model.CalendarListEntry",
        "update": "The com.google.api.services.calendar.model.CalendarListEntry",
        "watch": "The com.google.api.services.calendar.model.Channel",
        "clear": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the primary keyword.",
        "stop": "The com.google.api.services.calendar.model.Channel",
        "calendarImport": "The com.google.api.services.calendar.model.Event",
        "instances": "Recurring event identifier",
        "move": "Event identifier",
        "quickAdd": "The text describing the event to be created"
      }
    }
  },
  "twilio": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "restClient": "",
        "accountSid": "",
        "password": "",
        "username": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "account": "",
        "address": "",
        "address-dependent-phone-number": "",
        "application": "",
        "available-phone-number-country": "",
        "available-phone-number-country-local": "",
        "available-phone-number-country-mobile": "",
        "available-phone-number-country-toll-free": "",
        "call": "",
        "call-feedback": "",
        "call-feedback-summary": "",
        "call-notification": "",
        "call-recording": "",
        "conference": "",
        "conference-participant": "",
        "connect-app": "",
        "incoming-phone-number": "",
        "incoming-phone-number-local": "",
        "incoming-phone-number-mobile": "",
        "incoming-phone-number-toll-free": "",
        "key": "",
        "message": "",
        "message-feedback": "",
        "message-media": "",
        "new-key": "",
        "new-signing-key": "",
        "notification": "",
        "outgoing-caller-id": "",
        "queue": "",
        "queue-member": "",
        "recording": "",
        "recording-add-on-result": "",
        "recording-add-on-result-payload": "",
        "recording-transcription": "",
        "short-code": "",
        "signing-key": "",
        "sip-credential-list": "",
        "sip-credential-list-credential": "",
        "sip-domain": "",
        "sip-domain-credential-list-mapping": "",
        "sip-domain-ip-access-control-list-mapping": "",
        "sip-ip-access-control-list": "",
        "sip-ip-access-control-list-ip-address": "",
        "token": "",
        "transcription": "",
        "usage-record": "",
        "usage-record-all-time": "",
        "usage-record-daily": "",
        "usage-record-last-month": "",
        "usage-record-monthly": "",
        "usage-record-this-month": "",
        "usage-record-today": "",
        "usage-record-yearly": "",
        "usage-record-yesterday": "",
        "usage-trigger": "",
        "validation-request": "",
        "fetcher": "Make the request to the Twilio API to perform the fetch",
        "updater": "Make the request to the Twilio API to perform the update",
        "creator": "Make the request to the Twilio API to perform the create",
        "deleter": "Make the request to the Twilio API to perform the delete",
        "reader": "Make the request to the Twilio API to perform the read",
        "Endpoint": "Description"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "restClient": "",
        "accountSid": "",
        "password": "",
        "username": "",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "account": "",
        "address": "",
        "address-dependent-phone-number": "",
        "application": "",
        "available-phone-number-country": "",
        "available-phone-number-country-local": "",
        "available-phone-number-country-mobile": "",
        "available-phone-number-country-toll-free": "",
        "call": "",
        "call-feedback": "",
        "call-feedback-summary": "",
        "call-notification": "",
        "call-recording": "",
        "conference": "",
        "conference-participant": "",
        "connect-app": "",
        "incoming-phone-number": "",
        "incoming-phone-number-local": "",
        "incoming-phone-number-mobile": "",
        "incoming-phone-number-toll-free": "",
        "key": "",
        "message": "",
        "message-feedback": "",
        "message-media": "",
        "new-key": "",
        "new-signing-key": "",
        "notification": "",
        "outgoing-caller-id": "",
        "queue": "",
        "queue-member": "",
        "recording": "",
        "recording-add-on-result": "",
        "recording-add-on-result-payload": "",
        "recording-transcription": "",
        "short-code": "",
        "signing-key": "",
        "sip-credential-list": "",
        "sip-credential-list-credential": "",
        "sip-domain": "",
        "sip-domain-credential-list-mapping": "",
        "sip-domain-ip-access-control-list-mapping": "",
        "sip-ip-access-control-list": "",
        "sip-ip-access-control-list-ip-address": "",
        "token": "",
        "transcription": "",
        "usage-record": "",
        "usage-record-all-time": "",
        "usage-record-daily": "",
        "usage-record-last-month": "",
        "usage-record-monthly": "",
        "usage-record-this-month": "",
        "usage-record-today": "",
        "usage-record-yearly": "",
        "usage-record-yesterday": "",
        "usage-trigger": "",
        "validation-request": "",
        "fetcher": "Make the request to the Twilio API to perform the fetch",
        "updater": "Make the request to the Twilio API to perform the update",
        "creator": "Make the request to the Twilio API to perform the create",
        "deleter": "Make the request to the Twilio API to perform the delete",
        "reader": "Make the request to the Twilio API to perform the read",
        "Endpoint": "Description"
      }
    }
  },
  "jclouds": {
    "Consumer": {
      "endpoint_parameters": {
        "blobStores": "",
        "computeServices": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "command": "",
        "providerId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "blobName": "",
        "container": "",
        "directory": "",
        "group": "",
        "hardwareId": "",
        "imageId": "",
        "locationId": "",
        "nodeId": "",
        "nodeState": "",
        "operation": "",
        "user": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "blobStores": "",
        "computeServices": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "command": "",
        "providerId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "blobName": "",
        "container": "",
        "directory": "",
        "group": "",
        "hardwareId": "",
        "imageId": "",
        "locationId": "",
        "nodeId": "",
        "nodeState": "",
        "operation": "",
        "user": ""
      }
    }
  },
  "apns": {
    "Consumer": {
      "endpoint_parameters": {
        "apnsService": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "tokens": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "apnsService": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "tokens": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "guava-eventbus": {
    "Consumer": {
      "endpoint_parameters": {
        "eventBus": "",
        "bridgeErrorHandler": "false",
        "listenerInterface": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "eventBusRef": "",
        "eventClass": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "eventBus": "",
        "bridgeErrorHandler": "false",
        "listenerInterface": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "eventBusRef": "",
        "eventClass": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "djl": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "application": "",
        "artifactId": "",
        "model": "",
        "translator": "",
        "synchronous": "false",
        "CV": "Single-shot object detection"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "application": "",
        "artifactId": "",
        "model": "",
        "translator": "",
        "synchronous": "false",
        "CV": "Single-shot object detection"
      }
    }
  },
  "google-mail-stream": {
    "Consumer": {
      "endpoint_parameters": {
        "applicationName": "",
        "bridgeErrorHandler": "false",
        "clientId": "",
        "labels": "The labels collection of methods",
        "markAsRead": "false",
        "maxResults": "10",
        "query": "is:unread",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "configuration": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "index": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "attachments": "The attachments collection of methods",
        "drafts": "The drafts collection of methods",
        "history": "The history collection of methods",
        "messages": "The messages collection of methods",
        "threads": "The threads collection of methods",
        "users": "The users collection of methods",
        "get": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "create": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "delete": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "list": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "send": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "update": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "patch": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "batchDelete": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "batchModify": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "gmailImport": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "insert": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "modify": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "trash": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "untrash": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "getProfile": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "stop": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "watch": "The user's email address. The special value me can be used to indicate the authenticated user. default: me"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "applicationName": "",
        "bridgeErrorHandler": "false",
        "clientId": "",
        "labels": "The labels collection of methods",
        "markAsRead": "false",
        "maxResults": "10",
        "query": "is:unread",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "configuration": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "index": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "attachments": "The attachments collection of methods",
        "drafts": "The drafts collection of methods",
        "history": "The history collection of methods",
        "messages": "The messages collection of methods",
        "threads": "The threads collection of methods",
        "users": "The users collection of methods",
        "get": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "create": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "delete": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "list": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "send": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "update": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "patch": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "batchDelete": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "batchModify": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "gmailImport": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "insert": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "modify": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "trash": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "untrash": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "getProfile": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "stop": "The user's email address. The special value me can be used to indicate the authenticated user. default: me",
        "watch": "The user's email address. The special value me can be used to indicate the authenticated user. default: me"
      }
    }
  },
  "rest-api": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "path": "",
        "contextIdPattern": "",
        "apiComponentName": "",
        "consumerComponentName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "path": "",
        "contextIdPattern": "",
        "apiComponentName": "",
        "consumerComponentName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "drill": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "clusterId": "",
        "directory": "",
        "mode": "ZK",
        "port": "2181",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "clusterId": "",
        "directory": "",
        "mode": "ZK",
        "port": "2181",
        "synchronous": "false"
      }
    }
  },
  "ignite-set": {
    "Consumer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "operation": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteSetsOperation": "IgniteSetOperation enum"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "operation": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteSetsOperation": "IgniteSetOperation enum"
      }
    }
  },
  "kubernetes-replication-controllers": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "sftp": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "directoryName": "",
        "binary": "false",
        "charset": "",
        "disconnect": "false",
        "doneFileName": "",
        "fileName": "",
        "jschLoggingLevel": "WARN",
        "passiveMode": "false",
        "separator": "UNIX",
        "fastExistsCheck": "false",
        "delete": "false",
        "moveFailed": "",
        "noop": "false",
        "preMove": "",
        "preSort": "false",
        "recursive": "false",
        "sendEmptyMessageWhenIdle": "false",
        "streamDownload": "false",
        "download": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "ignoreFileNotFoundOrPermission{zwsp}Error": "false",
        "inProgressRepository": "",
        "localWorkDirectory": "",
        "onCompletionExceptionHandler": "",
        "pollStrategy": "",
        "processStrategy": "",
        "useList": "true",
        "fileExist": "Override",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "moveExisting": "",
        "tempFileName": "",
        "tempPrefix": "",
        "allowNullBody": "false",
        "chmod": "",
        "disconnectOnBatchComplete": "false",
        "eagerDeleteTargetFile": "true",
        "keepLastModified": "false",
        "moveExistingFileStrategy": "",
        "sendNoop": "true",
        "autoCreate": "true",
        "bindAddress": "",
        "bulkRequests": "",
        "compression": "",
        "connectTimeout": "10000",
        "existDirCheckUsingLs": "true",
        "maximumReconnectAttempts": "",
        "proxy": "",
        "reconnectDelay": "",
        "serverAliveCountMax": "1",
        "serverAliveInterval": "",
        "soTimeout": "5m",
        "stepwise": "true",
        "synchronous": "false",
        "throwExceptionOnConnectFailed": "false",
        "timeout": "30s",
        "antExclude": "",
        "antFilterCaseSensitive": "true",
        "antInclude": "",
        "eagerMaxMessagesPerPoll": "true",
        "exclude": "",
        "filter": "",
        "filterDirectory": "",
        "filterFile": "",
        "idempotent": "false",
        "idempotentKey": "",
        "idempotentRepository": "",
        "include": "",
        "maxDepth": "2147483647",
        "maxMessagesPerPoll": "",
        "minDepth": "",
        "move": "",
        "exclusiveReadLockStrategy": "",
        "readLock": "none",
        "readLockCheckInterval": "1000",
        "readLockDeleteOrphanLockFiles": "true",
        "readLockIdempotentReleaseAsync": "false",
        "readLockIdempotentReleaseAsync{zwsp}PoolSize": "",
        "readLockIdempotentReleaseDelay": "",
        "readLockIdempotentRelease{zwsp}ExecutorService": "",
        "readLockLoggingLevel": "DEBUG",
        "readLockMarkerFile": "true",
        "readLockMinAge": "0",
        "readLockMinLength": "1",
        "readLockRemoveOnCommit": "false",
        "readLockRemoveOnRollback": "true",
        "readLockTimeout": "10000",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "ciphers": "",
        "keyPair": "",
        "knownHosts": "",
        "knownHostsFile": "",
        "knownHostsUri": "",
        "password": "",
        "preferredAuthentications": "",
        "privateKey": "",
        "privateKeyFile": "",
        "privateKeyPassphrase": "",
        "privateKeyUri": "",
        "strictHostKeyChecking": "no",
        "username": "",
        "useUserKnownHostsFile": "true",
        "shuffle": "false",
        "sortBy": "",
        "sorter": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "directoryName": "",
        "binary": "false",
        "charset": "",
        "disconnect": "false",
        "doneFileName": "",
        "fileName": "",
        "jschLoggingLevel": "WARN",
        "passiveMode": "false",
        "separator": "UNIX",
        "fastExistsCheck": "false",
        "delete": "false",
        "moveFailed": "",
        "noop": "false",
        "preMove": "",
        "preSort": "false",
        "recursive": "false",
        "sendEmptyMessageWhenIdle": "false",
        "streamDownload": "false",
        "download": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "ignoreFileNotFoundOrPermission{zwsp}Error": "false",
        "inProgressRepository": "",
        "localWorkDirectory": "",
        "onCompletionExceptionHandler": "",
        "pollStrategy": "",
        "processStrategy": "",
        "useList": "true",
        "fileExist": "Override",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "moveExisting": "",
        "tempFileName": "",
        "tempPrefix": "",
        "allowNullBody": "false",
        "chmod": "",
        "disconnectOnBatchComplete": "false",
        "eagerDeleteTargetFile": "true",
        "keepLastModified": "false",
        "moveExistingFileStrategy": "",
        "sendNoop": "true",
        "autoCreate": "true",
        "bindAddress": "",
        "bulkRequests": "",
        "compression": "",
        "connectTimeout": "10000",
        "existDirCheckUsingLs": "true",
        "maximumReconnectAttempts": "",
        "proxy": "",
        "reconnectDelay": "",
        "serverAliveCountMax": "1",
        "serverAliveInterval": "",
        "soTimeout": "5m",
        "stepwise": "true",
        "synchronous": "false",
        "throwExceptionOnConnectFailed": "false",
        "timeout": "30s",
        "antExclude": "",
        "antFilterCaseSensitive": "true",
        "antInclude": "",
        "eagerMaxMessagesPerPoll": "true",
        "exclude": "",
        "filter": "",
        "filterDirectory": "",
        "filterFile": "",
        "idempotent": "false",
        "idempotentKey": "",
        "idempotentRepository": "",
        "include": "",
        "maxDepth": "2147483647",
        "maxMessagesPerPoll": "",
        "minDepth": "",
        "move": "",
        "exclusiveReadLockStrategy": "",
        "readLock": "none",
        "readLockCheckInterval": "1000",
        "readLockDeleteOrphanLockFiles": "true",
        "readLockIdempotentReleaseAsync": "false",
        "readLockIdempotentReleaseAsync{zwsp}PoolSize": "",
        "readLockIdempotentReleaseDelay": "",
        "readLockIdempotentRelease{zwsp}ExecutorService": "",
        "readLockLoggingLevel": "DEBUG",
        "readLockMarkerFile": "true",
        "readLockMinAge": "0",
        "readLockMinLength": "1",
        "readLockRemoveOnCommit": "false",
        "readLockRemoveOnRollback": "true",
        "readLockTimeout": "10000",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "ciphers": "",
        "keyPair": "",
        "knownHosts": "",
        "knownHostsFile": "",
        "knownHostsUri": "",
        "password": "",
        "preferredAuthentications": "",
        "privateKey": "",
        "privateKeyFile": "",
        "privateKeyPassphrase": "",
        "privateKeyUri": "",
        "strictHostKeyChecking": "no",
        "username": "",
        "useUserKnownHostsFile": "true",
        "shuffle": "false",
        "sortBy": "",
        "sorter": ""
      }
    }
  },
  "aws-sns": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonSNSClient": "",
        "amazonSQSClient": "",
        "autoCreateTopic": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "kmsMasterKeyId": "",
        "lazyStartProducer": "false",
        "messageStructure": "",
        "policy": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "queueUrl": "",
        "region": "",
        "serverSideEncryptionEnabled": "false",
        "subject": "",
        "subscribeSNStoSQS": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "topicNameOrArn": "",
        "headerFilterStrategy": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonSNSClient": "",
        "amazonSQSClient": "",
        "autoCreateTopic": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "kmsMasterKeyId": "",
        "lazyStartProducer": "false",
        "messageStructure": "",
        "policy": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "queueUrl": "",
        "region": "",
        "serverSideEncryptionEnabled": "false",
        "subject": "",
        "subscribeSNStoSQS": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "topicNameOrArn": "",
        "headerFilterStrategy": "",
        "synchronous": "false"
      }
    }
  },
  "splunk": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "splunkConfigurationFactory": "",
        "app": "",
        "connectionTimeout": "5000",
        "host": "localhost",
        "owner": "",
        "port": "8089",
        "scheme": "https",
        "count": "",
        "earliestTime": "",
        "initEarliestTime": "",
        "latestTime": "",
        "savedSearch": "",
        "search": "",
        "sendEmptyMessageWhenIdle": "false",
        "streaming": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "eventHost": "",
        "index": "",
        "raw": "false",
        "source": "",
        "sourceType": "",
        "tcpReceiverPort": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "password": "",
        "sslProtocol": "TLSv1.2",
        "username": "",
        "useSunHttpsHandler": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "splunkConfigurationFactory": "",
        "app": "",
        "connectionTimeout": "5000",
        "host": "localhost",
        "owner": "",
        "port": "8089",
        "scheme": "https",
        "count": "",
        "earliestTime": "",
        "initEarliestTime": "",
        "latestTime": "",
        "savedSearch": "",
        "search": "",
        "sendEmptyMessageWhenIdle": "false",
        "streaming": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "eventHost": "",
        "index": "",
        "raw": "false",
        "source": "",
        "sourceType": "",
        "tcpReceiverPort": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "password": "",
        "sslProtocol": "TLSv1.2",
        "username": "",
        "useSunHttpsHandler": "false"
      }
    }
  },
  "ssh": {
    "Consumer": {
      "endpoint_parameters": {
        "failOnUnknownHost": "false",
        "knownHostsResource": "",
        "timeout": "30000",
        "bridgeErrorHandler": "false",
        "pollCommand": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "channelType": "exec",
        "configuration": "",
        "shellPrompt": "",
        "sleepForShellPrompt": "100",
        "certResource": "",
        "certResourcePassword": "",
        "keyPairProvider": "",
        "keyType": "",
        "password": "",
        "username": "",
        "host": "",
        "port": "22",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "failOnUnknownHost": "false",
        "knownHostsResource": "",
        "timeout": "30000",
        "bridgeErrorHandler": "false",
        "pollCommand": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "channelType": "exec",
        "configuration": "",
        "shellPrompt": "",
        "sleepForShellPrompt": "100",
        "certResource": "",
        "certResourcePassword": "",
        "keyPairProvider": "",
        "keyType": "",
        "password": "",
        "username": "",
        "host": "",
        "port": "22",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "oaipmh": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "baseUrl": "",
        "from": "",
        "identifier": "",
        "metadataPrefix": "oai_dc",
        "set": "",
        "until": "",
        "verb": "ListRecords",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "onlyFirst": "false",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "ignoreSSLWarnings": "false",
        "ssl": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "baseUrl": "",
        "from": "",
        "identifier": "",
        "metadataPrefix": "oai_dc",
        "set": "",
        "until": "",
        "verb": "ListRecords",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "onlyFirst": "false",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "ignoreSSLWarnings": "false",
        "ssl": "false"
      }
    }
  },
  "couchbase": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "protocol": "",
        "hostname": "",
        "port": "8091",
        "bucket": "",
        "collection": "",
        "key": "",
        "scope": "",
        "consumerProcessedStrategy": "none",
        "descending": "false",
        "designDocumentName": "beer",
        "limit": "-1",
        "rangeEndKey": "",
        "rangeStartKey": "",
        "sendEmptyMessageWhenIdle": "false",
        "skip": "-1",
        "viewName": "brewery_beers",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "autoStartIdForInserts": "false",
        "operation": "CCB_PUT",
        "persistTo": "0",
        "producerRetryAttempts": "2",
        "producerRetryPause": "5000",
        "replicateTo": "0",
        "startingIdForInsertsFrom": "",
        "additionalHosts": "",
        "queryTimeout": "2500",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "password": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "protocol": "",
        "hostname": "",
        "port": "8091",
        "bucket": "",
        "collection": "",
        "key": "",
        "scope": "",
        "consumerProcessedStrategy": "none",
        "descending": "false",
        "designDocumentName": "beer",
        "limit": "-1",
        "rangeEndKey": "",
        "rangeStartKey": "",
        "sendEmptyMessageWhenIdle": "false",
        "skip": "-1",
        "viewName": "brewery_beers",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "autoStartIdForInserts": "false",
        "operation": "CCB_PUT",
        "persistTo": "0",
        "producerRetryAttempts": "2",
        "producerRetryPause": "5000",
        "replicateTo": "0",
        "startingIdForInsertsFrom": "",
        "additionalHosts": "",
        "queryTimeout": "2500",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "password": "",
        "username": ""
      }
    }
  },
  "wordpress": {
    "Consumer": {
      "endpoint_parameters": {
        "apiVersion": "2",
        "configuration": "",
        "criteria": "",
        "force": "false",
        "id": "",
        "password": "",
        "searchCriteria": "",
        "url": "",
        "user": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "operationDetail": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "apiVersion": "2",
        "configuration": "",
        "criteria": "",
        "force": "false",
        "id": "",
        "password": "",
        "searchCriteria": "",
        "url": "",
        "user": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "operationDetail": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "mybatis": {
    "Consumer": {
      "endpoint_parameters": {
        "configurationUri": "SqlMapConfig.xml",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "sqlSessionFactory": "",
        "statement": "",
        "maxMessagesPerPoll": "0",
        "onConsume": "",
        "routeEmptyResultSet": "false",
        "sendEmptyMessageWhenIdle": "false",
        "transacted": "false",
        "useIterator": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "processingStrategy": "",
        "executorType": "SIMPLE",
        "inputHeader": "",
        "outputHeader": "",
        "statementType": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configurationUri": "SqlMapConfig.xml",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "sqlSessionFactory": "",
        "statement": "",
        "maxMessagesPerPoll": "0",
        "onConsume": "",
        "routeEmptyResultSet": "false",
        "sendEmptyMessageWhenIdle": "false",
        "transacted": "false",
        "useIterator": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "processingStrategy": "",
        "executorType": "SIMPLE",
        "inputHeader": "",
        "outputHeader": "",
        "statementType": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "stax": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "contentHandlerClass": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "contentHandlerClass": "",
        "synchronous": "false"
      }
    }
  },
  "google-bigquery-sql": {
    "Consumer": {
      "endpoint_parameters": {
        "connectionFactory": "",
        "lazyStartProducer": "false",
        "projectId": "",
        "basicPropertyBinding": "false",
        "query": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "connectionFactory": "",
        "lazyStartProducer": "false",
        "projectId": "",
        "basicPropertyBinding": "false",
        "query": "",
        "synchronous": "false"
      }
    }
  },
  "pubnub": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "channel": "",
        "uuid": "",
        "withPresence": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "pubnub": "",
        "synchronous": "false",
        "authKey": "",
        "cipherKey": "",
        "publishKey": "",
        "secretKey": "",
        "secure": "true",
        "subscribeKey": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "channel": "",
        "uuid": "",
        "withPresence": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "pubnub": "",
        "synchronous": "false",
        "authKey": "",
        "cipherKey": "",
        "publishKey": "",
        "secretKey": "",
        "secure": "true",
        "subscribeKey": ""
      }
    }
  },
  "robotframework": {
    "Consumer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "argumentFile": "",
        "combinedTagStats": "",
        "criticalTags": "",
        "debugFile": "",
        "document": "",
        "dryrun": "false",
        "excludes": "",
        "exitOnFailure": "false",
        "includes": "",
        "listener": "",
        "listeners": "",
        "log": "",
        "logLevel": "",
        "logTitle": "",
        "metadata": "",
        "monitorColors": "",
        "monitorWidth": "78",
        "nonCriticalTags": "",
        "noStatusReturnCode": "false",
        "output": "",
        "outputDirectory": "",
        "randomize": "",
        "report": "",
        "reportBackground": "",
        "reportTitle": "",
        "runEmptySuite": "false",
        "runFailed": "",
        "runMode": "",
        "skipTeardownOnExit": "false",
        "splitOutputs": "",
        "suites": "",
        "suiteStatLevel": "",
        "summaryTitle": "",
        "tagDocs": "",
        "tags": "",
        "tagStatExcludes": "",
        "tagStatIncludes": "",
        "tagStatLinks": "",
        "tests": "",
        "timestampOutputs": "false",
        "variableFiles": "",
        "variables": "",
        "warnOnSkippedFiles": "false",
        "xunitFile": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "resourceUri": "",
        "contentCache": "false",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "argumentFile": "",
        "combinedTagStats": "",
        "criticalTags": "",
        "debugFile": "",
        "document": "",
        "dryrun": "false",
        "excludes": "",
        "exitOnFailure": "false",
        "includes": "",
        "listener": "",
        "listeners": "",
        "log": "",
        "logLevel": "",
        "logTitle": "",
        "metadata": "",
        "monitorColors": "",
        "monitorWidth": "78",
        "nonCriticalTags": "",
        "noStatusReturnCode": "false",
        "output": "",
        "outputDirectory": "",
        "randomize": "",
        "report": "",
        "reportBackground": "",
        "reportTitle": "",
        "runEmptySuite": "false",
        "runFailed": "",
        "runMode": "",
        "skipTeardownOnExit": "false",
        "splitOutputs": "",
        "suites": "",
        "suiteStatLevel": "",
        "summaryTitle": "",
        "tagDocs": "",
        "tags": "",
        "tagStatExcludes": "",
        "tagStatIncludes": "",
        "tagStatLinks": "",
        "tests": "",
        "timestampOutputs": "false",
        "variableFiles": "",
        "variables": "",
        "warnOnSkippedFiles": "false",
        "xunitFile": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "resourceUri": "",
        "contentCache": "false",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "platform-http": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "engine": "",
        "path": "",
        "consumes": "",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "produces": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "fileNameExtWhitelist": "",
        "headerFilterStrategy": "",
        "platformHttpEngine": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "engine": "",
        "path": "",
        "consumes": "",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "produces": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "fileNameExtWhitelist": "",
        "headerFilterStrategy": "",
        "platformHttpEngine": "",
        "synchronous": "false"
      }
    }
  },
  "slack": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "webhookUrl": "",
        "channel": "",
        "maxResults": "10",
        "sendEmptyMessageWhenIdle": "false",
        "serverUrl": "https://slack.com",
        "token": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "iconEmoji": "",
        "iconUrl": "",
        "username": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "webhookUrl": "",
        "channel": "",
        "maxResults": "10",
        "sendEmptyMessageWhenIdle": "false",
        "serverUrl": "https://slack.com",
        "token": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "iconEmoji": "",
        "iconUrl": "",
        "username": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "aws2-kinesis-firehose": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonKinesisFirehoseClient": "",
        "autoDiscoverClient": "true",
        "cborEnabled": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "streamName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonKinesisFirehoseClient": "",
        "autoDiscoverClient": "true",
        "cborEnabled": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "streamName": "",
        "synchronous": "false"
      }
    }
  },
  "lumberjack": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "host": "",
        "port": "5044",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "host": "",
        "port": "5044",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "aws-ddbstream": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "amazonDynamoDbStreamsClient": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "iteratorType": "LATEST",
        "maxResultsPerRequest": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "sequenceNumberProvider": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "tableName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "amazonDynamoDbStreamsClient": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "iteratorType": "LATEST",
        "maxResultsPerRequest": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "sequenceNumberProvider": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "tableName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "amqp": {
    "Consumer": {
      "endpoint_parameters": {
        "clientId": "",
        "connectionFactory": "",
        "disableReplyTo": "false",
        "durableSubscriptionName": "",
        "includeAmqpAnnotations": "false",
        "jmsMessageType": "",
        "replyTo": "",
        "testConnectionOnStartup": "false",
        "acknowledgementModeName": "AUTO_ACKNOWLEDGE",
        "asyncConsumer": "false",
        "autoStartup": "true",
        "cacheLevel": "",
        "cacheLevelName": "CACHE_AUTO",
        "concurrentConsumers": "1",
        "maxConcurrentConsumers": "",
        "replyToDeliveryPersistent": "true",
        "selector": "",
        "subscriptionDurable": "false",
        "subscriptionName": "",
        "subscriptionShared": "false",
        "acceptMessagesWhileStopping": "false",
        "allowReplyManagerQuickStop": "false",
        "defaultTaskExecutorType": "",
        "eagerLoadingOfProperties": "false",
        "eagerPoisonBody": "Poison JMS message due to ${exception.message}",
        "exposeListenerSession": "false",
        "replyToSameDestinationAllowed": "false",
        "taskExecutor": "",
        "deliveryDelay": "-1",
        "deliveryMode": "",
        "deliveryPersistent": "true",
        "explicitQosEnabled": "false",
        "formatDateHeadersToIso8601": "false",
        "lazyStartProducer": "false",
        "preserveMessageQos": "false",
        "priority": "4",
        "replyToConcurrentConsumers": "1",
        "replyToMaxConcurrentConsumers": "",
        "replyToOnTimeoutMaxConcurrent{zwsp}Consumers": "1",
        "replyToOverride": "",
        "replyToType": "",
        "requestTimeout": "20000",
        "timeToLive": "-1",
        "allowAdditionalHeaders": "",
        "allowNullBody": "true",
        "alwaysCopyMessage": "false",
        "correlationProperty": "",
        "disableTimeToLive": "false",
        "forceSendOriginalMessage": "false",
        "includeSentJMSMessageID": "false",
        "replyToCacheLevelName": "",
        "replyToDestinationSelectorName": "",
        "streamMessageTypeEnabled": "false",
        "allowAutoWiredConnection{zwsp}Factory": "true",
        "allowAutoWiredDestination{zwsp}Resolver": "true",
        "allowSerializedHeaders": "false",
        "artemisStreamingEnabled": "true",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "destinationResolver": "",
        "errorHandler": "",
        "exceptionListener": "",
        "idleConsumerLimit": "1",
        "idleTaskExecutionLimit": "1",
        "includeAllJMSXProperties": "false",
        "jmsKeyFormatStrategy": "",
        "mapJmsMessage": "true",
        "maxMessagesPerTask": "-1",
        "messageConverter": "",
        "messageCreatedStrategy": "",
        "messageIdEnabled": "true",
        "messageListenerContainer{zwsp}Factory": "",
        "messageTimestampEnabled": "true",
        "pubSubNoLocal": "false",
        "queueBrowseStrategy": "",
        "receiveTimeout": "1000",
        "recoveryInterval": "5000",
        "requestTimeoutCheckerInterval": "1000",
        "transferException": "false",
        "transferExchange": "false",
        "useMessageIDAsCorrelationID": "false",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedCounter": "50",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedThreadSleepingTime": "100",
        "headerFilterStrategy": "",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "password": "",
        "username": "",
        "transacted": "false",
        "transactedInOut": "false",
        "lazyCreateTransactionManager": "true",
        "transactionManager": "",
        "transactionName": "",
        "transactionTimeout": "-1",
        "destinationType": "queue",
        "destinationName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "clientId": "",
        "connectionFactory": "",
        "disableReplyTo": "false",
        "durableSubscriptionName": "",
        "includeAmqpAnnotations": "false",
        "jmsMessageType": "",
        "replyTo": "",
        "testConnectionOnStartup": "false",
        "acknowledgementModeName": "AUTO_ACKNOWLEDGE",
        "asyncConsumer": "false",
        "autoStartup": "true",
        "cacheLevel": "",
        "cacheLevelName": "CACHE_AUTO",
        "concurrentConsumers": "1",
        "maxConcurrentConsumers": "",
        "replyToDeliveryPersistent": "true",
        "selector": "",
        "subscriptionDurable": "false",
        "subscriptionName": "",
        "subscriptionShared": "false",
        "acceptMessagesWhileStopping": "false",
        "allowReplyManagerQuickStop": "false",
        "defaultTaskExecutorType": "",
        "eagerLoadingOfProperties": "false",
        "eagerPoisonBody": "Poison JMS message due to ${exception.message}",
        "exposeListenerSession": "false",
        "replyToSameDestinationAllowed": "false",
        "taskExecutor": "",
        "deliveryDelay": "-1",
        "deliveryMode": "",
        "deliveryPersistent": "true",
        "explicitQosEnabled": "false",
        "formatDateHeadersToIso8601": "false",
        "lazyStartProducer": "false",
        "preserveMessageQos": "false",
        "priority": "4",
        "replyToConcurrentConsumers": "1",
        "replyToMaxConcurrentConsumers": "",
        "replyToOnTimeoutMaxConcurrent{zwsp}Consumers": "1",
        "replyToOverride": "",
        "replyToType": "",
        "requestTimeout": "20000",
        "timeToLive": "-1",
        "allowAdditionalHeaders": "",
        "allowNullBody": "true",
        "alwaysCopyMessage": "false",
        "correlationProperty": "",
        "disableTimeToLive": "false",
        "forceSendOriginalMessage": "false",
        "includeSentJMSMessageID": "false",
        "replyToCacheLevelName": "",
        "replyToDestinationSelectorName": "",
        "streamMessageTypeEnabled": "false",
        "allowAutoWiredConnection{zwsp}Factory": "true",
        "allowAutoWiredDestination{zwsp}Resolver": "true",
        "allowSerializedHeaders": "false",
        "artemisStreamingEnabled": "true",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "destinationResolver": "",
        "errorHandler": "",
        "exceptionListener": "",
        "idleConsumerLimit": "1",
        "idleTaskExecutionLimit": "1",
        "includeAllJMSXProperties": "false",
        "jmsKeyFormatStrategy": "",
        "mapJmsMessage": "true",
        "maxMessagesPerTask": "-1",
        "messageConverter": "",
        "messageCreatedStrategy": "",
        "messageIdEnabled": "true",
        "messageListenerContainer{zwsp}Factory": "",
        "messageTimestampEnabled": "true",
        "pubSubNoLocal": "false",
        "queueBrowseStrategy": "",
        "receiveTimeout": "1000",
        "recoveryInterval": "5000",
        "requestTimeoutCheckerInterval": "1000",
        "transferException": "false",
        "transferExchange": "false",
        "useMessageIDAsCorrelationID": "false",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedCounter": "50",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedThreadSleepingTime": "100",
        "headerFilterStrategy": "",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "password": "",
        "username": "",
        "transacted": "false",
        "transactedInOut": "false",
        "lazyCreateTransactionManager": "true",
        "transactionManager": "",
        "transactionName": "",
        "transactionTimeout": "-1",
        "destinationType": "queue",
        "destinationName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "olingo2": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "connectTimeout": "30000",
        "contentType": "application/json;charset=utf-8",
        "entityProviderReadProperties": "",
        "entityProviderWriteProperties": "",
        "filterAlreadySeen": "false",
        "httpHeaders": "",
        "proxy": "",
        "serviceUri": "",
        "socketTimeout": "30000",
        "bridgeErrorHandler": "false",
        "splitResult": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpAsyncClientBuilder": "",
        "httpClientBuilder": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "DEFAULT": "Olingo2 Client Api Interface",
        "batch": "*Optional*  Callback handler",
        "create": "*Optional*  Callback handler",
        "delete": "*Optional*  Org.apache.olingo.odata2.api.commons.HttpStatusCodes callback handler",
        "merge": "*Optional*  Org.apache.olingo.odata2.api.ep.entry.ODataEntry callback handler",
        "patch": "*Optional*  Org.apache.olingo.odata2.api.ep.entry.ODataEntry callback handler",
        "read": "*Optional*  Callback handler",
        "update": "*Optional*  Org.apache.olingo.odata2.api.ep.entry.ODataEntry callback handler",
        "uread": "*Optional*  Callback handler"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "connectTimeout": "30000",
        "contentType": "application/json;charset=utf-8",
        "entityProviderReadProperties": "",
        "entityProviderWriteProperties": "",
        "filterAlreadySeen": "false",
        "httpHeaders": "",
        "proxy": "",
        "serviceUri": "",
        "socketTimeout": "30000",
        "bridgeErrorHandler": "false",
        "splitResult": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpAsyncClientBuilder": "",
        "httpClientBuilder": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "DEFAULT": "Olingo2 Client Api Interface",
        "batch": "*Optional*  Callback handler",
        "create": "*Optional*  Callback handler",
        "delete": "*Optional*  Org.apache.olingo.odata2.api.commons.HttpStatusCodes callback handler",
        "merge": "*Optional*  Org.apache.olingo.odata2.api.ep.entry.ODataEntry callback handler",
        "patch": "*Optional*  Org.apache.olingo.odata2.api.ep.entry.ODataEntry callback handler",
        "read": "*Optional*  Callback handler",
        "update": "*Optional*  Org.apache.olingo.odata2.api.ep.entry.ODataEntry callback handler",
        "uread": "*Optional*  Callback handler"
      }
    }
  },
  "jgroups": {
    "Consumer": {
      "endpoint_parameters": {
        "channel": "",
        "channelProperties": "",
        "bridgeErrorHandler": "false",
        "enableViewMessages": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clusterName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "channel": "",
        "channelProperties": "",
        "bridgeErrorHandler": "false",
        "enableViewMessages": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clusterName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "openstack-keystone": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    }
  },
  "xslt-saxon": {
    "Consumer": {
      "endpoint_parameters": {
        "contentCache": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "saxonConfiguration": "",
        "saxonConfigurationProperties": "",
        "saxonExtensionFunctions": "",
        "transformerFactoryClass": "",
        "transformerFactory{zwsp}ConfigurationStrategy": "",
        "uriResolver": "",
        "uriResolverFactory": "",
        "resourceUri": "",
        "allowStAX": "true",
        "deleteOutputFile": "false",
        "failOnNullBody": "true",
        "output": "string",
        "transformerCacheSize": "0",
        "entityResolver": "",
        "errorListener": "",
        "resultHandlerFactory": "",
        "synchronous": "false",
        "transformerFactory": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "contentCache": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "saxonConfiguration": "",
        "saxonConfigurationProperties": "",
        "saxonExtensionFunctions": "",
        "transformerFactoryClass": "",
        "transformerFactory{zwsp}ConfigurationStrategy": "",
        "uriResolver": "",
        "uriResolverFactory": "",
        "resourceUri": "",
        "allowStAX": "true",
        "deleteOutputFile": "false",
        "failOnNullBody": "true",
        "output": "string",
        "transformerCacheSize": "0",
        "entityResolver": "",
        "errorListener": "",
        "resultHandlerFactory": "",
        "synchronous": "false",
        "transformerFactory": ""
      }
    }
  },
  "pg-replication-slot": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "slot": "",
        "host": "localhost",
        "port": "5432",
        "database": "",
        "outputPlugin": "",
        "password": "",
        "user": "postgres",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "autoCreateSlot": "true",
        "slotOptions": "",
        "statusInterval": "10",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "slot": "",
        "host": "localhost",
        "port": "5432",
        "database": "",
        "outputPlugin": "",
        "password": "",
        "user": "postgres",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "autoCreateSlot": "true",
        "slotOptions": "",
        "statusInterval": "10",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "infinispan": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "hosts": "",
        "queryBuilder": "",
        "secure": "false",
        "bridgeErrorHandler": "false",
        "clusteredListener": "false",
        "command": "PUT",
        "customListener": "",
        "eventTypes": "",
        "sync": "true",
        "defaultValue": "",
        "key": "",
        "lazyStartProducer": "false",
        "oldValue": "",
        "operation": "PUT",
        "value": "",
        "password": "",
        "saslMechanism": "",
        "securityRealm": "",
        "securityServerName": "",
        "username": "",
        "basicPropertyBinding": "false",
        "cacheContainer": "",
        "cacheContainerConfiguration": "",
        "configurationProperties": "",
        "configurationUri": "",
        "flags": "",
        "remappingFunction": "",
        "resultHeader": "",
        "cacheName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "hosts": "",
        "queryBuilder": "",
        "secure": "false",
        "bridgeErrorHandler": "false",
        "clusteredListener": "false",
        "command": "PUT",
        "customListener": "",
        "eventTypes": "",
        "sync": "true",
        "defaultValue": "",
        "key": "",
        "lazyStartProducer": "false",
        "oldValue": "",
        "operation": "PUT",
        "value": "",
        "password": "",
        "saslMechanism": "",
        "securityRealm": "",
        "securityServerName": "",
        "username": "",
        "basicPropertyBinding": "false",
        "cacheContainer": "",
        "cacheContainerConfiguration": "",
        "configurationProperties": "",
        "configurationUri": "",
        "flags": "",
        "remappingFunction": "",
        "resultHeader": "",
        "cacheName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "nagios": {
    "Consumer": {
      "endpoint_parameters": {
        "connectionTimeout": "5000",
        "lazyStartProducer": "false",
        "timeout": "5000",
        "basicPropertyBinding": "false",
        "configuration": "",
        "encryption": "",
        "password": "",
        "host": "",
        "port": "",
        "sendSync": "true",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "connectionTimeout": "5000",
        "lazyStartProducer": "false",
        "timeout": "5000",
        "basicPropertyBinding": "false",
        "configuration": "",
        "encryption": "",
        "password": "",
        "host": "",
        "port": "",
        "sendSync": "true",
        "synchronous": "false"
      }
    }
  },
  "aws2-iam": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "iamClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "aws-global",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "iamClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "aws-global",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "iec60870-client": {
    "Consumer": {
      "endpoint_parameters": {
        "defaultConnectionOptions": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uriPath": "",
        "dataModuleOptions": "",
        "protocolOptions": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "acknowledgeWindow": "10",
        "adsuAddressType": "",
        "causeOfTransmissionType": "",
        "informationObjectAddressType": "",
        "maxUnacknowledged": "15",
        "timeout1": "15000",
        "timeout2": "10000",
        "timeout3": "20000",
        "causeSourceAddress": "",
        "connectionTimeout": "10000",
        "ignoreBackgroundScan": "true",
        "ignoreDaylightSavingTime": "false",
        "timeZone": "UTC",
        "connectionId": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "defaultConnectionOptions": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uriPath": "",
        "dataModuleOptions": "",
        "protocolOptions": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "acknowledgeWindow": "10",
        "adsuAddressType": "",
        "causeOfTransmissionType": "",
        "informationObjectAddressType": "",
        "maxUnacknowledged": "15",
        "timeout1": "15000",
        "timeout2": "10000",
        "timeout3": "20000",
        "causeSourceAddress": "",
        "connectionTimeout": "10000",
        "ignoreBackgroundScan": "true",
        "ignoreDaylightSavingTime": "false",
        "timeZone": "UTC",
        "connectionId": ""
      }
    }
  },
  "jmx": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "serverURL": "",
        "format": "xml",
        "granularityPeriod": "10000",
        "monitorType": "",
        "objectDomain": "",
        "objectName": "",
        "observedAttribute": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "executorService": "",
        "handback": "",
        "notificationFilter": "",
        "objectProperties": "",
        "reconnectDelay": "10",
        "reconnectOnConnectionFailure": "false",
        "synchronous": "false",
        "testConnectionOnStartup": "true",
        "initThreshold": "",
        "modulus": "",
        "offset": "",
        "differenceMode": "false",
        "notifyHigh": "false",
        "notifyLow": "false",
        "thresholdHigh": "",
        "thresholdLow": "",
        "password": "",
        "user": "",
        "notifyDiffer": "false",
        "notifyMatch": "false",
        "stringToCompare": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "serverURL": "",
        "format": "xml",
        "granularityPeriod": "10000",
        "monitorType": "",
        "objectDomain": "",
        "objectName": "",
        "observedAttribute": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "executorService": "",
        "handback": "",
        "notificationFilter": "",
        "objectProperties": "",
        "reconnectDelay": "10",
        "reconnectOnConnectionFailure": "false",
        "synchronous": "false",
        "testConnectionOnStartup": "true",
        "initThreshold": "",
        "modulus": "",
        "offset": "",
        "differenceMode": "false",
        "notifyHigh": "false",
        "notifyLow": "false",
        "thresholdHigh": "",
        "thresholdLow": "",
        "password": "",
        "user": "",
        "notifyDiffer": "false",
        "notifyMatch": "false",
        "stringToCompare": ""
      }
    }
  },
  "azure-storage-blob": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "blobName": "",
        "blobOffset": "0",
        "blobType": "blockblob",
        "closeStreamAfterRead": "true",
        "configuration": "",
        "credentials": "",
        "dataCount": "",
        "fileDir": "",
        "maxResultsPerPage": "",
        "maxRetryRequests": "0",
        "prefix": "",
        "serviceClient": "",
        "timeout": "",
        "bridgeErrorHandler": "false",
        "blobSequenceNumber": "0",
        "blockListType": "COMMITTED",
        "closeStreamAfterWrite": "true",
        "commitBlockListLater": "true",
        "createAppendBlob": "true",
        "createPageBlob": "true",
        "downloadLinkExpiration": "",
        "lazyStartProducer": "false",
        "operation": "listBlobContainers",
        "pageBlobSize": "512",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "accountName": "",
        "containerName": "",
        "blobServiceClient": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "blobName": "",
        "blobOffset": "0",
        "blobType": "blockblob",
        "closeStreamAfterRead": "true",
        "configuration": "",
        "credentials": "",
        "dataCount": "",
        "fileDir": "",
        "maxResultsPerPage": "",
        "maxRetryRequests": "0",
        "prefix": "",
        "serviceClient": "",
        "timeout": "",
        "bridgeErrorHandler": "false",
        "blobSequenceNumber": "0",
        "blockListType": "COMMITTED",
        "closeStreamAfterWrite": "true",
        "commitBlockListLater": "true",
        "createAppendBlob": "true",
        "createPageBlob": "true",
        "downloadLinkExpiration": "",
        "lazyStartProducer": "false",
        "operation": "listBlobContainers",
        "pageBlobSize": "512",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "accountName": "",
        "containerName": "",
        "blobServiceClient": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "cxfrs": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "headerFilterStrategy": "",
        "useGlobalSslContextParameters": "false",
        "beanId": "",
        "address": "",
        "features": "",
        "loggingFeatureEnabled": "false",
        "loggingSizeLimit": "",
        "modelRef": "",
        "providers": "",
        "resourceClasses": "",
        "schemaLocations": "",
        "skipFaultLogging": "false",
        "publishedEndpointUrl": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "serviceBeans": "",
        "cookieHandler": "",
        "hostnameVerifier": "",
        "sslContextParameters": "",
        "throwExceptionOnFailure": "true",
        "httpClientAPI": "true",
        "ignoreDeleteMethodMessageBody": "false",
        "maxClientCacheSize": "10",
        "binding": "",
        "bus": "",
        "continuationTimeout": "30000",
        "cxfRsConfigurer": "",
        "defaultBus": "false",
        "performInvocation": "false",
        "propagateContexts": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "headerFilterStrategy": "",
        "useGlobalSslContextParameters": "false",
        "beanId": "",
        "address": "",
        "features": "",
        "loggingFeatureEnabled": "false",
        "loggingSizeLimit": "",
        "modelRef": "",
        "providers": "",
        "resourceClasses": "",
        "schemaLocations": "",
        "skipFaultLogging": "false",
        "publishedEndpointUrl": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "serviceBeans": "",
        "cookieHandler": "",
        "hostnameVerifier": "",
        "sslContextParameters": "",
        "throwExceptionOnFailure": "true",
        "httpClientAPI": "true",
        "ignoreDeleteMethodMessageBody": "false",
        "maxClientCacheSize": "10",
        "binding": "",
        "bus": "",
        "continuationTimeout": "30000",
        "cxfRsConfigurer": "",
        "defaultBus": "false",
        "performInvocation": "false",
        "propagateContexts": "false",
        "synchronous": "false"
      }
    }
  },
  "lpr": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hostname": "",
        "port": "",
        "printername": "",
        "copies": "1",
        "docFlavor": "",
        "flavor": "",
        "mediaSize": "na-letter",
        "mediaTray": "",
        "mimeType": "",
        "orientation": "portrait",
        "printerPrefix": "",
        "sendToPrinter": "true",
        "sides": "one-sided",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hostname": "",
        "port": "",
        "printername": "",
        "copies": "1",
        "docFlavor": "",
        "flavor": "",
        "mediaSize": "na-letter",
        "mediaTray": "",
        "mimeType": "",
        "orientation": "portrait",
        "printerPrefix": "",
        "sendToPrinter": "true",
        "sides": "one-sided",
        "synchronous": "false"
      }
    }
  },
  "stream": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "kind": "",
        "encoding": "",
        "fileName": "",
        "fileWatcher": "false",
        "groupLines": "",
        "groupStrategy": "",
        "initialPromptDelay": "2000",
        "promptDelay": "",
        "promptMessage": "",
        "retry": "false",
        "scanStream": "false",
        "scanStreamDelay": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "autoCloseCount": "",
        "closeOnDone": "false",
        "delay": "",
        "readTimeout": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "kind": "",
        "encoding": "",
        "fileName": "",
        "fileWatcher": "false",
        "groupLines": "",
        "groupStrategy": "",
        "initialPromptDelay": "2000",
        "promptDelay": "",
        "promptMessage": "",
        "retry": "false",
        "scanStream": "false",
        "scanStreamDelay": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "autoCloseCount": "",
        "closeOnDone": "false",
        "delay": "",
        "readTimeout": "",
        "synchronous": "false"
      }
    }
  },
  "xquery": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "configurationProperties": "",
        "moduleURIResolver": "",
        "resourceUri": "",
        "allowStAX": "false",
        "headerName": "",
        "namespacePrefixes": "",
        "resultsFormat": "DOM",
        "resultType": "",
        "stripsAllWhiteSpace": "true",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "parameters": "",
        "properties": "",
        "staticQueryContext": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "configurationProperties": "",
        "moduleURIResolver": "",
        "resourceUri": "",
        "allowStAX": "false",
        "headerName": "",
        "namespacePrefixes": "",
        "resultsFormat": "DOM",
        "resultType": "",
        "stripsAllWhiteSpace": "true",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "parameters": "",
        "properties": "",
        "staticQueryContext": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "kubernetes-nodes": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "caffeine-loadcache": {
    "Consumer": {
      "endpoint_parameters": {
        "action": "",
        "cacheLoader": "",
        "createCacheIfNotExist": "true",
        "evictionType": "SIZE_BASED",
        "expireAfterAccessTime": "300",
        "expireAfterWriteTime": "300",
        "initialCapacity": "10000",
        "key": "",
        "lazyStartProducer": "false",
        "maximumSize": "10000",
        "removalListener": "",
        "statsCounter": "",
        "statsEnabled": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "keyType": "",
        "valueType": "",
        "cacheName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "action": "",
        "cacheLoader": "",
        "createCacheIfNotExist": "true",
        "evictionType": "SIZE_BASED",
        "expireAfterAccessTime": "300",
        "expireAfterWriteTime": "300",
        "initialCapacity": "10000",
        "key": "",
        "lazyStartProducer": "false",
        "maximumSize": "10000",
        "removalListener": "",
        "statsCounter": "",
        "statsEnabled": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "keyType": "",
        "valueType": "",
        "cacheName": "",
        "synchronous": "false"
      }
    }
  },
  "smpp": {
    "Consumer": {
      "endpoint_parameters": {
        "initialReconnectDelay": "5000",
        "maxReconnect": "2147483647",
        "reconnectDelay": "5000",
        "splittingPolicy": "ALLOW",
        "systemType": "",
        "addressRange": "",
        "bridgeErrorHandler": "false",
        "destAddr": "1717",
        "destAddrNpi": "",
        "destAddrTon": "",
        "lazySessionCreation": "false",
        "lazyStartProducer": "false",
        "numberingPlanIndicator": "",
        "priorityFlag": "",
        "protocolId": "",
        "registeredDelivery": "",
        "replaceIfPresentFlag": "",
        "serviceType": "",
        "sourceAddr": "1616",
        "sourceAddrNpi": "",
        "sourceAddrTon": "",
        "typeOfNumber": "",
        "basicPropertyBinding": "false",
        "configuration": "",
        "enquireLinkTimer": "5000",
        "sessionStateListener": "",
        "transactionTimer": "10000",
        "alphabet": "",
        "dataCoding": "",
        "encoding": "ISO-8859-1",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "3128",
        "httpProxyUsername": "",
        "proxyHeaders": "",
        "password": "",
        "systemId": "smppclient",
        "usingSSL": "false",
        "host": "localhost",
        "port": "2775",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "initialReconnectDelay": "5000",
        "maxReconnect": "2147483647",
        "reconnectDelay": "5000",
        "splittingPolicy": "ALLOW",
        "systemType": "",
        "addressRange": "",
        "bridgeErrorHandler": "false",
        "destAddr": "1717",
        "destAddrNpi": "",
        "destAddrTon": "",
        "lazySessionCreation": "false",
        "lazyStartProducer": "false",
        "numberingPlanIndicator": "",
        "priorityFlag": "",
        "protocolId": "",
        "registeredDelivery": "",
        "replaceIfPresentFlag": "",
        "serviceType": "",
        "sourceAddr": "1616",
        "sourceAddrNpi": "",
        "sourceAddrTon": "",
        "typeOfNumber": "",
        "basicPropertyBinding": "false",
        "configuration": "",
        "enquireLinkTimer": "5000",
        "sessionStateListener": "",
        "transactionTimer": "10000",
        "alphabet": "",
        "dataCoding": "",
        "encoding": "ISO-8859-1",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "3128",
        "httpProxyUsername": "",
        "proxyHeaders": "",
        "password": "",
        "systemId": "smppclient",
        "usingSSL": "false",
        "host": "localhost",
        "port": "2775",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "ignite-queue": {
    "Consumer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "capacity": "",
        "configuration": "",
        "operation": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "timeoutMillis": "",
        "treatCollectionsAsCacheObjects": "false",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteQueueOperation": "IgniteQueueOperation enum",
        "CamelIgniteQueueMaxElements": "Integer or int",
        "CamelIgniteQueueTransferredCount": "Integer or int",
        "CamelIgniteQueueTimeoutMillis": "Long or long"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "capacity": "",
        "configuration": "",
        "operation": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "timeoutMillis": "",
        "treatCollectionsAsCacheObjects": "false",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteQueueOperation": "IgniteQueueOperation enum",
        "CamelIgniteQueueMaxElements": "Integer or int",
        "CamelIgniteQueueTransferredCount": "Integer or int",
        "CamelIgniteQueueTimeoutMillis": "Long or long"
      }
    }
  },
  "service": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "service": "",
        "serviceSelector": "",
        "delegateUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "service": "",
        "serviceSelector": "",
        "delegateUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "splunk-hec": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "splunkURL": "",
        "token": "",
        "host": "",
        "index": "camel",
        "source": "camel",
        "sourceType": "camel",
        "synchronous": "false",
        "https": "true",
        "skipTlsVerify": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "splunkURL": "",
        "token": "",
        "host": "",
        "index": "camel",
        "source": "camel",
        "sourceType": "camel",
        "synchronous": "false",
        "https": "true",
        "skipTlsVerify": "false"
      }
    }
  },
  "aws-mq": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "amazonMqClient": "",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "amazonMqClient": "",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "hdfs": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "jAASConfiguration": "",
        "kerberosConfigFile": "",
        "hostName": "",
        "port": "8020",
        "path": "",
        "connectOnStartup": "true",
        "fileSystemType": "HDFS",
        "fileType": "NORMAL_FILE",
        "keyType": "NULL",
        "namedNodes": "",
        "owner": "",
        "valueType": "BYTES",
        "pattern": "*",
        "sendEmptyMessageWhenIdle": "false",
        "streamDownload": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "append": "false",
        "overwrite": "true",
        "blockSize": "67108864",
        "bufferSize": "4096",
        "checkIdleInterval": "500",
        "chunkSize": "4096",
        "compressionType": "NONE",
        "openedSuffix": "opened",
        "readSuffix": "read",
        "replication": "3",
        "splitStrategy": "",
        "synchronous": "false",
        "maxMessagesPerPoll": "100",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "kerberosConfigFileLocation": "",
        "kerberosKeytabLocation": "",
        "kerberosUsername": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "jAASConfiguration": "",
        "kerberosConfigFile": "",
        "hostName": "",
        "port": "8020",
        "path": "",
        "connectOnStartup": "true",
        "fileSystemType": "HDFS",
        "fileType": "NORMAL_FILE",
        "keyType": "NULL",
        "namedNodes": "",
        "owner": "",
        "valueType": "BYTES",
        "pattern": "*",
        "sendEmptyMessageWhenIdle": "false",
        "streamDownload": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "append": "false",
        "overwrite": "true",
        "blockSize": "67108864",
        "bufferSize": "4096",
        "checkIdleInterval": "500",
        "chunkSize": "4096",
        "compressionType": "NONE",
        "openedSuffix": "opened",
        "readSuffix": "read",
        "replication": "3",
        "splitStrategy": "",
        "synchronous": "false",
        "maxMessagesPerPoll": "100",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "kerberosConfigFileLocation": "",
        "kerberosKeytabLocation": "",
        "kerberosUsername": ""
      }
    }
  },
  "weather": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "appid": "",
        "headerName": "",
        "language": "en",
        "mode": "JSON",
        "period": "",
        "units": "",
        "weatherApi": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "geoLocationProvider": "",
        "httpClient": "",
        "synchronous": "false",
        "cnt": "",
        "ids": "",
        "lat": "",
        "location": "",
        "lon": "",
        "rightLon": "",
        "topLat": "",
        "zip": "",
        "zoom": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "geolocationAccessKey": "",
        "geolocationRequestHostIP": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "appid": "",
        "headerName": "",
        "language": "en",
        "mode": "JSON",
        "period": "",
        "units": "",
        "weatherApi": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "geoLocationProvider": "",
        "httpClient": "",
        "synchronous": "false",
        "cnt": "",
        "ids": "",
        "lat": "",
        "location": "",
        "lon": "",
        "rightLon": "",
        "topLat": "",
        "zip": "",
        "zoom": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "geolocationAccessKey": "",
        "geolocationRequestHostIP": ""
      }
    }
  },
  "jgroups-raft": {
    "Consumer": {
      "endpoint_parameters": {
        "channelProperties": "raft.xml",
        "raftHandle": "",
        "raftId": "",
        "stateMachine": "NopStateMachine",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clusterName": "",
        "enableRoleChangeEvents": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "channelProperties": "raft.xml",
        "raftHandle": "",
        "raftId": "",
        "stateMachine": "NopStateMachine",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "clusterName": "",
        "enableRoleChangeEvents": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "bean-validator": {
    "Consumer": {
      "endpoint_parameters": {
        "ignoreXmlConfiguration": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "constraintValidatorFactory": "",
        "messageInterpolator": "",
        "traversableResolver": "",
        "validationProviderResolver": "",
        "validatorFactory": "",
        "label": "",
        "group": "javax.validation.groups.Default",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "ignoreXmlConfiguration": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "constraintValidatorFactory": "",
        "messageInterpolator": "",
        "traversableResolver": "",
        "validationProviderResolver": "",
        "validatorFactory": "",
        "label": "",
        "group": "javax.validation.groups.Default",
        "synchronous": "false"
      }
    }
  },
  "telegram": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "baseUri": "",
        "basicPropertyBinding": "false",
        "client": "",
        "clientConfig": "",
        "authorizationToken": "",
        "type": "",
        "limit": "100",
        "sendEmptyMessageWhenIdle": "false",
        "timeout": "30",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "chatId": "",
        "bufferSize": "4096",
        "synchronous": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyType": "HTTP",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "baseUri": "",
        "basicPropertyBinding": "false",
        "client": "",
        "clientConfig": "",
        "authorizationToken": "",
        "type": "",
        "limit": "100",
        "sendEmptyMessageWhenIdle": "false",
        "timeout": "30",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "chatId": "",
        "bufferSize": "4096",
        "synchronous": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyType": "HTTP",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "aws2-ddbstream": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "amazonDynamoDbStreamsClient": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "iteratorType": "LATEST",
        "maxResultsPerRequest": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "sequenceNumberProvider": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "tableName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "amazonDynamoDbStreamsClient": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "iteratorType": "LATEST",
        "maxResultsPerRequest": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "sequenceNumberProvider": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "tableName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "msv": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceResolverFactory": "",
        "schemaFactory": "",
        "resourceUri": "",
        "failOnNullBody": "true",
        "failOnNullHeader": "true",
        "headerName": "",
        "errorHandler": "",
        "resourceResolver": "",
        "schemaLanguage": "http://www.w3.org/2001/XMLSchema",
        "synchronous": "false",
        "useSharedSchema": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceResolverFactory": "",
        "schemaFactory": "",
        "resourceUri": "",
        "failOnNullBody": "true",
        "failOnNullHeader": "true",
        "headerName": "",
        "errorHandler": "",
        "resourceResolver": "",
        "schemaLanguage": "http://www.w3.org/2001/XMLSchema",
        "synchronous": "false",
        "useSharedSchema": "true"
      }
    }
  },
  "ref": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "asterisk": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hostname": "",
        "password": "",
        "username": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "action": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hostname": "",
        "password": "",
        "username": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "action": "",
        "synchronous": "false"
      }
    }
  },
  "aws-swf": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonSWClient": "",
        "configuration": "",
        "dataConverter": "",
        "domainName": "",
        "eventName": "",
        "region": "",
        "version": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "activityList": "",
        "activitySchedulingOptions": "",
        "activityThreadPoolSize": "100",
        "activityTypeExecutionOptions": "",
        "activityTypeRegistration{zwsp}Options": "",
        "basicPropertyBinding": "false",
        "clientConfigurationParameters": "",
        "startWorkflowOptionsParameters": "",
        "sWClientParameters": "",
        "accessKey": "",
        "secretKey": "",
        "childPolicy": "",
        "executionStartToCloseTimeout": "3600",
        "operation": "START",
        "signalName": "",
        "stateResultType": "",
        "taskStartToCloseTimeout": "600",
        "terminationDetails": "",
        "terminationReason": "",
        "workflowList": "",
        "workflowTypeRegistration{zwsp}Options": "",
        "type": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonSWClient": "",
        "configuration": "",
        "dataConverter": "",
        "domainName": "",
        "eventName": "",
        "region": "",
        "version": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "activityList": "",
        "activitySchedulingOptions": "",
        "activityThreadPoolSize": "100",
        "activityTypeExecutionOptions": "",
        "activityTypeRegistration{zwsp}Options": "",
        "basicPropertyBinding": "false",
        "clientConfigurationParameters": "",
        "startWorkflowOptionsParameters": "",
        "sWClientParameters": "",
        "accessKey": "",
        "secretKey": "",
        "childPolicy": "",
        "executionStartToCloseTimeout": "3600",
        "operation": "START",
        "signalName": "",
        "stateResultType": "",
        "taskStartToCloseTimeout": "600",
        "terminationDetails": "",
        "terminationReason": "",
        "workflowList": "",
        "workflowTypeRegistration{zwsp}Options": "",
        "type": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "seda": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultBlockWhenFull": "false",
        "defaultDiscardWhenFull": "false",
        "defaultOfferTimeout": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultQueueFactory": "",
        "queueSize": "1000",
        "size": "1000",
        "exceptionHandler": "",
        "exchangePattern": "",
        "limitConcurrentConsumers": "true",
        "multipleConsumers": "false",
        "pollTimeout": "1000",
        "purgeWhenStopping": "false",
        "blockWhenFull": "false",
        "discardIfNoConsumers": "false",
        "discardWhenFull": "false",
        "failIfNoConsumers": "false",
        "offerTimeout": "",
        "timeout": "30000",
        "waitForTaskToComplete": "IfReplyExpected",
        "queue": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultBlockWhenFull": "false",
        "defaultDiscardWhenFull": "false",
        "defaultOfferTimeout": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultQueueFactory": "",
        "queueSize": "1000",
        "size": "1000",
        "exceptionHandler": "",
        "exchangePattern": "",
        "limitConcurrentConsumers": "true",
        "multipleConsumers": "false",
        "pollTimeout": "1000",
        "purgeWhenStopping": "false",
        "blockWhenFull": "false",
        "discardIfNoConsumers": "false",
        "discardWhenFull": "false",
        "failIfNoConsumers": "false",
        "offerTimeout": "",
        "timeout": "30000",
        "waitForTaskToComplete": "IfReplyExpected",
        "queue": "",
        "synchronous": "false"
      }
    }
  },
  "ldap": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dirContextName": "",
        "base": "ou=system",
        "pageSize": "",
        "returnedAttributes": "",
        "scope": "subtree",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dirContextName": "",
        "base": "ou=system",
        "pageSize": "",
        "returnedAttributes": "",
        "scope": "subtree",
        "synchronous": "false"
      }
    }
  },
  "mustache": {
    "Consumer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "mustacheFactory": "",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "endDelimiter": "}}",
        "startDelimiter": "{{",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "mustacheFactory": "",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "endDelimiter": "}}",
        "startDelimiter": "{{",
        "synchronous": "false"
      }
    }
  },
  "aws2-sqs": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonAWSHost": "amazonaws.com",
        "amazonSQSClient": "",
        "autoCreateQueue": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "protocol": "https",
        "proxyProtocol": "HTTPS",
        "queueOwnerAWSAccountId": "",
        "region": "",
        "trustAllCertificates": "false",
        "attributeNames": "",
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultVisibilityTimeout": "",
        "deleteAfterRead": "true",
        "deleteIfFiltered": "true",
        "extendMessageVisibility": "false",
        "kmsDataKeyReusePeriodSeconds": "",
        "kmsMasterKeyId": "",
        "messageAttributeNames": "",
        "serverSideEncryptionEnabled": "false",
        "visibilityTimeout": "",
        "waitTimeSeconds": "",
        "delaySeconds": "",
        "lazyStartProducer": "false",
        "messageDeduplicationIdStrategy": "useExchangeId",
        "messageGroupIdStrategy": "",
        "operation": "",
        "basicPropertyBinding": "false",
        "delayQueue": "false",
        "queueUrl": "",
        "proxyHost": "",
        "proxyPort": "",
        "maximumMessageSize": "",
        "messageRetentionPeriod": "",
        "policy": "",
        "receiveMessageWaitTimeSeconds": "",
        "redrivePolicy": "",
        "accessKey": "",
        "secretKey": "",
        "queueNameOrArn": "",
        "headerFilterStrategy": "",
        "maxMessagesPerPoll": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonAWSHost": "amazonaws.com",
        "amazonSQSClient": "",
        "autoCreateQueue": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "protocol": "https",
        "proxyProtocol": "HTTPS",
        "queueOwnerAWSAccountId": "",
        "region": "",
        "trustAllCertificates": "false",
        "attributeNames": "",
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultVisibilityTimeout": "",
        "deleteAfterRead": "true",
        "deleteIfFiltered": "true",
        "extendMessageVisibility": "false",
        "kmsDataKeyReusePeriodSeconds": "",
        "kmsMasterKeyId": "",
        "messageAttributeNames": "",
        "serverSideEncryptionEnabled": "false",
        "visibilityTimeout": "",
        "waitTimeSeconds": "",
        "delaySeconds": "",
        "lazyStartProducer": "false",
        "messageDeduplicationIdStrategy": "useExchangeId",
        "messageGroupIdStrategy": "",
        "operation": "",
        "basicPropertyBinding": "false",
        "delayQueue": "false",
        "queueUrl": "",
        "proxyHost": "",
        "proxyPort": "",
        "maximumMessageSize": "",
        "messageRetentionPeriod": "",
        "policy": "",
        "receiveMessageWaitTimeSeconds": "",
        "redrivePolicy": "",
        "accessKey": "",
        "secretKey": "",
        "queueNameOrArn": "",
        "headerFilterStrategy": "",
        "maxMessagesPerPoll": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "spring-redis": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "channels": "",
        "command": "SET",
        "connectionFactory": "",
        "redisTemplate": "",
        "serializer": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "listenerContainer": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "channels": "",
        "command": "SET",
        "connectionFactory": "",
        "redisTemplate": "",
        "serializer": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "listenerContainer": "",
        "synchronous": "false"
      }
    }
  },
  "activemq": {
    "Consumer": {
      "endpoint_parameters": {
        "brokerURL": "",
        "clientId": "",
        "connectionFactory": "",
        "disableReplyTo": "false",
        "durableSubscriptionName": "",
        "jmsMessageType": "",
        "replyTo": "",
        "testConnectionOnStartup": "false",
        "usePooledConnection": "true",
        "useSingleConnection": "false",
        "acknowledgementModeName": "AUTO_ACKNOWLEDGE",
        "asyncConsumer": "false",
        "autoStartup": "true",
        "cacheLevel": "",
        "cacheLevelName": "CACHE_AUTO",
        "concurrentConsumers": "1",
        "maxConcurrentConsumers": "",
        "replyToDeliveryPersistent": "true",
        "selector": "",
        "subscriptionDurable": "false",
        "subscriptionName": "",
        "subscriptionShared": "false",
        "acceptMessagesWhileStopping": "false",
        "allowReplyManagerQuickStop": "false",
        "defaultTaskExecutorType": "",
        "eagerLoadingOfProperties": "false",
        "eagerPoisonBody": "Poison JMS message due to ${exception.message}",
        "exposeListenerSession": "false",
        "replyToSameDestinationAllowed": "false",
        "taskExecutor": "",
        "deliveryDelay": "-1",
        "deliveryMode": "",
        "deliveryPersistent": "true",
        "explicitQosEnabled": "false",
        "formatDateHeadersToIso8601": "false",
        "lazyStartProducer": "false",
        "preserveMessageQos": "false",
        "priority": "4",
        "replyToConcurrentConsumers": "1",
        "replyToMaxConcurrentConsumers": "",
        "replyToOnTimeoutMaxConcurrent{zwsp}Consumers": "1",
        "replyToOverride": "",
        "replyToType": "",
        "requestTimeout": "20000",
        "timeToLive": "-1",
        "allowAdditionalHeaders": "",
        "allowNullBody": "true",
        "alwaysCopyMessage": "false",
        "correlationProperty": "",
        "disableTimeToLive": "false",
        "forceSendOriginalMessage": "false",
        "includeSentJMSMessageID": "false",
        "replyToCacheLevelName": "",
        "replyToDestinationSelectorName": "",
        "streamMessageTypeEnabled": "false",
        "allowAutoWiredConnection{zwsp}Factory": "true",
        "allowAutoWiredDestination{zwsp}Resolver": "true",
        "allowSerializedHeaders": "false",
        "artemisStreamingEnabled": "true",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "destinationResolver": "",
        "errorHandler": "",
        "exceptionListener": "",
        "idleConsumerLimit": "1",
        "idleTaskExecutionLimit": "1",
        "includeAllJMSXProperties": "false",
        "jmsKeyFormatStrategy": "",
        "mapJmsMessage": "true",
        "maxMessagesPerTask": "-1",
        "messageConverter": "",
        "messageCreatedStrategy": "",
        "messageIdEnabled": "true",
        "messageListenerContainer{zwsp}Factory": "",
        "messageTimestampEnabled": "true",
        "pubSubNoLocal": "false",
        "queueBrowseStrategy": "",
        "receiveTimeout": "1000",
        "recoveryInterval": "5000",
        "requestTimeoutCheckerInterval": "1000",
        "transferException": "false",
        "transferExchange": "false",
        "trustAllPackages": "false",
        "useMessageIDAsCorrelationID": "false",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedCounter": "50",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedThreadSleepingTime": "100",
        "headerFilterStrategy": "",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "password": "",
        "username": "",
        "transacted": "false",
        "transactedInOut": "false",
        "lazyCreateTransactionManager": "true",
        "transactionManager": "",
        "transactionName": "",
        "transactionTimeout": "-1",
        "destinationType": "queue",
        "destinationName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "brokerURL": "",
        "clientId": "",
        "connectionFactory": "",
        "disableReplyTo": "false",
        "durableSubscriptionName": "",
        "jmsMessageType": "",
        "replyTo": "",
        "testConnectionOnStartup": "false",
        "usePooledConnection": "true",
        "useSingleConnection": "false",
        "acknowledgementModeName": "AUTO_ACKNOWLEDGE",
        "asyncConsumer": "false",
        "autoStartup": "true",
        "cacheLevel": "",
        "cacheLevelName": "CACHE_AUTO",
        "concurrentConsumers": "1",
        "maxConcurrentConsumers": "",
        "replyToDeliveryPersistent": "true",
        "selector": "",
        "subscriptionDurable": "false",
        "subscriptionName": "",
        "subscriptionShared": "false",
        "acceptMessagesWhileStopping": "false",
        "allowReplyManagerQuickStop": "false",
        "defaultTaskExecutorType": "",
        "eagerLoadingOfProperties": "false",
        "eagerPoisonBody": "Poison JMS message due to ${exception.message}",
        "exposeListenerSession": "false",
        "replyToSameDestinationAllowed": "false",
        "taskExecutor": "",
        "deliveryDelay": "-1",
        "deliveryMode": "",
        "deliveryPersistent": "true",
        "explicitQosEnabled": "false",
        "formatDateHeadersToIso8601": "false",
        "lazyStartProducer": "false",
        "preserveMessageQos": "false",
        "priority": "4",
        "replyToConcurrentConsumers": "1",
        "replyToMaxConcurrentConsumers": "",
        "replyToOnTimeoutMaxConcurrent{zwsp}Consumers": "1",
        "replyToOverride": "",
        "replyToType": "",
        "requestTimeout": "20000",
        "timeToLive": "-1",
        "allowAdditionalHeaders": "",
        "allowNullBody": "true",
        "alwaysCopyMessage": "false",
        "correlationProperty": "",
        "disableTimeToLive": "false",
        "forceSendOriginalMessage": "false",
        "includeSentJMSMessageID": "false",
        "replyToCacheLevelName": "",
        "replyToDestinationSelectorName": "",
        "streamMessageTypeEnabled": "false",
        "allowAutoWiredConnection{zwsp}Factory": "true",
        "allowAutoWiredDestination{zwsp}Resolver": "true",
        "allowSerializedHeaders": "false",
        "artemisStreamingEnabled": "true",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "destinationResolver": "",
        "errorHandler": "",
        "exceptionListener": "",
        "idleConsumerLimit": "1",
        "idleTaskExecutionLimit": "1",
        "includeAllJMSXProperties": "false",
        "jmsKeyFormatStrategy": "",
        "mapJmsMessage": "true",
        "maxMessagesPerTask": "-1",
        "messageConverter": "",
        "messageCreatedStrategy": "",
        "messageIdEnabled": "true",
        "messageListenerContainer{zwsp}Factory": "",
        "messageTimestampEnabled": "true",
        "pubSubNoLocal": "false",
        "queueBrowseStrategy": "",
        "receiveTimeout": "1000",
        "recoveryInterval": "5000",
        "requestTimeoutCheckerInterval": "1000",
        "transferException": "false",
        "transferExchange": "false",
        "trustAllPackages": "false",
        "useMessageIDAsCorrelationID": "false",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedCounter": "50",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedThreadSleepingTime": "100",
        "headerFilterStrategy": "",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "password": "",
        "username": "",
        "transacted": "false",
        "transactedInOut": "false",
        "lazyCreateTransactionManager": "true",
        "transactionManager": "",
        "transactionName": "",
        "transactionTimeout": "-1",
        "destinationType": "queue",
        "destinationName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "properties": {
    "Consumer": {
      "endpoint_parameters": {
        "camel.component.properties.auto-discover-properties-sources": "true",
        "camel.component.properties.default-fallback-enabled": "true",
        "camel.component.properties.encoding": "",
        "camel.component.properties.environment-variable-mode": "2",
        "camel.component.properties.ignore-missing-location": "false",
        "camel.component.properties.initial-properties": "",
        "camel.component.properties.location": "",
        "camel.component.properties.override-properties": "",
        "camel.component.properties.properties-parser": "",
        "camel.component.properties.system-properties-mode": "2"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "camel.component.properties.auto-discover-properties-sources": "true",
        "camel.component.properties.default-fallback-enabled": "true",
        "camel.component.properties.encoding": "",
        "camel.component.properties.environment-variable-mode": "2",
        "camel.component.properties.ignore-missing-location": "false",
        "camel.component.properties.initial-properties": "",
        "camel.component.properties.location": "",
        "camel.component.properties.override-properties": "",
        "camel.component.properties.properties-parser": "",
        "camel.component.properties.system-properties-mode": "2"
      }
    }
  },
  "scp": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "verboseLogging": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "directoryName": "",
        "chmod": "664",
        "disconnect": "false",
        "fileName": "",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "strictHostKeyChecking": "no",
        "allowNullBody": "false",
        "disconnectOnBatchComplete": "false",
        "moveExistingFileStrategy": "",
        "connectTimeout": "10000",
        "soTimeout": "5m",
        "synchronous": "false",
        "timeout": "30s",
        "knownHostsFile": "",
        "password": "",
        "preferredAuthentications": "",
        "privateKeyBytes": "",
        "privateKeyFile": "",
        "privateKeyFilePassphrase": "",
        "username": "",
        "useUserKnownHostsFile": "true",
        "ciphers": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "verboseLogging": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "directoryName": "",
        "chmod": "664",
        "disconnect": "false",
        "fileName": "",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "strictHostKeyChecking": "no",
        "allowNullBody": "false",
        "disconnectOnBatchComplete": "false",
        "moveExistingFileStrategy": "",
        "connectTimeout": "10000",
        "soTimeout": "5m",
        "synchronous": "false",
        "timeout": "30s",
        "knownHostsFile": "",
        "password": "",
        "preferredAuthentications": "",
        "privateKeyBytes": "",
        "privateKeyFile": "",
        "privateKeyFilePassphrase": "",
        "username": "",
        "useUserKnownHostsFile": "true",
        "ciphers": ""
      }
    }
  },
  "aws2-translate": {
    "Consumer": {
      "endpoint_parameters": {
        "autodetectSourceLanguage": "false",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "translateText",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "sourceLanguage": "",
        "targetLanguage": "",
        "translateClient": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autodetectSourceLanguage": "false",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "translateText",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "sourceLanguage": "",
        "targetLanguage": "",
        "translateClient": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "zookeeper": {
    "Consumer": {
      "endpoint_parameters": {
        "listChildren": "false",
        "timeout": "5000",
        "backoff": "5000",
        "bridgeErrorHandler": "false",
        "repeat": "false",
        "sendEmptyMessageOnDelete": "true",
        "create": "false",
        "createMode": "EPHEMERAL",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "serverUrls": "",
        "path": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "listChildren": "false",
        "timeout": "5000",
        "backoff": "5000",
        "bridgeErrorHandler": "false",
        "repeat": "false",
        "sendEmptyMessageOnDelete": "true",
        "create": "false",
        "createMode": "EPHEMERAL",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "serverUrls": "",
        "path": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "hazelcast-list": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "jira": {
    "Consumer": {
      "endpoint_parameters": {
        "delay": "6000",
        "jiraUrl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "accessToken": "",
        "consumerKey": "",
        "password": "",
        "privateKey": "",
        "username": "",
        "verificationCode": "",
        "type": "",
        "jql": "",
        "maxResults": "50",
        "sendOnlyUpdatedField": "true",
        "watchedFields": "Status,Priority",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "delay": "6000",
        "jiraUrl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "accessToken": "",
        "consumerKey": "",
        "password": "",
        "privateKey": "",
        "username": "",
        "verificationCode": "",
        "type": "",
        "jql": "",
        "maxResults": "50",
        "sendOnlyUpdatedField": "true",
        "watchedFields": "Status,Priority",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "jslt": {
    "Consumer": {
      "endpoint_parameters": {
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "functions": "",
        "objectFilter": "",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "contentCache": "false",
        "prettyPrint": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "functions": "",
        "objectFilter": "",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "contentCache": "false",
        "prettyPrint": "false",
        "synchronous": "false"
      }
    }
  },
  "olingo4": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "connectTimeout": "30000",
        "contentType": "application/json;charset=utf-8",
        "filterAlreadySeen": "false",
        "httpHeaders": "",
        "proxy": "",
        "serviceUri": "",
        "socketTimeout": "30000",
        "bridgeErrorHandler": "false",
        "splitResult": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpAsyncClientBuilder": "",
        "httpClientBuilder": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "DEFAULT": "Olingo4 Client Api Interface",
        "action": "*Optional*  Org.apache.olingo.client.api.domain.ClientEntity callback handler",
        "batch": "*Optional*  Callback handler",
        "create": "*Optional*  Callback handler",
        "delete": "*Optional*  Org.apache.olingo.commons.api.http.HttpStatusCode callback handler",
        "merge": "*Optional*  Org.apache.olingo.client.api.domain.ClientEntity callback handler",
        "patch": "*Optional*  Org.apache.olingo.client.api.domain.ClientEntity callback handler",
        "read": "*Optional*  Callback handler",
        "update": "*Optional*  Org.apache.olingo.client.api.domain.ClientEntity callback handler",
        "uread": "*Optional*  Callback handler"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "connectTimeout": "30000",
        "contentType": "application/json;charset=utf-8",
        "filterAlreadySeen": "false",
        "httpHeaders": "",
        "proxy": "",
        "serviceUri": "",
        "socketTimeout": "30000",
        "bridgeErrorHandler": "false",
        "splitResult": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpAsyncClientBuilder": "",
        "httpClientBuilder": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "apiName": "",
        "inBody": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "DEFAULT": "Olingo4 Client Api Interface",
        "action": "*Optional*  Org.apache.olingo.client.api.domain.ClientEntity callback handler",
        "batch": "*Optional*  Callback handler",
        "create": "*Optional*  Callback handler",
        "delete": "*Optional*  Org.apache.olingo.commons.api.http.HttpStatusCode callback handler",
        "merge": "*Optional*  Org.apache.olingo.client.api.domain.ClientEntity callback handler",
        "patch": "*Optional*  Org.apache.olingo.client.api.domain.ClientEntity callback handler",
        "read": "*Optional*  Callback handler",
        "update": "*Optional*  Org.apache.olingo.client.api.domain.ClientEntity callback handler",
        "uread": "*Optional*  Callback handler"
      }
    }
  },
  "quartz": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "enableJmx": "true",
        "prefixInstanceName": "true",
        "prefixJobNameWithEndpointId": "false",
        "properties": "",
        "propertiesFile": "",
        "propertiesRef": "",
        "basicPropertyBinding": "false",
        "scheduler": "",
        "schedulerFactory": "",
        "autoStartScheduler": "true",
        "interruptJobsOnShutdown": "false",
        "startDelayedSeconds": "",
        "groupName": "Camel",
        "triggerName": "",
        "cron": "",
        "deleteJob": "true",
        "durableJob": "false",
        "pauseJob": "false",
        "recoverableJob": "false",
        "stateful": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "customCalendar": "",
        "jobParameters": "",
        "synchronous": "false",
        "triggerParameters": "",
        "usingFixedCamelContextName": "false",
        "fireNow": "false",
        "triggerStartDelay": "500"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "enableJmx": "true",
        "prefixInstanceName": "true",
        "prefixJobNameWithEndpointId": "false",
        "properties": "",
        "propertiesFile": "",
        "propertiesRef": "",
        "basicPropertyBinding": "false",
        "scheduler": "",
        "schedulerFactory": "",
        "autoStartScheduler": "true",
        "interruptJobsOnShutdown": "false",
        "startDelayedSeconds": "",
        "groupName": "Camel",
        "triggerName": "",
        "cron": "",
        "deleteJob": "true",
        "durableJob": "false",
        "pauseJob": "false",
        "recoverableJob": "false",
        "stateful": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "customCalendar": "",
        "jobParameters": "",
        "synchronous": "false",
        "triggerParameters": "",
        "usingFixedCamelContextName": "false",
        "fireNow": "false",
        "triggerStartDelay": "500"
      }
    }
  },
  "hbase": {
    "Consumer": {
      "endpoint_parameters": {
        "poolMaxSize": "10",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "tableName": "",
        "cellMappingStrategyFactory": "",
        "filters": "",
        "mappingStrategyClassName": "",
        "mappingStrategyName": "",
        "rowMapping": "",
        "rowModel": "",
        "userGroupInformation": "",
        "maxMessagesPerPoll": "",
        "operation": "",
        "remove": "true",
        "removeHandler": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "maxResults": "100",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "poolMaxSize": "10",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "tableName": "",
        "cellMappingStrategyFactory": "",
        "filters": "",
        "mappingStrategyClassName": "",
        "mappingStrategyName": "",
        "rowMapping": "",
        "rowModel": "",
        "userGroupInformation": "",
        "maxMessagesPerPoll": "",
        "operation": "",
        "remove": "true",
        "removeHandler": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "maxResults": "100",
        "synchronous": "false"
      }
    }
  },
  "kubernetes-service-accounts": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "schematron": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "path": "",
        "abort": "false",
        "rules": "",
        "synchronous": "false",
        "uriResolver": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "path": "",
        "abort": "false",
        "rules": "",
        "synchronous": "false",
        "uriResolver": ""
      }
    }
  },
  "bean": {
    "Consumer": {
      "endpoint_parameters": {
        "cache": "",
        "lazyStartProducer": "false",
        "scope": "Singleton",
        "basicPropertyBinding": "false",
        "beanName": "",
        "parameters": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "cache": "",
        "lazyStartProducer": "false",
        "scope": "Singleton",
        "basicPropertyBinding": "false",
        "beanName": "",
        "parameters": "",
        "synchronous": "false"
      }
    }
  },
  "stub": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultBlockWhenFull": "false",
        "defaultDiscardWhenFull": "false",
        "defaultOfferTimeout": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultQueueFactory": "",
        "queueSize": "1000",
        "size": "1000",
        "exceptionHandler": "",
        "exchangePattern": "",
        "limitConcurrentConsumers": "true",
        "multipleConsumers": "false",
        "pollTimeout": "1000",
        "purgeWhenStopping": "false",
        "blockWhenFull": "false",
        "discardIfNoConsumers": "false",
        "discardWhenFull": "false",
        "failIfNoConsumers": "false",
        "offerTimeout": "",
        "timeout": "30000",
        "waitForTaskToComplete": "IfReplyExpected",
        "queue": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultBlockWhenFull": "false",
        "defaultDiscardWhenFull": "false",
        "defaultOfferTimeout": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultQueueFactory": "",
        "queueSize": "1000",
        "size": "1000",
        "exceptionHandler": "",
        "exchangePattern": "",
        "limitConcurrentConsumers": "true",
        "multipleConsumers": "false",
        "pollTimeout": "1000",
        "purgeWhenStopping": "false",
        "blockWhenFull": "false",
        "discardIfNoConsumers": "false",
        "discardWhenFull": "false",
        "failIfNoConsumers": "false",
        "offerTimeout": "",
        "timeout": "30000",
        "waitForTaskToComplete": "IfReplyExpected",
        "queue": "",
        "synchronous": "false"
      }
    }
  },
  "snmp": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "oids": "",
        "protocol": "udp",
        "retries": "2",
        "snmpCommunity": "public",
        "snmpContextEngineId": "",
        "snmpContextName": "",
        "snmpVersion": "0",
        "timeout": "1500",
        "type": "",
        "delay": "60000",
        "sendEmptyMessageWhenIdle": "false",
        "treeList": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "authenticationPassphrase": "",
        "authenticationProtocol": "",
        "privacyPassphrase": "",
        "privacyProtocol": "",
        "securityLevel": "3",
        "securityName": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "oids": "",
        "protocol": "udp",
        "retries": "2",
        "snmpCommunity": "public",
        "snmpContextEngineId": "",
        "snmpContextName": "",
        "snmpVersion": "0",
        "timeout": "1500",
        "type": "",
        "delay": "60000",
        "sendEmptyMessageWhenIdle": "false",
        "treeList": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "authenticationPassphrase": "",
        "authenticationProtocol": "",
        "privacyPassphrase": "",
        "privacyProtocol": "",
        "securityLevel": "3",
        "securityName": ""
      }
    }
  },
  "flatpack": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "type": "delim",
        "resourceUri": "",
        "allowShortLines": "false",
        "delimiter": ",",
        "ignoreExtraColumns": "false",
        "ignoreFirstRecord": "true",
        "splitRows": "true",
        "textQualifier": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "type": "delim",
        "resourceUri": "",
        "allowShortLines": "false",
        "delimiter": ",",
        "ignoreExtraColumns": "false",
        "ignoreFirstRecord": "true",
        "splitRows": "true",
        "textQualifier": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "google-bigquery": {
    "Consumer": {
      "endpoint_parameters": {
        "connectionFactory": "",
        "datasetId": "",
        "lazyStartProducer": "false",
        "projectId": "",
        "basicPropertyBinding": "false",
        "tableId": "",
        "useAsInsertId": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "connectionFactory": "",
        "datasetId": "",
        "lazyStartProducer": "false",
        "projectId": "",
        "basicPropertyBinding": "false",
        "tableId": "",
        "useAsInsertId": "",
        "synchronous": "false"
      }
    }
  },
  "xmlsecurity-sign": {
    "Consumer": {
      "endpoint_parameters": {
        "addKeyInfoReference": "true",
        "baseUri": "",
        "canonicalizationMethod": "http://www.w3.org/TR/2001/REC-xml-c14n-20010315",
        "clearHeaders": "true",
        "contentObjectId": "",
        "contentReferenceType": "",
        "contentReferenceUri": "",
        "cryptoContextProperties": "",
        "digestAlgorithm": "",
        "disallowDoctypeDecl": "true",
        "keyAccessor": "",
        "lazyStartProducer": "false",
        "omitXmlDeclaration": "false",
        "outputXmlEncoding": "",
        "parentLocalName": "",
        "parentNamespace": "",
        "parentXpath": "",
        "plainText": "false",
        "plainTextEncoding": "UTF-8",
        "prefixForXmlSignatureNamespace": "ds",
        "properties": "",
        "schemaResourceUri": "",
        "signatureAlgorithm": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
        "signatureId": "",
        "transformMethods": "",
        "xpathsToIdAttributes": "",
        "basicPropertyBinding": "false",
        "signerConfiguration": "",
        "uriDereferencer": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "addKeyInfoReference": "true",
        "baseUri": "",
        "canonicalizationMethod": "http://www.w3.org/TR/2001/REC-xml-c14n-20010315",
        "clearHeaders": "true",
        "contentObjectId": "",
        "contentReferenceType": "",
        "contentReferenceUri": "",
        "cryptoContextProperties": "",
        "digestAlgorithm": "",
        "disallowDoctypeDecl": "true",
        "keyAccessor": "",
        "lazyStartProducer": "false",
        "omitXmlDeclaration": "false",
        "outputXmlEncoding": "",
        "parentLocalName": "",
        "parentNamespace": "",
        "parentXpath": "",
        "plainText": "false",
        "plainTextEncoding": "UTF-8",
        "prefixForXmlSignatureNamespace": "ds",
        "properties": "",
        "schemaResourceUri": "",
        "signatureAlgorithm": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
        "signatureId": "",
        "transformMethods": "",
        "xpathsToIdAttributes": "",
        "basicPropertyBinding": "false",
        "signerConfiguration": "",
        "uriDereferencer": "",
        "synchronous": "false"
      }
    }
  },
  "dataformat": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "synchronous": "false"
      }
    }
  },
  "consul": {
    "Consumer": {
      "endpoint_parameters": {
        "connectTimeout": "",
        "connectTimeoutMillis": "",
        "consulClient": "",
        "key": "",
        "pingInstance": "true",
        "readTimeout": "",
        "readTimeoutMillis": "",
        "tags": "",
        "url": "",
        "writeTimeout": "",
        "writeTimeoutMillis": "",
        "bridgeErrorHandler": "false",
        "action": "",
        "lazyStartProducer": "false",
        "valueAsString": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "datacenter": "",
        "nearNode": "",
        "nodeMeta": "",
        "aclToken": "",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "blockSeconds": "10",
        "firstIndex": "0",
        "recursive": "false",
        "apiEndpoint": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "connectTimeout": "",
        "connectTimeoutMillis": "",
        "consulClient": "",
        "key": "",
        "pingInstance": "true",
        "readTimeout": "",
        "readTimeoutMillis": "",
        "tags": "",
        "url": "",
        "writeTimeout": "",
        "writeTimeoutMillis": "",
        "bridgeErrorHandler": "false",
        "action": "",
        "lazyStartProducer": "false",
        "valueAsString": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "datacenter": "",
        "nearNode": "",
        "nodeMeta": "",
        "aclToken": "",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "blockSeconds": "10",
        "firstIndex": "0",
        "recursive": "false",
        "apiEndpoint": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "aws-sqs": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonAWSHost": "amazonaws.com",
        "amazonSQSClient": "",
        "autoCreateQueue": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "protocol": "https",
        "proxyProtocol": "HTTPS",
        "queueOwnerAWSAccountId": "",
        "region": "",
        "attributeNames": "",
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultVisibilityTimeout": "",
        "deleteAfterRead": "true",
        "deleteIfFiltered": "true",
        "extendMessageVisibility": "false",
        "kmsDataKeyReusePeriodSeconds": "",
        "kmsMasterKeyId": "",
        "messageAttributeNames": "",
        "serverSideEncryptionEnabled": "false",
        "visibilityTimeout": "",
        "waitTimeSeconds": "",
        "delaySeconds": "",
        "lazyStartProducer": "false",
        "messageDeduplicationIdStrategy": "useExchangeId",
        "messageGroupIdStrategy": "",
        "operation": "",
        "basicPropertyBinding": "false",
        "delayQueue": "false",
        "queueUrl": "",
        "proxyHost": "",
        "proxyPort": "",
        "maximumMessageSize": "",
        "messageRetentionPeriod": "",
        "policy": "",
        "receiveMessageWaitTimeSeconds": "",
        "redrivePolicy": "",
        "accessKey": "",
        "secretKey": "",
        "queueNameOrArn": "",
        "headerFilterStrategy": "",
        "maxMessagesPerPoll": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonAWSHost": "amazonaws.com",
        "amazonSQSClient": "",
        "autoCreateQueue": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "protocol": "https",
        "proxyProtocol": "HTTPS",
        "queueOwnerAWSAccountId": "",
        "region": "",
        "attributeNames": "",
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultVisibilityTimeout": "",
        "deleteAfterRead": "true",
        "deleteIfFiltered": "true",
        "extendMessageVisibility": "false",
        "kmsDataKeyReusePeriodSeconds": "",
        "kmsMasterKeyId": "",
        "messageAttributeNames": "",
        "serverSideEncryptionEnabled": "false",
        "visibilityTimeout": "",
        "waitTimeSeconds": "",
        "delaySeconds": "",
        "lazyStartProducer": "false",
        "messageDeduplicationIdStrategy": "useExchangeId",
        "messageGroupIdStrategy": "",
        "operation": "",
        "basicPropertyBinding": "false",
        "delayQueue": "false",
        "queueUrl": "",
        "proxyHost": "",
        "proxyPort": "",
        "maximumMessageSize": "",
        "messageRetentionPeriod": "",
        "policy": "",
        "receiveMessageWaitTimeSeconds": "",
        "redrivePolicy": "",
        "accessKey": "",
        "secretKey": "",
        "queueNameOrArn": "",
        "headerFilterStrategy": "",
        "maxMessagesPerPoll": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "mvel": {
    "Consumer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "synchronous": "false"
      }
    }
  },
  "vm": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultBlockWhenFull": "false",
        "defaultDiscardWhenFull": "false",
        "defaultOfferTimeout": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultQueueFactory": "",
        "queueSize": "1000",
        "size": "1000",
        "exceptionHandler": "",
        "exchangePattern": "",
        "limitConcurrentConsumers": "true",
        "multipleConsumers": "false",
        "pollTimeout": "1000",
        "purgeWhenStopping": "false",
        "blockWhenFull": "false",
        "discardIfNoConsumers": "false",
        "discardWhenFull": "false",
        "failIfNoConsumers": "false",
        "offerTimeout": "",
        "timeout": "30000",
        "waitForTaskToComplete": "IfReplyExpected",
        "queue": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "defaultBlockWhenFull": "false",
        "defaultDiscardWhenFull": "false",
        "defaultOfferTimeout": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultQueueFactory": "",
        "queueSize": "1000",
        "size": "1000",
        "exceptionHandler": "",
        "exchangePattern": "",
        "limitConcurrentConsumers": "true",
        "multipleConsumers": "false",
        "pollTimeout": "1000",
        "purgeWhenStopping": "false",
        "blockWhenFull": "false",
        "discardIfNoConsumers": "false",
        "discardWhenFull": "false",
        "failIfNoConsumers": "false",
        "offerTimeout": "",
        "timeout": "30000",
        "waitForTaskToComplete": "IfReplyExpected",
        "queue": "",
        "synchronous": "false"
      }
    }
  },
  "controlbus": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "command": "",
        "language": "",
        "action": "",
        "async": "false",
        "loggingLevel": "INFO",
        "restartDelay": "1000",
        "routeId": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "command": "",
        "language": "",
        "action": "",
        "async": "false",
        "loggingLevel": "INFO",
        "restartDelay": "1000",
        "routeId": "",
        "synchronous": "false"
      }
    }
  },
  "elytron": {
    "Consumer": {
      "endpoint_parameters": {
        "domainBuilder": "SecurityDomain.Builder",
        "elytronProvider": "WildFlyElytronBaseProvider"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "domainBuilder": "SecurityDomain.Builder",
        "elytronProvider": "WildFlyElytronBaseProvider"
      }
    }
  },
  "spring-integration": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultChannel": "",
        "inOut": "false",
        "inputChannel": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "outputChannel": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultChannel": "",
        "inOut": "false",
        "inputChannel": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "outputChannel": "",
        "synchronous": "false"
      }
    }
  },
  "xmlsecurity-verify": {
    "Consumer": {
      "endpoint_parameters": {
        "baseUri": "",
        "clearHeaders": "true",
        "cryptoContextProperties": "",
        "disallowDoctypeDecl": "true",
        "keySelector": "",
        "lazyStartProducer": "false",
        "omitXmlDeclaration": "false",
        "outputNodeSearch": "",
        "outputXmlEncoding": "",
        "removeSignatureElements": "false",
        "schemaResourceUri": "",
        "secureValidation": "true",
        "validationFailedHandler": "",
        "xmlSignature2Message": "",
        "xmlSignatureChecker": "",
        "basicPropertyBinding": "false",
        "uriDereferencer": "",
        "verifierConfiguration": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "baseUri": "",
        "clearHeaders": "true",
        "cryptoContextProperties": "",
        "disallowDoctypeDecl": "true",
        "keySelector": "",
        "lazyStartProducer": "false",
        "omitXmlDeclaration": "false",
        "outputNodeSearch": "",
        "outputXmlEncoding": "",
        "removeSignatureElements": "false",
        "schemaResourceUri": "",
        "secureValidation": "true",
        "validationFailedHandler": "",
        "xmlSignature2Message": "",
        "xmlSignatureChecker": "",
        "basicPropertyBinding": "false",
        "uriDereferencer": "",
        "verifierConfiguration": "",
        "synchronous": "false"
      }
    }
  },
  "mybatis-bean": {
    "Consumer": {
      "endpoint_parameters": {
        "configurationUri": "SqlMapConfig.xml",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "sqlSessionFactory": "",
        "beanName": "",
        "executorType": "SIMPLE",
        "inputHeader": "",
        "outputHeader": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configurationUri": "SqlMapConfig.xml",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "sqlSessionFactory": "",
        "beanName": "",
        "executorType": "SIMPLE",
        "inputHeader": "",
        "outputHeader": "",
        "synchronous": "false"
      }
    }
  },
  "stomp": {
    "Consumer": {
      "endpoint_parameters": {
        "brokerURL": "tcp://localhost:61613",
        "customHeaders": "",
        "host": "",
        "version": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "headerFilterStrategy": "",
        "login": "",
        "passcode": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "destination": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "brokerURL": "tcp://localhost:61613",
        "customHeaders": "",
        "host": "",
        "version": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "headerFilterStrategy": "",
        "login": "",
        "passcode": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "destination": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "tika": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "tikaConfig": "",
        "tikaConfigUri": "",
        "tikaParseOutputEncoding": "",
        "tikaParseOutputFormat": "xml",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "tikaConfig": "",
        "tikaConfigUri": "",
        "tikaParseOutputEncoding": "",
        "tikaParseOutputFormat": "xml",
        "synchronous": "false"
      }
    }
  },
  "hazelcast-instance": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "atomix-queue": {
    "Consumer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "ADD",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "ADD",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "flink": {
    "Consumer": {
      "endpoint_parameters": {
        "endpointType": "",
        "collect": "true",
        "dataSet": "",
        "dataSetCallback": "",
        "dataStream": "",
        "dataStreamCallback": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "endpointType": "",
        "collect": "true",
        "dataSet": "",
        "dataSetCallback": "",
        "dataStream": "",
        "dataStreamCallback": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "synchronous": "false"
      }
    }
  },
  "micrometer": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "metricsRegistry": "",
        "metricsType": "",
        "metricsName": "",
        "tags": "",
        "action": "",
        "decrement": "",
        "increment": "",
        "value": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "metricsRegistry": "",
        "metricsType": "",
        "metricsName": "",
        "tags": "",
        "action": "",
        "decrement": "",
        "increment": "",
        "value": "",
        "synchronous": "false"
      }
    }
  },
  "jooq": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "databaseConfiguration": "",
        "bridgeErrorHandler": "false",
        "consumeDelete": "true",
        "lazyStartProducer": "false",
        "operation": "NONE",
        "query": "",
        "basicPropertyBinding": "false",
        "entityType": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "databaseConfiguration": "",
        "bridgeErrorHandler": "false",
        "consumeDelete": "true",
        "lazyStartProducer": "false",
        "operation": "NONE",
        "query": "",
        "basicPropertyBinding": "false",
        "entityType": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "chunk": {
    "Consumer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "extension": "",
        "themeFolder": "",
        "themeLayer": "",
        "themeSubfolder": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "extension": "",
        "themeFolder": "",
        "themeLayer": "",
        "themeSubfolder": "",
        "synchronous": "false"
      }
    }
  },
  "cm-sms": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "defaultFrom": "",
        "defaultMaxNumberOfParts": "8",
        "productToken": "",
        "testConnectionOnStartup": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "defaultFrom": "",
        "defaultMaxNumberOfParts": "8",
        "productToken": "",
        "testConnectionOnStartup": "false",
        "synchronous": "false"
      }
    }
  },
  "file-watch": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "fileHasher": "#murmur3FFileHasher",
        "pollThreads": "1",
        "queueSize": "2147483647",
        "useFileHashing": "true",
        "basicPropertyBinding": "false",
        "path": "",
        "antInclude": "**",
        "autoCreate": "true",
        "events": "CREATE,MODIFY,DELETE",
        "recursive": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "fileHasher": "#murmur3FFileHasher",
        "pollThreads": "1",
        "queueSize": "2147483647",
        "useFileHashing": "true",
        "basicPropertyBinding": "false",
        "path": "",
        "antInclude": "**",
        "autoCreate": "true",
        "events": "CREATE,MODIFY,DELETE",
        "recursive": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "digitalocean": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "Headers",
        "page": "1",
        "perPage": "25",
        "resource": "",
        "digitalOceanClient": "",
        "synchronous": "false",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "oAuthToken": "",
        "`get`": "`CamelDigitalOceanName` _String_",
        "`list`": "",
        "`delete`": "`CamelDigitalOceanName` _String_",
        "`enableBackups`": "`CamelDigitalOceanId` _Integer_",
        "`disableBackups`": "`CamelDigitalOceanId` _Integer_",
        "`enableIpv6`": "`CamelDigitalOceanId` _Integer_",
        "`enablePrivateNetworking`": "`CamelDigitalOceanId` _Integer_",
        "`reboot`": "`CamelDigitalOceanId` _Integer_",
        "`powerCycle`": "`CamelDigitalOceanId` _Integer_",
        "`shutdown`": "`CamelDigitalOceanId` _Integer_",
        "`powerOff`": "`CamelDigitalOceanId` _Integer_",
        "`powerOn`": "`CamelDigitalOceanId` _Integer_",
        "`passwordReset`": "`CamelDigitalOceanId` _Integer_",
        "`listKernels`": "`CamelDigitalOceanId` _Integer_",
        "`listSnapshots`": "`CamelDigitalOceanId` _Integer_",
        "`listBackups`": "`CamelDigitalOceanId` _Integer_",
        "`listActions`": "`CamelDigitalOceanFloatingIPAddress` _String_",
        "`listNeighbors`": "`CamelDigitalOceanId` _Integer_",
        "`listAllNeighbors`": "",
        "`ownList`": "",
        "`convert`": "`CamelDigitalOceanId` _Integer_",
        "`create`": "`CamelDigitalOceanName` _String_",
        "`unassign`": "`CamelDigitalOceanFloatingIPAddress` _String_"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "Headers",
        "page": "1",
        "perPage": "25",
        "resource": "",
        "digitalOceanClient": "",
        "synchronous": "false",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "oAuthToken": "",
        "`get`": "`CamelDigitalOceanName` _String_",
        "`list`": "",
        "`delete`": "`CamelDigitalOceanName` _String_",
        "`enableBackups`": "`CamelDigitalOceanId` _Integer_",
        "`disableBackups`": "`CamelDigitalOceanId` _Integer_",
        "`enableIpv6`": "`CamelDigitalOceanId` _Integer_",
        "`enablePrivateNetworking`": "`CamelDigitalOceanId` _Integer_",
        "`reboot`": "`CamelDigitalOceanId` _Integer_",
        "`powerCycle`": "`CamelDigitalOceanId` _Integer_",
        "`shutdown`": "`CamelDigitalOceanId` _Integer_",
        "`powerOff`": "`CamelDigitalOceanId` _Integer_",
        "`powerOn`": "`CamelDigitalOceanId` _Integer_",
        "`passwordReset`": "`CamelDigitalOceanId` _Integer_",
        "`listKernels`": "`CamelDigitalOceanId` _Integer_",
        "`listSnapshots`": "`CamelDigitalOceanId` _Integer_",
        "`listBackups`": "`CamelDigitalOceanId` _Integer_",
        "`listActions`": "`CamelDigitalOceanFloatingIPAddress` _String_",
        "`listNeighbors`": "`CamelDigitalOceanId` _Integer_",
        "`listAllNeighbors`": "",
        "`ownList`": "",
        "`convert`": "`CamelDigitalOceanId` _Integer_",
        "`create`": "`CamelDigitalOceanName` _String_",
        "`unassign`": "`CamelDigitalOceanFloatingIPAddress` _String_"
      }
    }
  },
  "validator": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceResolverFactory": "",
        "resourceUri": "",
        "failOnNullBody": "true",
        "failOnNullHeader": "true",
        "headerName": "",
        "errorHandler": "",
        "resourceResolver": "",
        "schemaFactory": "",
        "schemaLanguage": "http://www.w3.org/2001/XMLSchema",
        "synchronous": "false",
        "useSharedSchema": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceResolverFactory": "",
        "resourceUri": "",
        "failOnNullBody": "true",
        "failOnNullHeader": "true",
        "headerName": "",
        "errorHandler": "",
        "resourceResolver": "",
        "schemaFactory": "",
        "schemaLanguage": "http://www.w3.org/2001/XMLSchema",
        "synchronous": "false",
        "useSharedSchema": "true"
      }
    }
  },
  "kubernetes-resources-quota": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "rabbitmq": {
    "Consumer": {
      "endpoint_parameters": {
        "addresses": "",
        "autoDelete": "true",
        "connectionFactory": "",
        "deadLetterExchange": "",
        "deadLetterExchangeType": "direct",
        "deadLetterQueue": "",
        "deadLetterRoutingKey": "",
        "declare": "true",
        "durable": "true",
        "exclusive": "false",
        "hostname": "",
        "passive": "false",
        "portNumber": "",
        "skipExchangeDeclare": "false",
        "skipQueueBind": "false",
        "skipQueueDeclare": "false",
        "vhost": "/",
        "autoAck": "true",
        "bridgeErrorHandler": "false",
        "exclusiveConsumer": "false",
        "prefetchCount": "",
        "prefetchEnabled": "false",
        "prefetchGlobal": "false",
        "prefetchSize": "",
        "threadPoolSize": "10",
        "additionalHeaders": "",
        "additionalProperties": "",
        "allowNullHeaders": "false",
        "channelPoolMaxSize": "10",
        "channelPoolMaxWait": "1000",
        "guaranteedDeliveries": "false",
        "immediate": "false",
        "lazyStartProducer": "false",
        "mandatory": "false",
        "publisherAcknowledgements": "false",
        "publisherAcknowledgements{zwsp}Timeout": "",
        "args": "",
        "autoDetectConnectionFactory": "true",
        "automaticRecoveryEnabled": "true",
        "basicPropertyBinding": "false",
        "clientProperties": "",
        "connectionFactoryException{zwsp}Handler": "",
        "connectionTimeout": "60000",
        "networkRecoveryInterval": "5000",
        "requestedChannelMax": "2047",
        "requestedFrameMax": "0",
        "requestedHeartbeat": "60",
        "requestTimeout": "20000",
        "requestTimeoutCheckerInterval": "1000",
        "topologyRecoveryEnabled": "",
        "transferException": "false",
        "password": "guest",
        "sslProtocol": "",
        "trustManager": "",
        "username": "guest",
        "exchangeName": "",
        "exchangeType": "direct",
        "queue": "",
        "routingKey": "",
        "skipDlqDeclare": "false",
        "concurrentConsumers": "1",
        "consumerTag": "",
        "reQueue": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "allowCustomHeaders": "false",
        "bridgeEndpoint": "false",
        "synchronous": "false",
        "allowMessageBodySerialization": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "addresses": "",
        "autoDelete": "true",
        "connectionFactory": "",
        "deadLetterExchange": "",
        "deadLetterExchangeType": "direct",
        "deadLetterQueue": "",
        "deadLetterRoutingKey": "",
        "declare": "true",
        "durable": "true",
        "exclusive": "false",
        "hostname": "",
        "passive": "false",
        "portNumber": "",
        "skipExchangeDeclare": "false",
        "skipQueueBind": "false",
        "skipQueueDeclare": "false",
        "vhost": "/",
        "autoAck": "true",
        "bridgeErrorHandler": "false",
        "exclusiveConsumer": "false",
        "prefetchCount": "",
        "prefetchEnabled": "false",
        "prefetchGlobal": "false",
        "prefetchSize": "",
        "threadPoolSize": "10",
        "additionalHeaders": "",
        "additionalProperties": "",
        "allowNullHeaders": "false",
        "channelPoolMaxSize": "10",
        "channelPoolMaxWait": "1000",
        "guaranteedDeliveries": "false",
        "immediate": "false",
        "lazyStartProducer": "false",
        "mandatory": "false",
        "publisherAcknowledgements": "false",
        "publisherAcknowledgements{zwsp}Timeout": "",
        "args": "",
        "autoDetectConnectionFactory": "true",
        "automaticRecoveryEnabled": "true",
        "basicPropertyBinding": "false",
        "clientProperties": "",
        "connectionFactoryException{zwsp}Handler": "",
        "connectionTimeout": "60000",
        "networkRecoveryInterval": "5000",
        "requestedChannelMax": "2047",
        "requestedFrameMax": "0",
        "requestedHeartbeat": "60",
        "requestTimeout": "20000",
        "requestTimeoutCheckerInterval": "1000",
        "topologyRecoveryEnabled": "",
        "transferException": "false",
        "password": "guest",
        "sslProtocol": "",
        "trustManager": "",
        "username": "guest",
        "exchangeName": "",
        "exchangeType": "direct",
        "queue": "",
        "routingKey": "",
        "skipDlqDeclare": "false",
        "concurrentConsumers": "1",
        "consumerTag": "",
        "reQueue": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "allowCustomHeaders": "false",
        "bridgeEndpoint": "false",
        "synchronous": "false",
        "allowMessageBodySerialization": "false"
      }
    }
  },
  "aws2-sns": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonSNSClient": "",
        "autoCreateTopic": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "kmsMasterKeyId": "",
        "lazyStartProducer": "false",
        "messageStructure": "",
        "policy": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "queueUrl": "",
        "region": "",
        "serverSideEncryptionEnabled": "false",
        "subject": "",
        "subscribeSNStoSQS": "false",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "topicNameOrArn": "",
        "headerFilterStrategy": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonSNSClient": "",
        "autoCreateTopic": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "kmsMasterKeyId": "",
        "lazyStartProducer": "false",
        "messageStructure": "",
        "policy": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "queueUrl": "",
        "region": "",
        "serverSideEncryptionEnabled": "false",
        "subject": "",
        "subscribeSNStoSQS": "false",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "topicNameOrArn": "",
        "headerFilterStrategy": "",
        "synchronous": "false"
      }
    }
  },
  "bonita": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "hostname": "localhost",
        "port": "8080",
        "processName": "",
        "synchronous": "false",
        "password": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "hostname": "localhost",
        "port": "8080",
        "processName": "",
        "synchronous": "false",
        "password": "",
        "username": ""
      }
    }
  },
  "kubernetes-services": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "twitter-timeline": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "accessToken": "",
        "accessTokenSecret": "",
        "consumerKey": "",
        "consumerSecret": "",
        "timelineType": "",
        "user": "",
        "sendEmptyMessageWhenIdle": "false",
        "type": "polling",
        "distanceMetric": "km",
        "exceptionHandler": "",
        "exchangePattern": "",
        "extendedMode": "true",
        "latitude": "",
        "locations": "",
        "longitude": "",
        "pollStrategy": "",
        "radius": "",
        "synchronous": "false",
        "count": "5",
        "filterOld": "true",
        "lang": "",
        "numberOfPages": "1",
        "sinceId": "1",
        "userIds": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "30000",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "sortById": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "accessToken": "",
        "accessTokenSecret": "",
        "consumerKey": "",
        "consumerSecret": "",
        "timelineType": "",
        "user": "",
        "sendEmptyMessageWhenIdle": "false",
        "type": "polling",
        "distanceMetric": "km",
        "exceptionHandler": "",
        "exchangePattern": "",
        "extendedMode": "true",
        "latitude": "",
        "locations": "",
        "longitude": "",
        "pollStrategy": "",
        "radius": "",
        "synchronous": "false",
        "count": "5",
        "filterOld": "true",
        "lang": "",
        "numberOfPages": "1",
        "sinceId": "1",
        "userIds": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "30000",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "sortById": "true"
      }
    }
  },
  "jms": {
    "Consumer": {
      "endpoint_parameters": {
        "clientId": "",
        "connectionFactory": "",
        "disableReplyTo": "false",
        "durableSubscriptionName": "",
        "jmsMessageType": "",
        "replyTo": "",
        "testConnectionOnStartup": "false",
        "acknowledgementModeName": "AUTO_ACKNOWLEDGE",
        "asyncConsumer": "false",
        "autoStartup": "true",
        "cacheLevel": "",
        "cacheLevelName": "CACHE_AUTO",
        "concurrentConsumers": "1",
        "maxConcurrentConsumers": "",
        "replyToDeliveryPersistent": "true",
        "selector": "",
        "subscriptionDurable": "false",
        "subscriptionName": "",
        "subscriptionShared": "false",
        "acceptMessagesWhileStopping": "false",
        "allowReplyManagerQuickStop": "false",
        "defaultTaskExecutorType": "",
        "eagerLoadingOfProperties": "false",
        "eagerPoisonBody": "Poison JMS message due to ${exception.message}",
        "exposeListenerSession": "false",
        "replyToSameDestinationAllowed": "false",
        "taskExecutor": "",
        "deliveryDelay": "-1",
        "deliveryMode": "",
        "deliveryPersistent": "true",
        "explicitQosEnabled": "false",
        "formatDateHeadersToIso8601": "false",
        "lazyStartProducer": "false",
        "preserveMessageQos": "false",
        "priority": "4",
        "replyToConcurrentConsumers": "1",
        "replyToMaxConcurrentConsumers": "",
        "replyToOnTimeoutMaxConcurrent{zwsp}Consumers": "1",
        "replyToOverride": "",
        "replyToType": "",
        "requestTimeout": "20000",
        "timeToLive": "-1",
        "allowAdditionalHeaders": "",
        "allowNullBody": "true",
        "alwaysCopyMessage": "false",
        "correlationProperty": "",
        "disableTimeToLive": "false",
        "forceSendOriginalMessage": "false",
        "includeSentJMSMessageID": "false",
        "replyToCacheLevelName": "",
        "replyToDestinationSelectorName": "",
        "streamMessageTypeEnabled": "false",
        "allowAutoWiredConnection{zwsp}Factory": "true",
        "allowAutoWiredDestination{zwsp}Resolver": "true",
        "allowSerializedHeaders": "false",
        "artemisStreamingEnabled": "true",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "destinationResolver": "",
        "errorHandler": "",
        "exceptionListener": "",
        "idleConsumerLimit": "1",
        "idleTaskExecutionLimit": "1",
        "includeAllJMSXProperties": "false",
        "jmsKeyFormatStrategy": "",
        "mapJmsMessage": "true",
        "maxMessagesPerTask": "-1",
        "messageConverter": "",
        "messageCreatedStrategy": "",
        "messageIdEnabled": "true",
        "messageListenerContainer{zwsp}Factory": "",
        "messageTimestampEnabled": "true",
        "pubSubNoLocal": "false",
        "queueBrowseStrategy": "",
        "receiveTimeout": "1000",
        "recoveryInterval": "5000",
        "requestTimeoutCheckerInterval": "1000",
        "transferException": "false",
        "transferExchange": "false",
        "useMessageIDAsCorrelationID": "false",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedCounter": "50",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedThreadSleepingTime": "100",
        "headerFilterStrategy": "",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "password": "",
        "username": "",
        "transacted": "false",
        "transactedInOut": "false",
        "lazyCreateTransactionManager": "true",
        "transactionManager": "",
        "transactionName": "",
        "transactionTimeout": "-1",
        "destinationType": "queue",
        "destinationName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "clientId": "",
        "connectionFactory": "",
        "disableReplyTo": "false",
        "durableSubscriptionName": "",
        "jmsMessageType": "",
        "replyTo": "",
        "testConnectionOnStartup": "false",
        "acknowledgementModeName": "AUTO_ACKNOWLEDGE",
        "asyncConsumer": "false",
        "autoStartup": "true",
        "cacheLevel": "",
        "cacheLevelName": "CACHE_AUTO",
        "concurrentConsumers": "1",
        "maxConcurrentConsumers": "",
        "replyToDeliveryPersistent": "true",
        "selector": "",
        "subscriptionDurable": "false",
        "subscriptionName": "",
        "subscriptionShared": "false",
        "acceptMessagesWhileStopping": "false",
        "allowReplyManagerQuickStop": "false",
        "defaultTaskExecutorType": "",
        "eagerLoadingOfProperties": "false",
        "eagerPoisonBody": "Poison JMS message due to ${exception.message}",
        "exposeListenerSession": "false",
        "replyToSameDestinationAllowed": "false",
        "taskExecutor": "",
        "deliveryDelay": "-1",
        "deliveryMode": "",
        "deliveryPersistent": "true",
        "explicitQosEnabled": "false",
        "formatDateHeadersToIso8601": "false",
        "lazyStartProducer": "false",
        "preserveMessageQos": "false",
        "priority": "4",
        "replyToConcurrentConsumers": "1",
        "replyToMaxConcurrentConsumers": "",
        "replyToOnTimeoutMaxConcurrent{zwsp}Consumers": "1",
        "replyToOverride": "",
        "replyToType": "",
        "requestTimeout": "20000",
        "timeToLive": "-1",
        "allowAdditionalHeaders": "",
        "allowNullBody": "true",
        "alwaysCopyMessage": "false",
        "correlationProperty": "",
        "disableTimeToLive": "false",
        "forceSendOriginalMessage": "false",
        "includeSentJMSMessageID": "false",
        "replyToCacheLevelName": "",
        "replyToDestinationSelectorName": "",
        "streamMessageTypeEnabled": "false",
        "allowAutoWiredConnection{zwsp}Factory": "true",
        "allowAutoWiredDestination{zwsp}Resolver": "true",
        "allowSerializedHeaders": "false",
        "artemisStreamingEnabled": "true",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "destinationResolver": "",
        "errorHandler": "",
        "exceptionListener": "",
        "idleConsumerLimit": "1",
        "idleTaskExecutionLimit": "1",
        "includeAllJMSXProperties": "false",
        "jmsKeyFormatStrategy": "",
        "mapJmsMessage": "true",
        "maxMessagesPerTask": "-1",
        "messageConverter": "",
        "messageCreatedStrategy": "",
        "messageIdEnabled": "true",
        "messageListenerContainer{zwsp}Factory": "",
        "messageTimestampEnabled": "true",
        "pubSubNoLocal": "false",
        "queueBrowseStrategy": "",
        "receiveTimeout": "1000",
        "recoveryInterval": "5000",
        "requestTimeoutCheckerInterval": "1000",
        "transferException": "false",
        "transferExchange": "false",
        "useMessageIDAsCorrelationID": "false",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedCounter": "50",
        "waitForProvisionCorrelationTo{zwsp}BeUpdatedThreadSleepingTime": "100",
        "headerFilterStrategy": "",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "password": "",
        "username": "",
        "transacted": "false",
        "transactedInOut": "false",
        "lazyCreateTransactionManager": "true",
        "transactionManager": "",
        "transactionName": "",
        "transactionTimeout": "-1",
        "destinationType": "queue",
        "destinationName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "websocket": {
    "Consumer": {
      "endpoint_parameters": {
        "host": "0.0.0.0",
        "port": "9292",
        "bridgeErrorHandler": "false",
        "staticResources": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "enableJmx": "false",
        "maxThreads": "",
        "minThreads": "",
        "threadPool": "",
        "sslContextParameters": "",
        "sslKeyPassword": "",
        "sslKeystore": "",
        "sslPassword": "",
        "useGlobalSslContextParameters": "false",
        "resourceUri": "",
        "maxBinaryMessageSize": "-1",
        "sessionSupport": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "sendTimeout": "30000",
        "sendToAll": "",
        "bufferSize": "8192",
        "maxIdleTime": "300000",
        "maxTextMessageSize": "",
        "minVersion": "13",
        "synchronous": "false",
        "allowedOrigins": "",
        "crossOriginFilterOn": "false",
        "filterPath": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "host": "0.0.0.0",
        "port": "9292",
        "bridgeErrorHandler": "false",
        "staticResources": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "enableJmx": "false",
        "maxThreads": "",
        "minThreads": "",
        "threadPool": "",
        "sslContextParameters": "",
        "sslKeyPassword": "",
        "sslKeystore": "",
        "sslPassword": "",
        "useGlobalSslContextParameters": "false",
        "resourceUri": "",
        "maxBinaryMessageSize": "-1",
        "sessionSupport": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "sendTimeout": "30000",
        "sendToAll": "",
        "bufferSize": "8192",
        "maxIdleTime": "300000",
        "maxTextMessageSize": "",
        "minVersion": "13",
        "synchronous": "false",
        "allowedOrigins": "",
        "crossOriginFilterOn": "false",
        "filterPath": ""
      }
    }
  },
  "http": {
    "Consumer": {
      "endpoint_parameters": {
        "cookieStore": "",
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "clientConnectionManager": "",
        "connectionsPerRoute": "20",
        "connectionTimeToLive": "",
        "httpBinding": "",
        "httpClientConfigurer": "",
        "httpConfiguration": "",
        "httpContext": "",
        "maxTotalConnections": "200",
        "headerFilterStrategy": "",
        "proxyAuthDomain": "",
        "proxyAuthHost": "",
        "proxyAuthMethod": "",
        "proxyAuthNtHost": "",
        "proxyAuthPassword": "",
        "proxyAuthPort": "",
        "proxyAuthUsername": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "x509HostnameVerifier": "",
        "connectionRequestTimeout": "-1",
        "connectTimeout": "-1",
        "socketTimeout": "-1",
        "httpUri": "",
        "disableStreamCache": "false",
        "bridgeEndpoint": "false",
        "chunked": "true",
        "clearExpiredCookies": "true",
        "connectionClose": "false",
        "copyHeaders": "true",
        "customHostHeader": "",
        "httpMethod": "",
        "ignoreResponseBody": "false",
        "preserveHostHeader": "false",
        "throwExceptionOnFailure": "true",
        "transferException": "false",
        "cookieHandler": "",
        "deleteWithBody": "false",
        "getWithBody": "false",
        "okStatusCodeRange": "200-299",
        "clientBuilder": "",
        "httpClient": "",
        "httpClientOptions": "",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "synchronous": "false",
        "useSystemProperties": "false",
        "proxyAuthScheme": "",
        "proxyHost": "",
        "proxyPort": "",
        "authDomain": "",
        "authenticationPreemptive": "false",
        "authHost": "",
        "authMethod": "",
        "authMethodPriority": "",
        "authPassword": "",
        "authUsername": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "cookieStore": "",
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "clientConnectionManager": "",
        "connectionsPerRoute": "20",
        "connectionTimeToLive": "",
        "httpBinding": "",
        "httpClientConfigurer": "",
        "httpConfiguration": "",
        "httpContext": "",
        "maxTotalConnections": "200",
        "headerFilterStrategy": "",
        "proxyAuthDomain": "",
        "proxyAuthHost": "",
        "proxyAuthMethod": "",
        "proxyAuthNtHost": "",
        "proxyAuthPassword": "",
        "proxyAuthPort": "",
        "proxyAuthUsername": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "x509HostnameVerifier": "",
        "connectionRequestTimeout": "-1",
        "connectTimeout": "-1",
        "socketTimeout": "-1",
        "httpUri": "",
        "disableStreamCache": "false",
        "bridgeEndpoint": "false",
        "chunked": "true",
        "clearExpiredCookies": "true",
        "connectionClose": "false",
        "copyHeaders": "true",
        "customHostHeader": "",
        "httpMethod": "",
        "ignoreResponseBody": "false",
        "preserveHostHeader": "false",
        "throwExceptionOnFailure": "true",
        "transferException": "false",
        "cookieHandler": "",
        "deleteWithBody": "false",
        "getWithBody": "false",
        "okStatusCodeRange": "200-299",
        "clientBuilder": "",
        "httpClient": "",
        "httpClientOptions": "",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "synchronous": "false",
        "useSystemProperties": "false",
        "proxyAuthScheme": "",
        "proxyHost": "",
        "proxyPort": "",
        "authDomain": "",
        "authenticationPreemptive": "false",
        "authHost": "",
        "authMethod": "",
        "authMethodPriority": "",
        "authPassword": "",
        "authUsername": ""
      }
    }
  },
  "etcd-stats": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "recursive": "false",
        "servicePath": "/services/",
        "timeout": "",
        "uris": "http://localhost:2379,http://localhost:4001",
        "bridgeErrorHandler": "false",
        "sendEmptyExchangeOnTimeout": "false",
        "fromIndex": "0",
        "lazyStartProducer": "false",
        "timeToLive": "",
        "basicPropertyBinding": "false",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "path": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "recursive": "false",
        "servicePath": "/services/",
        "timeout": "",
        "uris": "http://localhost:2379,http://localhost:4001",
        "bridgeErrorHandler": "false",
        "sendEmptyExchangeOnTimeout": "false",
        "fromIndex": "0",
        "lazyStartProducer": "false",
        "timeToLive": "",
        "basicPropertyBinding": "false",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "path": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "jbpm": {
    "Consumer": {
      "endpoint_parameters": {
        "events": "",
        "type": "",
        "classifier": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionURL": "",
        "eventListenerType": "",
        "attachmentId": "",
        "contentId": "",
        "deploymentId": "",
        "emitterSendItems": "",
        "event": "",
        "eventType": "",
        "identifier": "",
        "maxNumber": "",
        "page": "",
        "pageSize": "",
        "processId": "",
        "processInstanceId": "",
        "targetUserId": "",
        "task": "",
        "taskId": "",
        "timeout": "",
        "userId": "",
        "value": "",
        "workItemId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "startProcess",
        "entities": "",
        "extraJaxbClasses": "",
        "parameters": "",
        "synchronous": "false",
        "statuses": "",
        "password": "",
        "userName": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "events": "",
        "type": "",
        "classifier": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionURL": "",
        "eventListenerType": "",
        "attachmentId": "",
        "contentId": "",
        "deploymentId": "",
        "emitterSendItems": "",
        "event": "",
        "eventType": "",
        "identifier": "",
        "maxNumber": "",
        "page": "",
        "pageSize": "",
        "processId": "",
        "processInstanceId": "",
        "targetUserId": "",
        "task": "",
        "taskId": "",
        "timeout": "",
        "userId": "",
        "value": "",
        "workItemId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "startProcess",
        "entities": "",
        "extraJaxbClasses": "",
        "parameters": "",
        "synchronous": "false",
        "statuses": "",
        "password": "",
        "userName": ""
      }
    }
  },
  "kafka": {
    "Consumer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "brokers": "",
        "clientId": "",
        "configuration": "",
        "headerFilterStrategy": "",
        "reconnectBackoffMaxMs": "1000",
        "shutdownTimeout": "30000",
        "allowManualCommit": "false",
        "autoCommitEnable": "true",
        "autoCommitIntervalMs": "5000",
        "autoCommitOnStop": "sync",
        "autoOffsetReset": "latest",
        "breakOnFirstError": "false",
        "bridgeErrorHandler": "false",
        "checkCrcs": "true",
        "consumerRequestTimeoutMs": "40000",
        "consumersCount": "1",
        "consumerStreams": "10",
        "fetchMaxBytes": "52428800",
        "fetchMinBytes": "1",
        "fetchWaitMaxMs": "500",
        "groupId": "",
        "heartbeatIntervalMs": "3000",
        "kafkaHeaderDeserializer": "",
        "keyDeserializer": "org.apache.kafka.common.serialization.StringDeserializer",
        "maxPartitionFetchBytes": "1048576",
        "maxPollIntervalMs": "",
        "maxPollRecords": "500",
        "offsetRepository": "",
        "partitionAssignor": "org.apache.kafka.clients.consumer.RangeAssignor",
        "pollTimeoutMs": "5000",
        "seekTo": "",
        "sessionTimeoutMs": "10000",
        "specificAvroReader": "false",
        "topicIsPattern": "false",
        "valueDeserializer": "org.apache.kafka.common.serialization.StringDeserializer",
        "kafkaManualCommitFactory": "",
        "bufferMemorySize": "33554432",
        "compressionCodec": "none",
        "connectionMaxIdleMs": "540000",
        "enableIdempotence": "false",
        "kafkaHeaderSerializer": "",
        "key": "",
        "keySerializerClass": "org.apache.kafka.common.serialization.StringSerializer",
        "lazyStartProducer": "false",
        "lingerMs": "0",
        "maxBlockMs": "60000",
        "maxInFlightRequest": "5",
        "maxRequestSize": "1048576",
        "metadataMaxAgeMs": "300000",
        "metricReporters": "",
        "metricsSampleWindowMs": "30000",
        "noOfMetricsSample": "2",
        "partitioner": "org.apache.kafka.clients.producer.internals.DefaultPartitioner",
        "partitionKey": "",
        "producerBatchSize": "16384",
        "queueBufferingMaxMessages": "10000",
        "receiveBufferBytes": "65536",
        "reconnectBackoffMs": "50",
        "recordMetadata": "true",
        "requestRequiredAcks": "1",
        "requestTimeoutMs": "30000",
        "retries": "0",
        "retryBackoffMs": "100",
        "sendBufferBytes": "131072",
        "serializerClass": "org.apache.kafka.common.serialization.StringSerializer",
        "workerPool": "",
        "workerPoolCoreSize": "10",
        "workerPoolMaxSize": "20",
        "basicPropertyBinding": "false",
        "schemaRegistryURL": "",
        "interceptorClasses": "",
        "kerberosBeforeReloginMinTime": "60000",
        "kerberosInitCmd": "/usr/bin/kinit",
        "kerberosRenewJitter": "0.05",
        "kerberosRenewWindowFactor": "0.8",
        "saslJaasConfig": "",
        "saslKerberosServiceName": "",
        "saslMechanism": "GSSAPI",
        "securityProtocol": "PLAINTEXT",
        "sslCipherSuites": "",
        "sslContextParameters": "",
        "sslEnabledProtocols": "",
        "sslEndpointAlgorithm": "https",
        "sslKeymanagerAlgorithm": "SunX509",
        "sslKeyPassword": "",
        "sslKeystoreLocation": "",
        "sslKeystorePassword": "",
        "sslKeystoreType": "JKS",
        "sslProtocol": "",
        "sslProvider": "",
        "sslTrustmanagerAlgorithm": "PKIX",
        "sslTruststoreLocation": "",
        "sslTruststorePassword": "",
        "sslTruststoreType": "JKS",
        "useGlobalSslContextParameters": "false",
        "topic": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "KafkaConstants.TOPIC": "String",
        "KafkaConstants.PARTITION": "Integer",
        "KafkaConstants.OFFSET": "Long",
        "KafkaConstants.KEY": "Object",
        "KafkaConstants.HEADERS": "org.apache.kafka.common.header.Headers",
        "KafkaConstants.LAST_RECORD_BEFORE_COMMIT": "Boolean",
        "KafkaConstants.LAST_POLL_RECORD": "Boolean",
        "KafkaConstants.MANUAL_COMMIT": "KafkaManualCommit",
        "KafkaConstants.OVERRIDE_TOPIC": "String",
        "KafkaConstants.PARTITION_KEY": "Integer",
        "KafkaConstants.KAFKA_RECORDMETA": "List<RecordMetadata>"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "brokers": "",
        "clientId": "",
        "configuration": "",
        "headerFilterStrategy": "",
        "reconnectBackoffMaxMs": "1000",
        "shutdownTimeout": "30000",
        "allowManualCommit": "false",
        "autoCommitEnable": "true",
        "autoCommitIntervalMs": "5000",
        "autoCommitOnStop": "sync",
        "autoOffsetReset": "latest",
        "breakOnFirstError": "false",
        "bridgeErrorHandler": "false",
        "checkCrcs": "true",
        "consumerRequestTimeoutMs": "40000",
        "consumersCount": "1",
        "consumerStreams": "10",
        "fetchMaxBytes": "52428800",
        "fetchMinBytes": "1",
        "fetchWaitMaxMs": "500",
        "groupId": "",
        "heartbeatIntervalMs": "3000",
        "kafkaHeaderDeserializer": "",
        "keyDeserializer": "org.apache.kafka.common.serialization.StringDeserializer",
        "maxPartitionFetchBytes": "1048576",
        "maxPollIntervalMs": "",
        "maxPollRecords": "500",
        "offsetRepository": "",
        "partitionAssignor": "org.apache.kafka.clients.consumer.RangeAssignor",
        "pollTimeoutMs": "5000",
        "seekTo": "",
        "sessionTimeoutMs": "10000",
        "specificAvroReader": "false",
        "topicIsPattern": "false",
        "valueDeserializer": "org.apache.kafka.common.serialization.StringDeserializer",
        "kafkaManualCommitFactory": "",
        "bufferMemorySize": "33554432",
        "compressionCodec": "none",
        "connectionMaxIdleMs": "540000",
        "enableIdempotence": "false",
        "kafkaHeaderSerializer": "",
        "key": "",
        "keySerializerClass": "org.apache.kafka.common.serialization.StringSerializer",
        "lazyStartProducer": "false",
        "lingerMs": "0",
        "maxBlockMs": "60000",
        "maxInFlightRequest": "5",
        "maxRequestSize": "1048576",
        "metadataMaxAgeMs": "300000",
        "metricReporters": "",
        "metricsSampleWindowMs": "30000",
        "noOfMetricsSample": "2",
        "partitioner": "org.apache.kafka.clients.producer.internals.DefaultPartitioner",
        "partitionKey": "",
        "producerBatchSize": "16384",
        "queueBufferingMaxMessages": "10000",
        "receiveBufferBytes": "65536",
        "reconnectBackoffMs": "50",
        "recordMetadata": "true",
        "requestRequiredAcks": "1",
        "requestTimeoutMs": "30000",
        "retries": "0",
        "retryBackoffMs": "100",
        "sendBufferBytes": "131072",
        "serializerClass": "org.apache.kafka.common.serialization.StringSerializer",
        "workerPool": "",
        "workerPoolCoreSize": "10",
        "workerPoolMaxSize": "20",
        "basicPropertyBinding": "false",
        "schemaRegistryURL": "",
        "interceptorClasses": "",
        "kerberosBeforeReloginMinTime": "60000",
        "kerberosInitCmd": "/usr/bin/kinit",
        "kerberosRenewJitter": "0.05",
        "kerberosRenewWindowFactor": "0.8",
        "saslJaasConfig": "",
        "saslKerberosServiceName": "",
        "saslMechanism": "GSSAPI",
        "securityProtocol": "PLAINTEXT",
        "sslCipherSuites": "",
        "sslContextParameters": "",
        "sslEnabledProtocols": "",
        "sslEndpointAlgorithm": "https",
        "sslKeymanagerAlgorithm": "SunX509",
        "sslKeyPassword": "",
        "sslKeystoreLocation": "",
        "sslKeystorePassword": "",
        "sslKeystoreType": "JKS",
        "sslProtocol": "",
        "sslProvider": "",
        "sslTrustmanagerAlgorithm": "PKIX",
        "sslTruststoreLocation": "",
        "sslTruststorePassword": "",
        "sslTruststoreType": "JKS",
        "useGlobalSslContextParameters": "false",
        "topic": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "KafkaConstants.TOPIC": "String",
        "KafkaConstants.PARTITION": "Integer",
        "KafkaConstants.OFFSET": "Long",
        "KafkaConstants.KEY": "Object",
        "KafkaConstants.HEADERS": "org.apache.kafka.common.header.Headers",
        "KafkaConstants.LAST_RECORD_BEFORE_COMMIT": "Boolean",
        "KafkaConstants.LAST_POLL_RECORD": "Boolean",
        "KafkaConstants.MANUAL_COMMIT": "KafkaManualCommit",
        "KafkaConstants.OVERRIDE_TOPIC": "String",
        "KafkaConstants.PARTITION_KEY": "Integer",
        "KafkaConstants.KAFKA_RECORDMETA": "List<RecordMetadata>"
      }
    }
  },
  "corda": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "bridgeErrorHandler": "false",
        "pageSpecification": "200",
        "processSnapshot": "true",
        "sort": "",
        "contractStateClass": "",
        "flowLogicArguments": "",
        "flowLogicClass": "",
        "queryCriteria": "",
        "lazyStartProducer": "false",
        "operation": "",
        "basicPropertyBinding": "false",
        "password": "",
        "username": "",
        "node": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "bridgeErrorHandler": "false",
        "pageSpecification": "200",
        "processSnapshot": "true",
        "sort": "",
        "contractStateClass": "",
        "flowLogicArguments": "",
        "flowLogicClass": "",
        "queryCriteria": "",
        "lazyStartProducer": "false",
        "operation": "",
        "basicPropertyBinding": "false",
        "password": "",
        "username": "",
        "node": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "aws-translate": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "autodetectSourceLanguage": "false",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "translateText",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "sourceLanguage": "",
        "targetLanguage": "",
        "translateClient": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "autodetectSourceLanguage": "false",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "translateText",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "sourceLanguage": "",
        "targetLanguage": "",
        "translateClient": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "file": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "directoryName": "",
        "charset": "",
        "doneFileName": "",
        "fileName": "",
        "delete": "false",
        "moveFailed": "",
        "noop": "false",
        "preMove": "",
        "preSort": "false",
        "recursive": "false",
        "sendEmptyMessageWhenIdle": "false",
        "directoryMustExist": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "extendedAttributes": "",
        "inProgressRepository": "",
        "localWorkDirectory": "",
        "onCompletionExceptionHandler": "",
        "pollStrategy": "",
        "probeContentType": "false",
        "processStrategy": "",
        "startingDirectoryMustExist": "false",
        "startingDirectoryMustHave{zwsp}Access": "false",
        "appendChars": "",
        "fileExist": "Override",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "moveExisting": "",
        "tempFileName": "",
        "tempPrefix": "",
        "allowNullBody": "false",
        "chmod": "",
        "chmodDirectory": "",
        "eagerDeleteTargetFile": "true",
        "forceWrites": "true",
        "keepLastModified": "false",
        "moveExistingFileStrategy": "",
        "autoCreate": "true",
        "bufferSize": "131072",
        "copyAndDeleteOnRenameFail": "true",
        "renameUsingCopy": "false",
        "synchronous": "false",
        "antExclude": "",
        "antFilterCaseSensitive": "true",
        "antInclude": "",
        "eagerMaxMessagesPerPoll": "true",
        "exclude": "",
        "filter": "",
        "filterDirectory": "",
        "filterFile": "",
        "idempotent": "false",
        "idempotentKey": "",
        "idempotentRepository": "",
        "include": "",
        "maxDepth": "2147483647",
        "maxMessagesPerPoll": "",
        "minDepth": "",
        "move": "",
        "exclusiveReadLockStrategy": "",
        "readLock": "none",
        "readLockCheckInterval": "1000",
        "readLockDeleteOrphanLockFiles": "true",
        "readLockIdempotentReleaseAsync": "false",
        "readLockIdempotentReleaseAsync{zwsp}PoolSize": "",
        "readLockIdempotentReleaseDelay": "",
        "readLockIdempotentRelease{zwsp}ExecutorService": "",
        "readLockLoggingLevel": "DEBUG",
        "readLockMarkerFile": "true",
        "readLockMinAge": "0",
        "readLockMinLength": "1",
        "readLockRemoveOnCommit": "false",
        "readLockRemoveOnRollback": "true",
        "readLockTimeout": "10000",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "shuffle": "false",
        "sortBy": "",
        "sorter": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "directoryName": "",
        "charset": "",
        "doneFileName": "",
        "fileName": "",
        "delete": "false",
        "moveFailed": "",
        "noop": "false",
        "preMove": "",
        "preSort": "false",
        "recursive": "false",
        "sendEmptyMessageWhenIdle": "false",
        "directoryMustExist": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "extendedAttributes": "",
        "inProgressRepository": "",
        "localWorkDirectory": "",
        "onCompletionExceptionHandler": "",
        "pollStrategy": "",
        "probeContentType": "false",
        "processStrategy": "",
        "startingDirectoryMustExist": "false",
        "startingDirectoryMustHave{zwsp}Access": "false",
        "appendChars": "",
        "fileExist": "Override",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "moveExisting": "",
        "tempFileName": "",
        "tempPrefix": "",
        "allowNullBody": "false",
        "chmod": "",
        "chmodDirectory": "",
        "eagerDeleteTargetFile": "true",
        "forceWrites": "true",
        "keepLastModified": "false",
        "moveExistingFileStrategy": "",
        "autoCreate": "true",
        "bufferSize": "131072",
        "copyAndDeleteOnRenameFail": "true",
        "renameUsingCopy": "false",
        "synchronous": "false",
        "antExclude": "",
        "antFilterCaseSensitive": "true",
        "antInclude": "",
        "eagerMaxMessagesPerPoll": "true",
        "exclude": "",
        "filter": "",
        "filterDirectory": "",
        "filterFile": "",
        "idempotent": "false",
        "idempotentKey": "",
        "idempotentRepository": "",
        "include": "",
        "maxDepth": "2147483647",
        "maxMessagesPerPoll": "",
        "minDepth": "",
        "move": "",
        "exclusiveReadLockStrategy": "",
        "readLock": "none",
        "readLockCheckInterval": "1000",
        "readLockDeleteOrphanLockFiles": "true",
        "readLockIdempotentReleaseAsync": "false",
        "readLockIdempotentReleaseAsync{zwsp}PoolSize": "",
        "readLockIdempotentReleaseDelay": "",
        "readLockIdempotentRelease{zwsp}ExecutorService": "",
        "readLockLoggingLevel": "DEBUG",
        "readLockMarkerFile": "true",
        "readLockMinAge": "0",
        "readLockMinLength": "1",
        "readLockRemoveOnCommit": "false",
        "readLockRemoveOnRollback": "true",
        "readLockTimeout": "10000",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "shuffle": "false",
        "sortBy": "",
        "sorter": ""
      }
    }
  },
  "sjms": {
    "Consumer": {
      "endpoint_parameters": {
        "connectionCount": "",
        "bridgeErrorHandler": "false",
        "reconnectBackOff": "5000",
        "reconnectOnError": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionClientId": "",
        "connectionFactory": "",
        "connectionMaxWait": "5000",
        "connectionResource": "",
        "connectionTestOnBorrow": "true",
        "destinationCreationStrategy": "",
        "jmsKeyFormatStrategy": "",
        "messageCreatedStrategy": "",
        "timedTaskManager": "",
        "headerFilterStrategy": "",
        "connectionPassword": "",
        "connectionUsername": "",
        "transactionCommitStrategy": "",
        "destinationType": "queue",
        "destinationName": "",
        "acknowledgementMode": "AUTO_ACKNOWLEDGE",
        "consumerCount": "1",
        "durableSubscriptionId": "",
        "synchronous": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "messageSelector": "",
        "namedReplyTo": "",
        "persistent": "true",
        "producerCount": "1",
        "ttl": "-1",
        "allowNullBody": "true",
        "prefillPool": "true",
        "responseTimeOut": "5s",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "exceptionListener": "",
        "includeAllJMSXProperties": "false",
        "mapJmsMessage": "true",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "transacted": "false",
        "transactionBatchCount": "-1",
        "transactionBatchTimeout": "5s",
        "sharedJMSSession": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "connectionCount": "",
        "bridgeErrorHandler": "false",
        "reconnectBackOff": "5000",
        "reconnectOnError": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionClientId": "",
        "connectionFactory": "",
        "connectionMaxWait": "5000",
        "connectionResource": "",
        "connectionTestOnBorrow": "true",
        "destinationCreationStrategy": "",
        "jmsKeyFormatStrategy": "",
        "messageCreatedStrategy": "",
        "timedTaskManager": "",
        "headerFilterStrategy": "",
        "connectionPassword": "",
        "connectionUsername": "",
        "transactionCommitStrategy": "",
        "destinationType": "queue",
        "destinationName": "",
        "acknowledgementMode": "AUTO_ACKNOWLEDGE",
        "consumerCount": "1",
        "durableSubscriptionId": "",
        "synchronous": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "messageSelector": "",
        "namedReplyTo": "",
        "persistent": "true",
        "producerCount": "1",
        "ttl": "-1",
        "allowNullBody": "true",
        "prefillPool": "true",
        "responseTimeOut": "5s",
        "asyncStartListener": "false",
        "asyncStopListener": "false",
        "exceptionListener": "",
        "includeAllJMSXProperties": "false",
        "mapJmsMessage": "true",
        "errorHandlerLoggingLevel": "WARN",
        "errorHandlerLogStackTrace": "true",
        "transacted": "false",
        "transactionBatchCount": "-1",
        "transactionBatchTimeout": "5s",
        "sharedJMSSession": "true"
      }
    }
  },
  "kubernetes-config-maps": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "azure-queue": {
    "Consumer": {
      "endpoint_parameters": {
        "azureQueueClient": "",
        "credentials": "",
        "validateClientURI": "true",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "messageTimeToLive": "",
        "messageVisibilityDelay": "",
        "operation": "listQueues",
        "queuePrefix": "",
        "basicPropertyBinding": "false",
        "configuration": "",
        "credentialsAccountKey": "",
        "credentialsAccountName": "",
        "containerAndQueueUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "azureQueueClient": "",
        "credentials": "",
        "validateClientURI": "true",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "messageTimeToLive": "",
        "messageVisibilityDelay": "",
        "operation": "listQueues",
        "queuePrefix": "",
        "basicPropertyBinding": "false",
        "configuration": "",
        "credentialsAccountKey": "",
        "credentialsAccountName": "",
        "containerAndQueueUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "jsonata": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "contentCache": "false",
        "inputType": "Jackson",
        "outputType": "Jackson",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "contentCache": "false",
        "inputType": "Jackson",
        "outputType": "Jackson",
        "synchronous": "false"
      }
    }
  },
  "jcache": {
    "Consumer": {
      "endpoint_parameters": {
        "cacheName": "RouteId of the route.",
        "cacheConfiguration": "Default new _MutableConfiguration_ object.",
        "cacheConfigurationProperties": "",
        "cachingProvider": "",
        "configurationUri": "",
        "managementEnabled": "false",
        "readThrough": "false",
        "statisticsEnabled": "false",
        "storeByValue": "true",
        "writeThrough": "false",
        "bridgeErrorHandler": "false",
        "filteredEvents": "",
        "oldValueRequired": "false",
        "synchronous": "false",
        "eventFilters": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "action": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "cacheLoaderFactory": "",
        "cacheWriterFactory": "",
        "createCacheIfNotExists": "true",
        "expiryPolicyFactory": "",
        "lookupProviders": "false",
        "cacheConfigurationProperties{zwsp}Ref": "",
        "cache": "",
        "cacheManager": "Try to find a CacheManager in CamelContext registry or calls the standard JCache _Caching.getCachingProvider().getCacheManager()_.",
        "keyExpression": "Exchange body",
        "enabled": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "cacheName": "RouteId of the route.",
        "cacheConfiguration": "Default new _MutableConfiguration_ object.",
        "cacheConfigurationProperties": "",
        "cachingProvider": "",
        "configurationUri": "",
        "managementEnabled": "false",
        "readThrough": "false",
        "statisticsEnabled": "false",
        "storeByValue": "true",
        "writeThrough": "false",
        "bridgeErrorHandler": "false",
        "filteredEvents": "",
        "oldValueRequired": "false",
        "synchronous": "false",
        "eventFilters": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "action": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "cacheLoaderFactory": "",
        "cacheWriterFactory": "",
        "createCacheIfNotExists": "true",
        "expiryPolicyFactory": "",
        "lookupProviders": "false",
        "cacheConfigurationProperties{zwsp}Ref": "",
        "cache": "",
        "cacheManager": "Try to find a CacheManager in CamelContext registry or calls the standard JCache _Caching.getCachingProvider().getCacheManager()_.",
        "keyExpression": "Exchange body",
        "enabled": "true"
      }
    }
  },
  "docker": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "email": "",
        "host": "localhost",
        "port": "2375",
        "requestTimeout": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "cmdExecFactory": "com.github.dockerjava.netty.NettyDockerCmdExecFactory",
        "followRedirectFilter": "false",
        "loggingFilter": "false",
        "maxPerRouteConnections": "100",
        "maxTotalConnections": "100",
        "parameters": "",
        "serverAddress": "https://index.docker.io/v1/",
        "socket": "true",
        "certPath": "",
        "password": "",
        "secure": "false",
        "tlsVerify": "false",
        "username": "",
        "operation": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "email": "",
        "host": "localhost",
        "port": "2375",
        "requestTimeout": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "cmdExecFactory": "com.github.dockerjava.netty.NettyDockerCmdExecFactory",
        "followRedirectFilter": "false",
        "loggingFilter": "false",
        "maxPerRouteConnections": "100",
        "maxTotalConnections": "100",
        "parameters": "",
        "serverAddress": "https://index.docker.io/v1/",
        "socket": "true",
        "certPath": "",
        "password": "",
        "secure": "false",
        "tlsVerify": "false",
        "username": "",
        "operation": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "vertx-http": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "vertx": "",
        "vertxHttpBinding": "",
        "vertxOptions": "",
        "headerFilterStrategy": "VertxHttpHeaderFilterStrategy",
        "proxyHost": "",
        "proxyPassword": "",
        "proxyPort": "",
        "proxyType": "",
        "proxyUsername": "",
        "basicAuthPassword": "",
        "basicAuthUsername": "",
        "bearerToken": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "httpUri": "",
        "connectTimeout": "60000",
        "cookieStore": "InMemoryCookieStore",
        "httpMethod": "",
        "okStatusCodeRange": "200-299",
        "sessionManagement": "false",
        "throwExceptionOnFailure": "true",
        "timeout": "-1",
        "transferException": "false",
        "useCompression": "false",
        "webClientOptions": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "vertx": "",
        "vertxHttpBinding": "",
        "vertxOptions": "",
        "headerFilterStrategy": "VertxHttpHeaderFilterStrategy",
        "proxyHost": "",
        "proxyPassword": "",
        "proxyPort": "",
        "proxyType": "",
        "proxyUsername": "",
        "basicAuthPassword": "",
        "basicAuthUsername": "",
        "bearerToken": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "httpUri": "",
        "connectTimeout": "60000",
        "cookieStore": "InMemoryCookieStore",
        "httpMethod": "",
        "okStatusCodeRange": "200-299",
        "sessionManagement": "false",
        "throwExceptionOnFailure": "true",
        "timeout": "-1",
        "transferException": "false",
        "useCompression": "false",
        "webClientOptions": "",
        "synchronous": "false"
      }
    }
  },
  "quickfix": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyCreateEngines": "false",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "logFactory": "",
        "messageFactory": "",
        "messageStoreFactory": "",
        "configurationName": "",
        "lazyCreateEngine": "false",
        "sessionID": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyCreateEngines": "false",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "logFactory": "",
        "messageFactory": "",
        "messageStoreFactory": "",
        "configurationName": "",
        "lazyCreateEngine": "false",
        "sessionID": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "github": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "type": "",
        "branchName": "",
        "oauthToken": "",
        "password": "",
        "repoName": "",
        "repoOwner": "",
        "username": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "encoding": "",
        "state": "",
        "targetUrl": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "type": "",
        "branchName": "",
        "oauthToken": "",
        "password": "",
        "repoName": "",
        "repoOwner": "",
        "username": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "encoding": "",
        "state": "",
        "targetUrl": "",
        "synchronous": "false"
      }
    }
  },
  "sap-netweaver": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "url": "",
        "flatternMap": "true",
        "json": "true",
        "jsonAsMap": "true",
        "password": "",
        "username": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "url": "",
        "flatternMap": "true",
        "json": "true",
        "jsonAsMap": "true",
        "password": "",
        "username": "",
        "synchronous": "false"
      }
    }
  },
  "xchange": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "currency": "",
        "currencyPair": "",
        "service": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "currency": "",
        "currencyPair": "",
        "service": "",
        "synchronous": "false"
      }
    }
  },
  "elsql": {
    "Consumer": {
      "endpoint_parameters": {
        "databaseVendor": "",
        "dataSource": "",
        "resourceUri": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "elSqlConfig": "",
        "elsqlName": "",
        "allowNamedParameters": "true",
        "dataSourceRef": "",
        "outputClass": "",
        "outputHeader": "",
        "outputType": "SelectList",
        "separator": ",",
        "breakBatchOnConsumeFail": "false",
        "expectedUpdateCount": "-1",
        "maxMessagesPerPoll": "",
        "onConsume": "",
        "onConsumeBatchComplete": "",
        "onConsumeFailed": "",
        "routeEmptyResultSet": "false",
        "sendEmptyMessageWhenIdle": "false",
        "transacted": "false",
        "useIterator": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "processingStrategy": "",
        "batch": "false",
        "noop": "false",
        "useMessageBodyForSql": "false",
        "alwaysPopulateStatement": "false",
        "parametersCount": "",
        "placeholder": "#",
        "prepareStatementStrategy": "",
        "synchronous": "false",
        "templateOptions": "",
        "usePlaceholder": "true",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "databaseVendor": "",
        "dataSource": "",
        "resourceUri": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "elSqlConfig": "",
        "elsqlName": "",
        "allowNamedParameters": "true",
        "dataSourceRef": "",
        "outputClass": "",
        "outputHeader": "",
        "outputType": "SelectList",
        "separator": ",",
        "breakBatchOnConsumeFail": "false",
        "expectedUpdateCount": "-1",
        "maxMessagesPerPoll": "",
        "onConsume": "",
        "onConsumeBatchComplete": "",
        "onConsumeFailed": "",
        "routeEmptyResultSet": "false",
        "sendEmptyMessageWhenIdle": "false",
        "transacted": "false",
        "useIterator": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "processingStrategy": "",
        "batch": "false",
        "noop": "false",
        "useMessageBodyForSql": "false",
        "alwaysPopulateStatement": "false",
        "parametersCount": "",
        "placeholder": "#",
        "prepareStatementStrategy": "",
        "synchronous": "false",
        "templateOptions": "",
        "usePlaceholder": "true",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "jetty": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "continuationTimeout": "30000",
        "enableJmx": "false",
        "maxThreads": "",
        "minThreads": "",
        "requestBufferSize": "",
        "requestHeaderSize": "",
        "responseBufferSize": "",
        "responseHeaderSize": "",
        "sendServerVersion": "true",
        "useContinuation": "",
        "useXForwardedForHeader": "false",
        "threadPool": "",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "errorHandler": "",
        "httpBinding": "",
        "httpConfiguration": "",
        "jettyHttpBinding": "",
        "mbContainer": "",
        "headerFilterStrategy": "",
        "proxyHost": "",
        "proxyPort": "",
        "keystore": "",
        "socketConnectorProperties": "",
        "socketConnectors": "",
        "sslContextParameters": "",
        "sslKeyPassword": "",
        "sslPassword": "",
        "sslSocketConnectorProperties": "",
        "sslSocketConnectors": "",
        "useGlobalSslContextParameters": "false",
        "httpUri": "",
        "disableStreamCache": "false",
        "async": "false",
        "chunked": "true",
        "enableCORS": "false",
        "enableMultipartFilter": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "sendDateHeader": "false",
        "sessionSupport": "false",
        "transferException": "false",
        "eagerCheckContentAvailable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "filterInitParameters": "",
        "filters": "",
        "handlers": "",
        "multipartFilter": "",
        "optionsEnabled": "false",
        "traceEnabled": "false",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "continuationTimeout": "30000",
        "enableJmx": "false",
        "maxThreads": "",
        "minThreads": "",
        "requestBufferSize": "",
        "requestHeaderSize": "",
        "responseBufferSize": "",
        "responseHeaderSize": "",
        "sendServerVersion": "true",
        "useContinuation": "",
        "useXForwardedForHeader": "false",
        "threadPool": "",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "errorHandler": "",
        "httpBinding": "",
        "httpConfiguration": "",
        "jettyHttpBinding": "",
        "mbContainer": "",
        "headerFilterStrategy": "",
        "proxyHost": "",
        "proxyPort": "",
        "keystore": "",
        "socketConnectorProperties": "",
        "socketConnectors": "",
        "sslContextParameters": "",
        "sslKeyPassword": "",
        "sslPassword": "",
        "sslSocketConnectorProperties": "",
        "sslSocketConnectors": "",
        "useGlobalSslContextParameters": "false",
        "httpUri": "",
        "disableStreamCache": "false",
        "async": "false",
        "chunked": "true",
        "enableCORS": "false",
        "enableMultipartFilter": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "sendDateHeader": "false",
        "sessionSupport": "false",
        "transferException": "false",
        "eagerCheckContentAvailable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "filterInitParameters": "",
        "filters": "",
        "handlers": "",
        "multipartFilter": "",
        "optionsEnabled": "false",
        "traceEnabled": "false",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "synchronous": "false"
      }
    }
  },
  "servicenow": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "display": "true",
        "displayValue": "false",
        "excludeReferenceLink": "",
        "favorites": "",
        "includeAggregates": "",
        "includeAvailableAggregates": "",
        "includeAvailableBreakdowns": "",
        "includeScoreNotes": "",
        "includeScores": "",
        "inputDisplayValue": "",
        "key": "",
        "lazyStartProducer": "false",
        "models": "",
        "perPage": "10",
        "release": "HELSINKI",
        "requestModels": "",
        "resource": "",
        "responseModels": "",
        "sortBy": "",
        "sortDir": "",
        "suppressAutoSysField": "",
        "suppressPaginationHeader": "",
        "table": "",
        "target": "",
        "topLevelOnly": "",
        "apiVersion": "",
        "basicPropertyBinding": "false",
        "dateFormat": "yyyy-MM-dd",
        "dateTimeFormat": "yyyy-MM-dd HH:mm:ss",
        "httpClientPolicy": "",
        "instanceName": "",
        "mapper": "",
        "proxyAuthorizationPolicy": "",
        "retrieveTargetRecordOnImport": "false",
        "timeFormat": "HH:mm:ss",
        "proxyHost": "",
        "proxyPort": "",
        "apiUrl": "",
        "oauthClientId": "",
        "oauthClientSecret": "",
        "oauthTokenUrl": "",
        "password": "",
        "proxyPassword": "",
        "proxyUserName": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "synchronous": "false",
        "CamelServiceNowResource": "CamelServiceNowActionSubject",
        "RETRIEVE": "GET",
        "CREATE": "POST",
        "MODIFY": "PUT",
        "DELETE": "DELETE",
        "UPDATE": "POST",
        "CONTENT": "GET",
        "UPLOAD": "POST"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "display": "true",
        "displayValue": "false",
        "excludeReferenceLink": "",
        "favorites": "",
        "includeAggregates": "",
        "includeAvailableAggregates": "",
        "includeAvailableBreakdowns": "",
        "includeScoreNotes": "",
        "includeScores": "",
        "inputDisplayValue": "",
        "key": "",
        "lazyStartProducer": "false",
        "models": "",
        "perPage": "10",
        "release": "HELSINKI",
        "requestModels": "",
        "resource": "",
        "responseModels": "",
        "sortBy": "",
        "sortDir": "",
        "suppressAutoSysField": "",
        "suppressPaginationHeader": "",
        "table": "",
        "target": "",
        "topLevelOnly": "",
        "apiVersion": "",
        "basicPropertyBinding": "false",
        "dateFormat": "yyyy-MM-dd",
        "dateTimeFormat": "yyyy-MM-dd HH:mm:ss",
        "httpClientPolicy": "",
        "instanceName": "",
        "mapper": "",
        "proxyAuthorizationPolicy": "",
        "retrieveTargetRecordOnImport": "false",
        "timeFormat": "HH:mm:ss",
        "proxyHost": "",
        "proxyPort": "",
        "apiUrl": "",
        "oauthClientId": "",
        "oauthClientSecret": "",
        "oauthTokenUrl": "",
        "password": "",
        "proxyPassword": "",
        "proxyUserName": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "synchronous": "false",
        "CamelServiceNowResource": "CamelServiceNowActionSubject",
        "RETRIEVE": "GET",
        "CREATE": "POST",
        "MODIFY": "PUT",
        "DELETE": "DELETE",
        "UPDATE": "POST",
        "CONTENT": "GET",
        "UPLOAD": "POST"
      }
    }
  },
  "kubernetes-deployments": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "atomix-value": {
    "Consumer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "SET",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "ttl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "SET",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "ttl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "dozer": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "mappingConfiguration": "",
        "mappingFile": "dozerBeanMapping.xml",
        "marshalId": "",
        "sourceModel": "",
        "targetModel": "",
        "unmarshalId": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "mappingConfiguration": "",
        "mappingFile": "dozerBeanMapping.xml",
        "marshalId": "",
        "sourceModel": "",
        "targetModel": "",
        "unmarshalId": "",
        "synchronous": "false"
      }
    }
  },
  "aws2-eventbridge": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "eventbridgeClient": "",
        "eventPatternFile": "",
        "lazyStartProducer": "false",
        "operation": "putRule",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "eventbusNameOrArn": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "eventbridgeClient": "",
        "eventPatternFile": "",
        "lazyStartProducer": "false",
        "operation": "putRule",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "eventbusNameOrArn": "",
        "synchronous": "false"
      }
    }
  },
  "dataset-test": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "anyOrder": "false",
        "assertPeriod": "0",
        "delimiter": "",
        "expectedCount": "-1",
        "failFast": "false",
        "reportGroup": "",
        "resultMinimumWaitTime": "0",
        "resultWaitTime": "0",
        "retainFirst": "-1",
        "retainLast": "-1",
        "sleepForEmptyTest": "0",
        "split": "false",
        "timeout": "2000",
        "copyOnExchange": "true",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "anyOrder": "false",
        "assertPeriod": "0",
        "delimiter": "",
        "expectedCount": "-1",
        "failFast": "false",
        "reportGroup": "",
        "resultMinimumWaitTime": "0",
        "resultWaitTime": "0",
        "retainFirst": "-1",
        "retainLast": "-1",
        "sleepForEmptyTest": "0",
        "split": "false",
        "timeout": "2000",
        "copyOnExchange": "true",
        "synchronous": "false"
      }
    }
  },
  "class": {
    "Consumer": {
      "endpoint_parameters": {
        "cache": "",
        "lazyStartProducer": "false",
        "scope": "Singleton",
        "basicPropertyBinding": "false",
        "beanName": "",
        "parameters": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "cache": "",
        "lazyStartProducer": "false",
        "scope": "Singleton",
        "basicPropertyBinding": "false",
        "beanName": "",
        "parameters": "",
        "synchronous": "false"
      }
    }
  },
  "as2": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "apiName": "",
        "as2From": "",
        "as2MessageStructure": "",
        "as2To": "",
        "as2Version": "1.1",
        "clientFqdn": "camel.apache.org",
        "compressionAlgorithm": "",
        "decryptingPrivateKey": "",
        "dispositionNotificationTo": "",
        "ediMessageTransferEncoding": "",
        "ediMessageType": "",
        "encryptingAlgorithm": "",
        "encryptingCertificateChain": "",
        "from": "",
        "inBody": "",
        "mdnMessageTemplate": "",
        "requestUri": "/",
        "server": "Receives EDI Messages over HTTP",
        "serverFqdn": "camel.apache.org",
        "serverPortNumber": "",
        "signedReceiptMicAlgorithms": "",
        "signingAlgorithm": "",
        "signingCertificateChain": "",
        "signingPrivateKey": "",
        "subject": "",
        "targetHostname": "",
        "targetPortNumber": "",
        "userAgent": "Camel AS2 Client Endpoint",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "client": "Sends EDI Messages over HTTP",
        "send": "Message subject",
        "listen": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "apiName": "",
        "as2From": "",
        "as2MessageStructure": "",
        "as2To": "",
        "as2Version": "1.1",
        "clientFqdn": "camel.apache.org",
        "compressionAlgorithm": "",
        "decryptingPrivateKey": "",
        "dispositionNotificationTo": "",
        "ediMessageTransferEncoding": "",
        "ediMessageType": "",
        "encryptingAlgorithm": "",
        "encryptingCertificateChain": "",
        "from": "",
        "inBody": "",
        "mdnMessageTemplate": "",
        "requestUri": "/",
        "server": "Receives EDI Messages over HTTP",
        "serverFqdn": "camel.apache.org",
        "serverPortNumber": "",
        "signedReceiptMicAlgorithms": "",
        "signingAlgorithm": "",
        "signingCertificateChain": "",
        "signingPrivateKey": "",
        "subject": "",
        "targetHostname": "",
        "targetPortNumber": "",
        "userAgent": "Camel AS2 Client Endpoint",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "client": "Sends EDI Messages over HTTP",
        "send": "Message subject",
        "listen": ""
      }
    }
  },
  "geocoder": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "geoApiContext": "",
        "address": "",
        "latlng": "",
        "headersOnly": "false",
        "language": "en",
        "serverUrl": "",
        "type": "",
        "synchronous": "false",
        "proxyAuthDomain": "",
        "proxyAuthHost": "",
        "proxyAuthMethod": "",
        "proxyAuthPassword": "",
        "proxyAuthUsername": "",
        "proxyHost": "",
        "proxyPort": "",
        "apiKey": "",
        "clientId": "",
        "clientKey": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "geoApiContext": "",
        "address": "",
        "latlng": "",
        "headersOnly": "false",
        "language": "en",
        "serverUrl": "",
        "type": "",
        "synchronous": "false",
        "proxyAuthDomain": "",
        "proxyAuthHost": "",
        "proxyAuthMethod": "",
        "proxyAuthPassword": "",
        "proxyAuthUsername": "",
        "proxyHost": "",
        "proxyPort": "",
        "apiKey": "",
        "clientId": "",
        "clientKey": ""
      }
    }
  },
  "ahc-ws": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "binding": "",
        "client": "",
        "clientConfig": "",
        "headerFilterStrategy": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "httpUri": "",
        "bridgeEndpoint": "false",
        "bufferSize": "4096",
        "throwExceptionOnFailure": "true",
        "transferException": "false",
        "sendMessageOnError": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "connectionClose": "false",
        "cookieHandler": "",
        "useStreaming": "false",
        "clientConfigOptions": "",
        "synchronous": "false",
        "clientConfigRealmOptions": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "binding": "",
        "client": "",
        "clientConfig": "",
        "headerFilterStrategy": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "httpUri": "",
        "bridgeEndpoint": "false",
        "bufferSize": "4096",
        "throwExceptionOnFailure": "true",
        "transferException": "false",
        "sendMessageOnError": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "connectionClose": "false",
        "cookieHandler": "",
        "useStreaming": "false",
        "clientConfigOptions": "",
        "synchronous": "false",
        "clientConfigRealmOptions": ""
      }
    }
  },
  "direct-vm": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "block": "true",
        "lazyStartProducer": "false",
        "timeout": "30000",
        "basicPropertyBinding": "false",
        "headerFilterStrategy": "",
        "propagateProperties": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "failIfNoConsumers": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "block": "true",
        "lazyStartProducer": "false",
        "timeout": "30000",
        "basicPropertyBinding": "false",
        "headerFilterStrategy": "",
        "propagateProperties": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "failIfNoConsumers": "false",
        "synchronous": "false"
      }
    }
  },
  "pdf": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "font": "Helvetica",
        "fontSize": "14.0",
        "marginBottom": "20",
        "marginLeft": "20",
        "marginRight": "40",
        "marginTop": "20",
        "pageSize": "A4",
        "textProcessingFactory": "lineTermination",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "operation": "",
        "font": "Helvetica",
        "fontSize": "14.0",
        "marginBottom": "20",
        "marginLeft": "20",
        "marginRight": "40",
        "marginTop": "20",
        "pageSize": "A4",
        "textProcessingFactory": "lineTermination",
        "synchronous": "false"
      }
    }
  },
  "azure-storage-queue": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "serviceClient": "",
        "bridgeErrorHandler": "false",
        "createQueue": "true",
        "lazyStartProducer": "false",
        "operation": "",
        "basicPropertyBinding": "false",
        "maxMessages": "1",
        "messageId": "",
        "popReceipt": "",
        "timeout": "",
        "timeToLive": "",
        "visibilityTimeout": "",
        "accessKey": "",
        "credentials": "",
        "accountName": "",
        "queueName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "serviceClient": "",
        "bridgeErrorHandler": "false",
        "createQueue": "true",
        "lazyStartProducer": "false",
        "operation": "",
        "basicPropertyBinding": "false",
        "maxMessages": "1",
        "messageId": "",
        "popReceipt": "",
        "timeout": "",
        "timeToLive": "",
        "visibilityTimeout": "",
        "accessKey": "",
        "credentials": "",
        "accountName": "",
        "queueName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "aws-msk": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "lazyStartProducer": "false",
        "mskClient": "",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "lazyStartProducer": "false",
        "mskClient": "",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "mongodb-gridfs": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionBean": "",
        "bucket": "fs",
        "database": "",
        "readPreference": "",
        "writeConcern": "",
        "delay": "500",
        "fileAttributeName": "camel-processed",
        "initialDelay": "1000",
        "persistentTSCollection": "camel-timestamps",
        "persistentTSObject": "camel-timestamp",
        "query": "",
        "queryStrategy": "TimeStamp",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionBean": "",
        "bucket": "fs",
        "database": "",
        "readPreference": "",
        "writeConcern": "",
        "delay": "500",
        "fileAttributeName": "camel-processed",
        "initialDelay": "1000",
        "persistentTSCollection": "camel-timestamps",
        "persistentTSObject": "camel-timestamp",
        "query": "",
        "queryStrategy": "TimeStamp",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "synchronous": "false"
      }
    }
  },
  "cxf": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "allowStreaming": "",
        "basicPropertyBinding": "false",
        "headerFilterStrategy": "",
        "useGlobalSslContextParameters": "false",
        "beanId": "",
        "address": "",
        "dataFormat": "POJO",
        "wrappedStyle": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "cookieHandler": "",
        "defaultOperationName": "",
        "defaultOperationNamespace": "",
        "hostnameVerifier": "",
        "sslContextParameters": "",
        "wrapped": "false",
        "bus": "",
        "continuationTimeout": "30000",
        "cxfBinding": "",
        "cxfConfigurer": "",
        "defaultBus": "false",
        "mergeProtocolHeaders": "false",
        "mtomEnabled": "false",
        "properties": "",
        "skipPayloadMessagePartCheck": "false",
        "synchronous": "false",
        "loggingFeatureEnabled": "false",
        "loggingSizeLimit": "49152",
        "skipFaultLogging": "false",
        "password": "",
        "username": "",
        "bindingId": "",
        "portName": "",
        "publishedEndpointUrl": "",
        "serviceClass": "",
        "serviceName": "",
        "wsdlURL": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "allowStreaming": "",
        "basicPropertyBinding": "false",
        "headerFilterStrategy": "",
        "useGlobalSslContextParameters": "false",
        "beanId": "",
        "address": "",
        "dataFormat": "POJO",
        "wrappedStyle": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "cookieHandler": "",
        "defaultOperationName": "",
        "defaultOperationNamespace": "",
        "hostnameVerifier": "",
        "sslContextParameters": "",
        "wrapped": "false",
        "bus": "",
        "continuationTimeout": "30000",
        "cxfBinding": "",
        "cxfConfigurer": "",
        "defaultBus": "false",
        "mergeProtocolHeaders": "false",
        "mtomEnabled": "false",
        "properties": "",
        "skipPayloadMessagePartCheck": "false",
        "synchronous": "false",
        "loggingFeatureEnabled": "false",
        "loggingSizeLimit": "49152",
        "skipFaultLogging": "false",
        "password": "",
        "username": "",
        "bindingId": "",
        "portName": "",
        "publishedEndpointUrl": "",
        "serviceClass": "",
        "serviceName": "",
        "wsdlURL": ""
      }
    }
  },
  "google-pubsub": {
    "Consumer": {
      "endpoint_parameters": {
        "endpoint": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "publisherCacheSize": "",
        "publisherCacheTimeout": "",
        "basicPropertyBinding": "false",
        "publisherTerminationTimeout": "",
        "projectId": "",
        "destinationName": "",
        "ackMode": "AUTO",
        "concurrentConsumers": "1",
        "loggerId": "",
        "maxMessagesPerPoll": "1",
        "synchronousPull": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "camel.component.google-pubsub.basic-property-binding": "false",
        "camel.component.google-pubsub.bridge-error-handler": "false",
        "camel.component.google-pubsub.enabled": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "endpoint": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "publisherCacheSize": "",
        "publisherCacheTimeout": "",
        "basicPropertyBinding": "false",
        "publisherTerminationTimeout": "",
        "projectId": "",
        "destinationName": "",
        "ackMode": "AUTO",
        "concurrentConsumers": "1",
        "loggerId": "",
        "maxMessagesPerPoll": "1",
        "synchronousPull": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "camel.component.google-pubsub.basic-property-binding": "false",
        "camel.component.google-pubsub.bridge-error-handler": "false",
        "camel.component.google-pubsub.enabled": ""
      }
    }
  },
  "braintree": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "apiName": "",
        "environment": "",
        "inBody": "",
        "merchantId": "",
        "httpReadTimeout": "",
        "synchronous": "false",
        "httpLogLevel": "",
        "httpLogName": "Braintree",
        "logHandlerEnabled": "true",
        "proxyHost": "",
        "proxyPort": "",
        "accessToken": "",
        "privateKey": "",
        "publicKey": "",
        "address": "Provides methods to create, delete, find, and update Address objects",
        "clientToken": "Generates client tokens, which are used to authenticate requests made directly on behalf of merchants This class does not need to be instantiated directly",
        "creditCardVerification": "To verify credit card information",
        "customer": "Provides methods to create, delete, find, and update Customer objects",
        "dispute": "Provides methods to interact with Dispute objects",
        "documentUpload": "API to upload evidence documents",
        "merchantAccount": "Provides methods to create, find, and update MerchantAccount objects",
        "paymentMethod": "Provides methods to interact with payments",
        "paymentMethodNonce": "Provides methods to interact with nonce payments",
        "report": "Provides methods to interact with reports",
        "settlementBatchSummary": "Provides methods to interact wit settlement summaries",
        "subscription": "Provides methods to interact with Subscriptions",
        "transaction": "Provides methods to interact with Transactions",
        "webhookNotification": "To retrieve notifications via webhooks",
        "create": "The request",
        "delete": "",
        "find": "The id of the Transaction",
        "update": "The request",
        "generate": "",
        "search": "The search query",
        "accept": "The dispute id to accept",
        "addFileEvidence": "The file evidence request for the dispute",
        "addTextEvidence": "The text evidence request for the dispute",
        "finalize": "The dispute id to finalize",
        "removeEvidence": "The evidence id to remove",
        "createForCurrency": "",
        "fetchMerchantAccounts": "",
        "grant": "",
        "revoke": "",
        "transactionLevelFees": "The request",
        "cancel": "Of the Subscription to cancel",
        "retryCharge": "",
        "cancelRelease": "Of the transaction to cancel release from escrow of",
        "cloneTransaction": "",
        "credit": "The request",
        "holdInEscrow": "Of the transaction to hold for escrow",
        "refund": "",
        "releaseFromEscrow": "Of the transaction to submit for release",
        "sale": "The request",
        "submitForPartialSettlement": "The request",
        "submitForSettlement": "The request",
        "updateDetails": "The request",
        "voidTransaction": "Of the transaction to void",
        "parse": "",
        "verify": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "apiName": "",
        "environment": "",
        "inBody": "",
        "merchantId": "",
        "httpReadTimeout": "",
        "synchronous": "false",
        "httpLogLevel": "",
        "httpLogName": "Braintree",
        "logHandlerEnabled": "true",
        "proxyHost": "",
        "proxyPort": "",
        "accessToken": "",
        "privateKey": "",
        "publicKey": "",
        "address": "Provides methods to create, delete, find, and update Address objects",
        "clientToken": "Generates client tokens, which are used to authenticate requests made directly on behalf of merchants This class does not need to be instantiated directly",
        "creditCardVerification": "To verify credit card information",
        "customer": "Provides methods to create, delete, find, and update Customer objects",
        "dispute": "Provides methods to interact with Dispute objects",
        "documentUpload": "API to upload evidence documents",
        "merchantAccount": "Provides methods to create, find, and update MerchantAccount objects",
        "paymentMethod": "Provides methods to interact with payments",
        "paymentMethodNonce": "Provides methods to interact with nonce payments",
        "report": "Provides methods to interact with reports",
        "settlementBatchSummary": "Provides methods to interact wit settlement summaries",
        "subscription": "Provides methods to interact with Subscriptions",
        "transaction": "Provides methods to interact with Transactions",
        "webhookNotification": "To retrieve notifications via webhooks",
        "create": "The request",
        "delete": "",
        "find": "The id of the Transaction",
        "update": "The request",
        "generate": "",
        "search": "The search query",
        "accept": "The dispute id to accept",
        "addFileEvidence": "The file evidence request for the dispute",
        "addTextEvidence": "The text evidence request for the dispute",
        "finalize": "The dispute id to finalize",
        "removeEvidence": "The evidence id to remove",
        "createForCurrency": "",
        "fetchMerchantAccounts": "",
        "grant": "",
        "revoke": "",
        "transactionLevelFees": "The request",
        "cancel": "Of the Subscription to cancel",
        "retryCharge": "",
        "cancelRelease": "Of the transaction to cancel release from escrow of",
        "cloneTransaction": "",
        "credit": "The request",
        "holdInEscrow": "Of the transaction to hold for escrow",
        "refund": "",
        "releaseFromEscrow": "Of the transaction to submit for release",
        "sale": "The request",
        "submitForPartialSettlement": "The request",
        "submitForSettlement": "The request",
        "updateDetails": "The request",
        "voidTransaction": "Of the transaction to void",
        "parse": "",
        "verify": ""
      }
    }
  },
  "atmosphere-websocket": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "servletName": "CamelServlet",
        "attachmentMultipartBinding": "false",
        "fileNameExtWhitelist": "",
        "httpRegistry": "",
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "httpBinding": "",
        "httpConfiguration": "",
        "headerFilterStrategy": "",
        "servicePath": "",
        "chunked": "true",
        "disableStreamCache": "false",
        "sendToAll": "false",
        "transferException": "false",
        "useStreaming": "false",
        "async": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "responseBufferSize": "",
        "eagerCheckContentAvailable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "optionsEnabled": "false",
        "traceEnabled": "false",
        "bridgeEndpoint": "false",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "servletName": "CamelServlet",
        "attachmentMultipartBinding": "false",
        "fileNameExtWhitelist": "",
        "httpRegistry": "",
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "httpBinding": "",
        "httpConfiguration": "",
        "headerFilterStrategy": "",
        "servicePath": "",
        "chunked": "true",
        "disableStreamCache": "false",
        "sendToAll": "false",
        "transferException": "false",
        "useStreaming": "false",
        "async": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "responseBufferSize": "",
        "eagerCheckContentAvailable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "optionsEnabled": "false",
        "traceEnabled": "false",
        "bridgeEndpoint": "false",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "synchronous": "false"
      }
    }
  },
  "xj": {
    "Consumer": {
      "endpoint_parameters": {
        "contentCache": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "saxonConfiguration": "",
        "saxonConfigurationProperties": "",
        "saxonExtensionFunctions": "",
        "transformerFactoryClass": "",
        "transformerFactory{zwsp}ConfigurationStrategy": "",
        "uriResolver": "",
        "uriResolverFactory": "",
        "resourceUri": "",
        "allowStAX": "true",
        "deleteOutputFile": "false",
        "failOnNullBody": "true",
        "output": "string",
        "transformDirection": "",
        "transformerCacheSize": "0",
        "entityResolver": "",
        "errorListener": "",
        "resultHandlerFactory": "",
        "synchronous": "false",
        "transformerFactory": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "contentCache": "true",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "saxonConfiguration": "",
        "saxonConfigurationProperties": "",
        "saxonExtensionFunctions": "",
        "transformerFactoryClass": "",
        "transformerFactory{zwsp}ConfigurationStrategy": "",
        "uriResolver": "",
        "uriResolverFactory": "",
        "resourceUri": "",
        "allowStAX": "true",
        "deleteOutputFile": "false",
        "failOnNullBody": "true",
        "output": "string",
        "transformDirection": "",
        "transformerCacheSize": "0",
        "entityResolver": "",
        "errorListener": "",
        "resultHandlerFactory": "",
        "synchronous": "false",
        "transformerFactory": ""
      }
    }
  },
  "log": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "exchangeFormatter": "",
        "loggerName": "",
        "groupActiveOnly": "true",
        "groupDelay": "",
        "groupInterval": "",
        "groupSize": "",
        "level": "INFO",
        "logMask": "",
        "marker": "",
        "synchronous": "false",
        "maxChars": "10000",
        "multiline": "false",
        "showAll": "false",
        "showBody": "true",
        "showBodyType": "true",
        "showCaughtException": "false",
        "showException": "false",
        "showExchangeId": "false",
        "showExchangePattern": "true",
        "showFiles": "false",
        "showFuture": "false",
        "showHeaders": "false",
        "showProperties": "false",
        "showStackTrace": "false",
        "showStreams": "false",
        "skipBodyLineSeparator": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "exchangeFormatter": "",
        "loggerName": "",
        "groupActiveOnly": "true",
        "groupDelay": "",
        "groupInterval": "",
        "groupSize": "",
        "level": "INFO",
        "logMask": "",
        "marker": "",
        "synchronous": "false",
        "maxChars": "10000",
        "multiline": "false",
        "showAll": "false",
        "showBody": "true",
        "showBodyType": "true",
        "showCaughtException": "false",
        "showException": "false",
        "showExchangeId": "false",
        "showExchangePattern": "true",
        "showFiles": "false",
        "showFuture": "false",
        "showHeaders": "false",
        "showProperties": "false",
        "showStackTrace": "false",
        "showStreams": "false",
        "skipBodyLineSeparator": "true"
      }
    }
  },
  "aws2-ecs": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "ecsClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "ecsClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "caffeine-cache": {
    "Consumer": {
      "endpoint_parameters": {
        "action": "",
        "cacheLoader": "",
        "createCacheIfNotExist": "true",
        "evictionType": "SIZE_BASED",
        "expireAfterAccessTime": "300",
        "expireAfterWriteTime": "300",
        "initialCapacity": "10000",
        "key": "",
        "lazyStartProducer": "false",
        "maximumSize": "10000",
        "removalListener": "",
        "statsCounter": "",
        "statsEnabled": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "keyType": "",
        "valueType": "",
        "cacheName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "action": "",
        "cacheLoader": "",
        "createCacheIfNotExist": "true",
        "evictionType": "SIZE_BASED",
        "expireAfterAccessTime": "300",
        "expireAfterWriteTime": "300",
        "initialCapacity": "10000",
        "key": "",
        "lazyStartProducer": "false",
        "maximumSize": "10000",
        "removalListener": "",
        "statsCounter": "",
        "statsEnabled": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "keyType": "",
        "valueType": "",
        "cacheName": "",
        "synchronous": "false"
      }
    }
  },
  "thrift": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "host": "",
        "port": "",
        "service": "",
        "compressionType": "NONE",
        "exchangeProtocol": "BINARY",
        "clientTimeout": "",
        "maxPoolSize": "10",
        "poolSize": "1",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "negotiationType": "PLAINTEXT",
        "sslParameters": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "host": "",
        "port": "",
        "service": "",
        "compressionType": "NONE",
        "exchangeProtocol": "BINARY",
        "clientTimeout": "",
        "maxPoolSize": "10",
        "poolSize": "1",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "negotiationType": "PLAINTEXT",
        "sslParameters": ""
      }
    }
  },
  "servlet": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "servletName": "CamelServlet",
        "attachmentMultipartBinding": "false",
        "fileNameExtWhitelist": "",
        "httpRegistry": "",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "httpBinding": "",
        "httpConfiguration": "",
        "headerFilterStrategy": "",
        "contextPath": "",
        "chunked": "true",
        "disableStreamCache": "false",
        "async": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "responseBufferSize": "",
        "transferException": "false",
        "eagerCheckContentAvailable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "optionsEnabled": "false",
        "traceEnabled": "false",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "synchronous": "false",
        "Spring-Boot Property": "Description",
        "camel.component.servlet.mapping.enabled": "Enables the automatic mapping of the servlet component into the Spring web context",
        "camel.component.servlet.mapping.context-path": "Context path used by the servlet component for automatic mapping",
        "camel.component.servlet.mapping.servlet-name": "The name of the Camel servlet"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "servletName": "CamelServlet",
        "attachmentMultipartBinding": "false",
        "fileNameExtWhitelist": "",
        "httpRegistry": "",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "httpBinding": "",
        "httpConfiguration": "",
        "headerFilterStrategy": "",
        "contextPath": "",
        "chunked": "true",
        "disableStreamCache": "false",
        "async": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "responseBufferSize": "",
        "transferException": "false",
        "eagerCheckContentAvailable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "optionsEnabled": "false",
        "traceEnabled": "false",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "synchronous": "false",
        "Spring-Boot Property": "Description",
        "camel.component.servlet.mapping.enabled": "Enables the automatic mapping of the servlet component into the Spring web context",
        "camel.component.servlet.mapping.context-path": "Context path used by the servlet component for automatic mapping",
        "camel.component.servlet.mapping.servlet-name": "The name of the Camel servlet"
      }
    }
  },
  "iec60870-server": {
    "Consumer": {
      "endpoint_parameters": {
        "defaultConnectionOptions": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uriPath": "",
        "dataModuleOptions": "",
        "filterNonExecute": "true",
        "protocolOptions": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "acknowledgeWindow": "10",
        "adsuAddressType": "",
        "causeOfTransmissionType": "",
        "informationObjectAddressType": "",
        "maxUnacknowledged": "15",
        "timeout1": "15000",
        "timeout2": "10000",
        "timeout3": "20000",
        "causeSourceAddress": "",
        "connectionTimeout": "10000",
        "ignoreBackgroundScan": "true",
        "ignoreDaylightSavingTime": "false",
        "timeZone": "UTC",
        "connectionId": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "defaultConnectionOptions": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uriPath": "",
        "dataModuleOptions": "",
        "filterNonExecute": "true",
        "protocolOptions": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "acknowledgeWindow": "10",
        "adsuAddressType": "",
        "causeOfTransmissionType": "",
        "informationObjectAddressType": "",
        "maxUnacknowledged": "15",
        "timeout1": "15000",
        "timeout2": "10000",
        "timeout3": "20000",
        "causeSourceAddress": "",
        "connectionTimeout": "10000",
        "ignoreBackgroundScan": "true",
        "ignoreDaylightSavingTime": "false",
        "timeZone": "UTC",
        "connectionId": ""
      }
    }
  },
  "irc": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "hostname": "",
        "port": "",
        "autoRejoin": "true",
        "channels": "",
        "commandTimeout": "5000",
        "keys": "",
        "namesOnJoin": "false",
        "nickname": "",
        "persistent": "true",
        "realname": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "colors": "true",
        "synchronous": "false",
        "onJoin": "true",
        "onKick": "true",
        "onMode": "true",
        "onNick": "true",
        "onPart": "true",
        "onPrivmsg": "true",
        "onQuit": "true",
        "onReply": "false",
        "onTopic": "true",
        "nickPassword": "",
        "password": "",
        "sslContextParameters": "",
        "trustManager": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "hostname": "",
        "port": "",
        "autoRejoin": "true",
        "channels": "",
        "commandTimeout": "5000",
        "keys": "",
        "namesOnJoin": "false",
        "nickname": "",
        "persistent": "true",
        "realname": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "colors": "true",
        "synchronous": "false",
        "onJoin": "true",
        "onKick": "true",
        "onMode": "true",
        "onNick": "true",
        "onPart": "true",
        "onPrivmsg": "true",
        "onQuit": "true",
        "onReply": "false",
        "onTopic": "true",
        "nickPassword": "",
        "password": "",
        "sslContextParameters": "",
        "trustManager": "",
        "username": ""
      }
    }
  },
  "fop": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "outputType": "",
        "fopFactory": "",
        "userConfigURL": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "outputType": "",
        "fopFactory": "",
        "userConfigURL": "",
        "synchronous": "false"
      }
    }
  },
  "master": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "service": "",
        "serviceSelector": "",
        "namespace": "",
        "delegateUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "service": "",
        "serviceSelector": "",
        "namespace": "",
        "delegateUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "etcd-keys": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "lazyStartProducer": "false",
        "recursive": "false",
        "servicePath": "/services/",
        "timeout": "",
        "uris": "http://localhost:2379,http://localhost:4001",
        "timeToLive": "",
        "basicPropertyBinding": "false",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "path": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "lazyStartProducer": "false",
        "recursive": "false",
        "servicePath": "/services/",
        "timeout": "",
        "uris": "http://localhost:2379,http://localhost:4001",
        "timeToLive": "",
        "basicPropertyBinding": "false",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "path": "",
        "synchronous": "false"
      }
    }
  },
  "chatscript": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "1024",
        "botName": "",
        "chatUserName": "",
        "resetChat": "false",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "1024",
        "botName": "",
        "chatUserName": "",
        "resetChat": "false",
        "synchronous": "false"
      }
    }
  },
  "aws2-eks": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "eksClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "eksClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "milo-server": {
    "Consumer": {
      "endpoint_parameters": {
        "applicationName": "",
        "applicationUri": "",
        "bindAddresses": "",
        "buildInfo": "",
        "namespaceUri": "urn:org:apache:camel",
        "path": "",
        "port": "",
        "productUri": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "certificate": "",
        "certificateManager": "",
        "certificateValidator": "",
        "defaultCertificateValidator": "",
        "enableAnonymousAuthentication": "false",
        "securityPolicies": "",
        "securityPoliciesById": "",
        "userAuthenticationCredentials": "",
        "usernameSecurityPolicyUri": "",
        "itemId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "applicationName": "",
        "applicationUri": "",
        "bindAddresses": "",
        "buildInfo": "",
        "namespaceUri": "urn:org:apache:camel",
        "path": "",
        "port": "",
        "productUri": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "certificate": "",
        "certificateManager": "",
        "certificateValidator": "",
        "defaultCertificateValidator": "",
        "enableAnonymousAuthentication": "false",
        "securityPolicies": "",
        "securityPoliciesById": "",
        "userAuthenticationCredentials": "",
        "usernameSecurityPolicyUri": "",
        "itemId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "mock": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "assertPeriod": "0",
        "expectedCount": "-1",
        "failFast": "false",
        "reportGroup": "",
        "resultMinimumWaitTime": "0",
        "resultWaitTime": "0",
        "retainFirst": "-1",
        "retainLast": "-1",
        "sleepForEmptyTest": "0",
        "copyOnExchange": "true",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "assertPeriod": "0",
        "expectedCount": "-1",
        "failFast": "false",
        "reportGroup": "",
        "resultMinimumWaitTime": "0",
        "resultWaitTime": "0",
        "retainFirst": "-1",
        "retainLast": "-1",
        "sleepForEmptyTest": "0",
        "copyOnExchange": "true",
        "synchronous": "false"
      }
    }
  },
  "sql": {
    "Consumer": {
      "endpoint_parameters": {
        "dataSource": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "usePlaceholder": "true",
        "query": "",
        "allowNamedParameters": "true",
        "dataSourceRef": "",
        "outputClass": "",
        "outputHeader": "",
        "outputType": "SelectList",
        "separator": ",",
        "breakBatchOnConsumeFail": "false",
        "expectedUpdateCount": "-1",
        "maxMessagesPerPoll": "",
        "onConsume": "",
        "onConsumeBatchComplete": "",
        "onConsumeFailed": "",
        "routeEmptyResultSet": "false",
        "sendEmptyMessageWhenIdle": "false",
        "transacted": "false",
        "useIterator": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "processingStrategy": "",
        "batch": "false",
        "noop": "false",
        "useMessageBodyForSql": "false",
        "alwaysPopulateStatement": "false",
        "parametersCount": "",
        "placeholder": "#",
        "prepareStatementStrategy": "",
        "synchronous": "false",
        "templateOptions": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "dataSource": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "usePlaceholder": "true",
        "query": "",
        "allowNamedParameters": "true",
        "dataSourceRef": "",
        "outputClass": "",
        "outputHeader": "",
        "outputType": "SelectList",
        "separator": ",",
        "breakBatchOnConsumeFail": "false",
        "expectedUpdateCount": "-1",
        "maxMessagesPerPoll": "",
        "onConsume": "",
        "onConsumeBatchComplete": "",
        "onConsumeFailed": "",
        "routeEmptyResultSet": "false",
        "sendEmptyMessageWhenIdle": "false",
        "transacted": "false",
        "useIterator": "true",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "processingStrategy": "",
        "batch": "false",
        "noop": "false",
        "useMessageBodyForSql": "false",
        "alwaysPopulateStatement": "false",
        "parametersCount": "",
        "placeholder": "#",
        "prepareStatementStrategy": "",
        "synchronous": "false",
        "templateOptions": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "dns": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dnsType": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dnsType": "",
        "synchronous": "false"
      }
    }
  },
  "netty-http": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "disconnect": "false",
        "keepAlive": "true",
        "reuseAddress": "true",
        "reuseChannel": "false",
        "sync": "true",
        "tcpNoDelay": "true",
        "bridgeErrorHandler": "false",
        "broadcast": "false",
        "clientMode": "false",
        "reconnect": "true",
        "reconnectInterval": "10000",
        "backlog": "",
        "bossCount": "1",
        "bossGroup": "",
        "disconnectOnNoReply": "true",
        "executorService": "",
        "maximumPoolSize": "",
        "nettyServerBootstrapFactory": "",
        "networkInterface": "",
        "noReplyLogLevel": "WARN",
        "serverClosedChannelException{zwsp}CaughtLogLevel": "DEBUG",
        "serverExceptionCaughtLogLevel": "WARN",
        "serverInitializerFactory": "",
        "usingExecutorService": "true",
        "connectTimeout": "10000",
        "lazyStartProducer": "false",
        "requestTimeout": "",
        "clientInitializerFactory": "",
        "correlationManager": "",
        "lazyChannelCreation": "true",
        "producerPoolEnabled": "true",
        "producerPoolMaxActive": "-1",
        "producerPoolMaxIdle": "100",
        "producerPoolMinEvictableIdle": "300000",
        "producerPoolMinIdle": "",
        "udpConnectionlessSending": "false",
        "useByteBuf": "false",
        "allowSerializedHeaders": "false",
        "basicPropertyBinding": "false",
        "channelGroup": "",
        "headerFilterStrategy": "",
        "nativeTransport": "false",
        "nettyHttpBinding": "",
        "options": "",
        "receiveBufferSize": "65536",
        "receiveBufferSizePredictor": "",
        "sendBufferSize": "65536",
        "transferExchange": "false",
        "udpByteArrayCodec": "false",
        "workerCount": "",
        "workerGroup": "",
        "allowDefaultCodec": "true",
        "autoAppendDelimiter": "true",
        "decoderMaxLineLength": "1024",
        "decoders": "",
        "delimiter": "LINE",
        "encoders": "",
        "encoding": "",
        "textline": "false",
        "enabledProtocols": "TLSv1,TLSv1.1,TLSv1.2",
        "keyStoreFile": "",
        "keyStoreFormat": "",
        "keyStoreResource": "",
        "needClientAuth": "false",
        "passphrase": "",
        "securityConfiguration": "",
        "securityProvider": "",
        "ssl": "false",
        "sslClientCertHeaders": "false",
        "sslContextParameters": "",
        "sslHandler": "",
        "trustStoreFile": "",
        "trustStoreResource": "",
        "useGlobalSslContextParameters": "false",
        "protocol": "",
        "host": "",
        "port": "",
        "path": "",
        "bridgeEndpoint": "false",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "send503whenSuspended": "true",
        "chunkedMaxContentLength": "1048576",
        "compression": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "httpMethodRestrict": "",
        "logWarnOnBadRequest": "true",
        "mapHeaders": "true",
        "maxHeaderSize": "8192",
        "nettySharedHttpServer": "",
        "traceEnabled": "false",
        "urlDecodeHeaders": "false",
        "cookieHandler": "",
        "throwExceptionOnFailure": "true",
        "okStatusCodeRange": "200-299",
        "useRelativePath": "true",
        "disableStreamCache": "false",
        "synchronous": "false",
        "transferException": "false",
        "securityOptions": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "disconnect": "false",
        "keepAlive": "true",
        "reuseAddress": "true",
        "reuseChannel": "false",
        "sync": "true",
        "tcpNoDelay": "true",
        "bridgeErrorHandler": "false",
        "broadcast": "false",
        "clientMode": "false",
        "reconnect": "true",
        "reconnectInterval": "10000",
        "backlog": "",
        "bossCount": "1",
        "bossGroup": "",
        "disconnectOnNoReply": "true",
        "executorService": "",
        "maximumPoolSize": "",
        "nettyServerBootstrapFactory": "",
        "networkInterface": "",
        "noReplyLogLevel": "WARN",
        "serverClosedChannelException{zwsp}CaughtLogLevel": "DEBUG",
        "serverExceptionCaughtLogLevel": "WARN",
        "serverInitializerFactory": "",
        "usingExecutorService": "true",
        "connectTimeout": "10000",
        "lazyStartProducer": "false",
        "requestTimeout": "",
        "clientInitializerFactory": "",
        "correlationManager": "",
        "lazyChannelCreation": "true",
        "producerPoolEnabled": "true",
        "producerPoolMaxActive": "-1",
        "producerPoolMaxIdle": "100",
        "producerPoolMinEvictableIdle": "300000",
        "producerPoolMinIdle": "",
        "udpConnectionlessSending": "false",
        "useByteBuf": "false",
        "allowSerializedHeaders": "false",
        "basicPropertyBinding": "false",
        "channelGroup": "",
        "headerFilterStrategy": "",
        "nativeTransport": "false",
        "nettyHttpBinding": "",
        "options": "",
        "receiveBufferSize": "65536",
        "receiveBufferSizePredictor": "",
        "sendBufferSize": "65536",
        "transferExchange": "false",
        "udpByteArrayCodec": "false",
        "workerCount": "",
        "workerGroup": "",
        "allowDefaultCodec": "true",
        "autoAppendDelimiter": "true",
        "decoderMaxLineLength": "1024",
        "decoders": "",
        "delimiter": "LINE",
        "encoders": "",
        "encoding": "",
        "textline": "false",
        "enabledProtocols": "TLSv1,TLSv1.1,TLSv1.2",
        "keyStoreFile": "",
        "keyStoreFormat": "",
        "keyStoreResource": "",
        "needClientAuth": "false",
        "passphrase": "",
        "securityConfiguration": "",
        "securityProvider": "",
        "ssl": "false",
        "sslClientCertHeaders": "false",
        "sslContextParameters": "",
        "sslHandler": "",
        "trustStoreFile": "",
        "trustStoreResource": "",
        "useGlobalSslContextParameters": "false",
        "protocol": "",
        "host": "",
        "port": "",
        "path": "",
        "bridgeEndpoint": "false",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "send503whenSuspended": "true",
        "chunkedMaxContentLength": "1048576",
        "compression": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "httpMethodRestrict": "",
        "logWarnOnBadRequest": "true",
        "mapHeaders": "true",
        "maxHeaderSize": "8192",
        "nettySharedHttpServer": "",
        "traceEnabled": "false",
        "urlDecodeHeaders": "false",
        "cookieHandler": "",
        "throwExceptionOnFailure": "true",
        "okStatusCodeRange": "200-299",
        "useRelativePath": "true",
        "disableStreamCache": "false",
        "synchronous": "false",
        "transferException": "false",
        "securityOptions": ""
      }
    }
  },
  "jolt": {
    "Consumer": {
      "endpoint_parameters": {
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "transform": "",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "contentCache": "false",
        "inputType": "Hydrated",
        "outputType": "Hydrated",
        "transformDsl": "Chainr",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "transform": "",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "contentCache": "false",
        "inputType": "Hydrated",
        "outputType": "Hydrated",
        "transformDsl": "Chainr",
        "synchronous": "false"
      }
    }
  },
  "paho": {
    "Consumer": {
      "endpoint_parameters": {
        "automaticReconnect": "true",
        "brokerUrl": "tcp://localhost:1883",
        "cleanSession": "true",
        "clientId": "",
        "configuration": "",
        "connectionTimeout": "30",
        "filePersistenceDirectory": "",
        "keepAliveInterval": "60",
        "maxInflight": "10",
        "maxReconnectDelay": "128000",
        "mqttVersion": "",
        "persistence": "MEMORY",
        "qos": "2",
        "retained": "false",
        "serverURIs": "",
        "willPayload": "",
        "willQos": "",
        "willRetained": "false",
        "willTopic": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "client": "",
        "customWebSocketHeaders": "",
        "executorServiceTimeout": "1",
        "httpsHostnameVerification{zwsp}Enabled": "true",
        "password": "",
        "socketFactory": "",
        "sslClientProps": "",
        "sslHostnameVerifier": "",
        "userName": "",
        "topic": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "automaticReconnect": "true",
        "brokerUrl": "tcp://localhost:1883",
        "cleanSession": "true",
        "clientId": "",
        "configuration": "",
        "connectionTimeout": "30",
        "filePersistenceDirectory": "",
        "keepAliveInterval": "60",
        "maxInflight": "10",
        "maxReconnectDelay": "128000",
        "mqttVersion": "",
        "persistence": "MEMORY",
        "qos": "2",
        "retained": "false",
        "serverURIs": "",
        "willPayload": "",
        "willQos": "",
        "willRetained": "false",
        "willTopic": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "client": "",
        "customWebSocketHeaders": "",
        "executorServiceTimeout": "1",
        "httpsHostnameVerification{zwsp}Enabled": "true",
        "password": "",
        "socketFactory": "",
        "sslClientProps": "",
        "sslHostnameVerifier": "",
        "userName": "",
        "topic": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "box": {
    "Consumer": {
      "endpoint_parameters": {
        "clientId": "",
        "configuration": "",
        "enterpriseId": "",
        "userId": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpParams": "",
        "authenticationType": "APP_USER_AUTHENTICATION",
        "accessTokenCache": "",
        "clientSecret": "",
        "encryptionAlgorithm": "RSA_SHA_256",
        "maxCacheEntries": "100",
        "privateKeyFile": "",
        "privateKeyPassword": "",
        "publicKeyId": "",
        "sslContextParameters": "",
        "userName": "",
        "userPassword": "",
        "apiName": "",
        "inBody": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "collaborations": "Provides operations to manage Box collaborations",
        "comments": "Provides operations to manage Box comments",
        "event-logs": "Provides operations to read Box enterprise (admin) event logs",
        "events": "Provides operations to manage Box events",
        "files": "Provides operations to manage Box files",
        "folders": "Provides operations to manage Box folders",
        "groups": "Provides operations to manage Box groups",
        "search": "Provides operations to manage Box searches",
        "tasks": "Provides operations to manage Box tasks",
        "users": "Provides operations to manage Box users",
        "addFolderCollaboration": "The role of the collaborator",
        "addFolderCollaborationByEmail": "The role of the collaborator",
        "deleteCollaboration": "The id of comment to change",
        "getCollaborationInfo": "The id of collaboration",
        "getFolderCollaborations": "The id of folder to get collaborations information on",
        "updateCollaborationInfo": "Collaboration information to update",
        "addFileComment": "The comment's message",
        "changeCommentMessage": "The new message for the comment",
        "deleteComment": "The id of comment to delete",
        "getCommentInfo": "The id of comment",
        "getFileComments": "The id of file",
        "replyToComment": "The message for the reply",
        "getEnterpriseEvents": "*Optional*  An optional list of event types to filter by",
        "listen": "*Optional*  The starting position of the event stream",
        "checkUpload": "*Optional*  The size of the file's content used for monitoring the upload's progress",
        "copyFile": "*Optional*  The new name for copied file; if newName is null, the copied file has same name as the original.",
        "createFileMetadata": "*Optional*  The metadata template type name; if null the global properties template type is used.",
        "createFileSharedLink": "*Optional*  The date and time at which time the created shared link will expire; if unsharedDate is null then a non-expiring link is created.",
        "deleteFile": "The id of file to delete",
        "deleteFileMetadata": "The id of file to delete",
        "deleteFileVersion": "The version of file to delete; initial version of file has value of 0, second version of file is 1 and so on.",
        "downloadFile": "*Optional*  The byte offset in file at which to start the download; if null the entire contents of file will be downloaded.",
        "downloadPreviousFileVersion": "The version of file to download; initial version of file has value of 0, second version of file is 1 and so on.",
        "getDownloadURL": "The id of file",
        "getFileInfo": "The id of file",
        "getFileMetadata": "*Optional*  The metadata template type name; if null the global properties template type is used.",
        "getFilePreviewLink": "The id of the file to get preview link on",
        "getFileThumbnail": "Minimum width",
        "getFileVersions": "The id of file",
        "moveFile": "*Optional*  The new name of moved file; if newName is null, the moved file has same name as the original.",
        "promoteFileVersion": "The version of file to promote; initial version of file has value of 0, second version of file is 1 and so on.",
        "renameFile": "The new name of file",
        "updateFileInfo": "The updated information",
        "updateFileMetadata": "The new metadata values",
        "uploadFile": "*Optional*  The size of the file's content used for monitoring the upload's progress",
        "uploadNewFileVersion": "*Optional*  The content modified date that will be given to the uploaded file",
        "copyFolder": "*Optional*  The new name for copied folder; if newName is null, the copied folder has same name as the original.",
        "createFolder": "Sequence of Box folder names from parent folder to returned folder",
        "createFolderSharedLink": "The date and time at which time the created shared link will expire; if unsharedDate is null then a non-expiring link is created.",
        "deleteFolder": "The id of folder to delete",
        "getFolder": "Sequence of Box folder names from root folder to returned folder",
        "getFolderInfo": "The id of folder",
        "getFolderItems": "*Optional*  The index of first child item to retrieve; if null all child items are retrieved.",
        "moveFolder": "*Optional*  The new name of moved folder; if newName is null, the moved folder has same name as the original.",
        "renameFolder": "The new name of folder",
        "updateFolderInfo": "The updated information",
        "addGroupMembership": "The id of user to be added to group",
        "createGroup": "*Optional*  The provenance of the new group",
        "deleteGroup": "The id of group to delete",
        "deleteGroupMembership": "The id of group membership to delete",
        "getGroupInfo": "The id of group",
        "getGroupMembershipInfo": "The id of group membership",
        "getGroupMemberships": "The id of group",
        "updateGroupInfo": "The updated information",
        "updateGroupMembershipInfo": "The updated information",
        "searchFolder": "The search query",
        "addAssignmentToTask": "The id of task to add assignment for",
        "addFileTask": "*Optional*  An optional message to include with the task",
        "deleteTask": "The id of task to delete",
        "deleteTaskAssignment": "The id of task assignment to delete",
        "getFileTasks": "The id of file",
        "getTaskAssignmentInfo": "The id of task assignment",
        "getTaskAssignments": "The id of task",
        "getTaskInfo": "The id of task",
        "updateTaskInfo": "The id of task",
        "addUserEmailAlias": "The id of user",
        "createAppUser": "*Optional*  Additional user information",
        "createEnterpriseUser": "*Optional*  Additional user information",
        "deleteUser": "The id of user to delete",
        "deleteUserEmailAlias": "The id of user",
        "getAllEnterpriseOrExternalUsers": "*Optional*  The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned.",
        "getUserEmailAlias": "The id of user",
        "getUserInfo": "The id of user",
        "moveFolderToUser": "The id of user",
        "updateUserInfo": "The id of user to update"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "clientId": "",
        "configuration": "",
        "enterpriseId": "",
        "userId": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpParams": "",
        "authenticationType": "APP_USER_AUTHENTICATION",
        "accessTokenCache": "",
        "clientSecret": "",
        "encryptionAlgorithm": "RSA_SHA_256",
        "maxCacheEntries": "100",
        "privateKeyFile": "",
        "privateKeyPassword": "",
        "publicKeyId": "",
        "sslContextParameters": "",
        "userName": "",
        "userPassword": "",
        "apiName": "",
        "inBody": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "collaborations": "Provides operations to manage Box collaborations",
        "comments": "Provides operations to manage Box comments",
        "event-logs": "Provides operations to read Box enterprise (admin) event logs",
        "events": "Provides operations to manage Box events",
        "files": "Provides operations to manage Box files",
        "folders": "Provides operations to manage Box folders",
        "groups": "Provides operations to manage Box groups",
        "search": "Provides operations to manage Box searches",
        "tasks": "Provides operations to manage Box tasks",
        "users": "Provides operations to manage Box users",
        "addFolderCollaboration": "The role of the collaborator",
        "addFolderCollaborationByEmail": "The role of the collaborator",
        "deleteCollaboration": "The id of comment to change",
        "getCollaborationInfo": "The id of collaboration",
        "getFolderCollaborations": "The id of folder to get collaborations information on",
        "updateCollaborationInfo": "Collaboration information to update",
        "addFileComment": "The comment's message",
        "changeCommentMessage": "The new message for the comment",
        "deleteComment": "The id of comment to delete",
        "getCommentInfo": "The id of comment",
        "getFileComments": "The id of file",
        "replyToComment": "The message for the reply",
        "getEnterpriseEvents": "*Optional*  An optional list of event types to filter by",
        "listen": "*Optional*  The starting position of the event stream",
        "checkUpload": "*Optional*  The size of the file's content used for monitoring the upload's progress",
        "copyFile": "*Optional*  The new name for copied file; if newName is null, the copied file has same name as the original.",
        "createFileMetadata": "*Optional*  The metadata template type name; if null the global properties template type is used.",
        "createFileSharedLink": "*Optional*  The date and time at which time the created shared link will expire; if unsharedDate is null then a non-expiring link is created.",
        "deleteFile": "The id of file to delete",
        "deleteFileMetadata": "The id of file to delete",
        "deleteFileVersion": "The version of file to delete; initial version of file has value of 0, second version of file is 1 and so on.",
        "downloadFile": "*Optional*  The byte offset in file at which to start the download; if null the entire contents of file will be downloaded.",
        "downloadPreviousFileVersion": "The version of file to download; initial version of file has value of 0, second version of file is 1 and so on.",
        "getDownloadURL": "The id of file",
        "getFileInfo": "The id of file",
        "getFileMetadata": "*Optional*  The metadata template type name; if null the global properties template type is used.",
        "getFilePreviewLink": "The id of the file to get preview link on",
        "getFileThumbnail": "Minimum width",
        "getFileVersions": "The id of file",
        "moveFile": "*Optional*  The new name of moved file; if newName is null, the moved file has same name as the original.",
        "promoteFileVersion": "The version of file to promote; initial version of file has value of 0, second version of file is 1 and so on.",
        "renameFile": "The new name of file",
        "updateFileInfo": "The updated information",
        "updateFileMetadata": "The new metadata values",
        "uploadFile": "*Optional*  The size of the file's content used for monitoring the upload's progress",
        "uploadNewFileVersion": "*Optional*  The content modified date that will be given to the uploaded file",
        "copyFolder": "*Optional*  The new name for copied folder; if newName is null, the copied folder has same name as the original.",
        "createFolder": "Sequence of Box folder names from parent folder to returned folder",
        "createFolderSharedLink": "The date and time at which time the created shared link will expire; if unsharedDate is null then a non-expiring link is created.",
        "deleteFolder": "The id of folder to delete",
        "getFolder": "Sequence of Box folder names from root folder to returned folder",
        "getFolderInfo": "The id of folder",
        "getFolderItems": "*Optional*  The index of first child item to retrieve; if null all child items are retrieved.",
        "moveFolder": "*Optional*  The new name of moved folder; if newName is null, the moved folder has same name as the original.",
        "renameFolder": "The new name of folder",
        "updateFolderInfo": "The updated information",
        "addGroupMembership": "The id of user to be added to group",
        "createGroup": "*Optional*  The provenance of the new group",
        "deleteGroup": "The id of group to delete",
        "deleteGroupMembership": "The id of group membership to delete",
        "getGroupInfo": "The id of group",
        "getGroupMembershipInfo": "The id of group membership",
        "getGroupMemberships": "The id of group",
        "updateGroupInfo": "The updated information",
        "updateGroupMembershipInfo": "The updated information",
        "searchFolder": "The search query",
        "addAssignmentToTask": "The id of task to add assignment for",
        "addFileTask": "*Optional*  An optional message to include with the task",
        "deleteTask": "The id of task to delete",
        "deleteTaskAssignment": "The id of task assignment to delete",
        "getFileTasks": "The id of file",
        "getTaskAssignmentInfo": "The id of task assignment",
        "getTaskAssignments": "The id of task",
        "getTaskInfo": "The id of task",
        "updateTaskInfo": "The id of task",
        "addUserEmailAlias": "The id of user",
        "createAppUser": "*Optional*  Additional user information",
        "createEnterpriseUser": "*Optional*  Additional user information",
        "deleteUser": "The id of user to delete",
        "deleteUserEmailAlias": "The id of user",
        "getAllEnterpriseOrExternalUsers": "*Optional*  The filter term to lookup users by (login for external, login or name for managed); if null all managed users are returned.",
        "getUserEmailAlias": "The id of user",
        "getUserInfo": "The id of user",
        "moveFolderToUser": "The id of user",
        "updateUserInfo": "The id of user to update"
      }
    }
  },
  "aws2-athena": {
    "Consumer": {
      "endpoint_parameters": {
        "accessKey": "",
        "amazonAthenaClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "database": "",
        "delay": "2000",
        "encryptionOption": "",
        "includeTrace": "false",
        "initialDelay": "1000",
        "kmsKey": "",
        "lazyStartProducer": "false",
        "maxAttempts": "1",
        "maxResults": "",
        "nextToken": "",
        "operation": "startQueryExecution",
        "outputLocation": "",
        "outputType": "StreamList",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "queryExecutionId": "",
        "queryString": "",
        "region": "",
        "resetWaitTimeoutOnRetry": "true",
        "retry": "never",
        "secretKey": "",
        "waitTimeout": "0",
        "workGroup": "",
        "basicPropertyBinding": "false",
        "clientRequestToken": "",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "accessKey": "",
        "amazonAthenaClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "database": "",
        "delay": "2000",
        "encryptionOption": "",
        "includeTrace": "false",
        "initialDelay": "1000",
        "kmsKey": "",
        "lazyStartProducer": "false",
        "maxAttempts": "1",
        "maxResults": "",
        "nextToken": "",
        "operation": "startQueryExecution",
        "outputLocation": "",
        "outputType": "StreamList",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "queryExecutionId": "",
        "queryString": "",
        "region": "",
        "resetWaitTimeoutOnRetry": "true",
        "retry": "never",
        "secretKey": "",
        "waitTimeout": "0",
        "workGroup": "",
        "basicPropertyBinding": "false",
        "clientRequestToken": "",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "hazelcast-replicatedmap": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "workday": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "entity": "",
        "path": "",
        "httpConnectionManager": "",
        "synchronous": "false",
        "reportFormat": "json",
        "host": "",
        "clientId": "",
        "clientSecret": "",
        "tokenRefresh": "",
        "tenant": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "entity": "",
        "path": "",
        "httpConnectionManager": "",
        "synchronous": "false",
        "reportFormat": "json",
        "host": "",
        "clientId": "",
        "clientSecret": "",
        "tokenRefresh": "",
        "tenant": ""
      }
    }
  },
  "aws-lambda": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "invokeFunction",
        "region": "",
        "awsLambdaClient": "",
        "basicPropertyBinding": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "accessKey": "",
        "secretKey": "",
        "function": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "invokeFunction",
        "region": "",
        "awsLambdaClient": "",
        "basicPropertyBinding": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "accessKey": "",
        "secretKey": "",
        "function": "",
        "synchronous": "false"
      }
    }
  },
  "aws2-mq": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonMqClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonMqClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "hazelcast-map": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "openstack-nova": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    }
  },
  "spring-ws": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "type": "",
        "lookupKey": "",
        "webServiceEndpointUri": "",
        "expression": "",
        "messageFilter": "",
        "messageIdStrategy": "",
        "endpointDispatcher": "",
        "endpointMapping": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "allowResponseAttachment{zwsp}Override": "false",
        "allowResponseHeaderOverride": "false",
        "faultAction": "",
        "faultTo": "",
        "messageFactory": "",
        "messageSender": "",
        "outputAction": "",
        "replyTo": "",
        "soapAction": "",
        "timeout": "",
        "webServiceTemplate": "",
        "wsAddressingAction": "",
        "synchronous": "false",
        "sslContextParameters": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "type": "",
        "lookupKey": "",
        "webServiceEndpointUri": "",
        "expression": "",
        "messageFilter": "",
        "messageIdStrategy": "",
        "endpointDispatcher": "",
        "endpointMapping": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "allowResponseAttachment{zwsp}Override": "false",
        "allowResponseHeaderOverride": "false",
        "faultAction": "",
        "faultTo": "",
        "messageFactory": "",
        "messageSender": "",
        "outputAction": "",
        "replyTo": "",
        "soapAction": "",
        "timeout": "",
        "webServiceTemplate": "",
        "wsAddressingAction": "",
        "synchronous": "false",
        "sslContextParameters": ""
      }
    }
  },
  "crypto": {
    "Consumer": {
      "endpoint_parameters": {
        "algorithm": "SHA256withRSA",
        "alias": "",
        "certificateName": "",
        "keystore": "",
        "keystoreName": "",
        "lazyStartProducer": "false",
        "privateKey": "",
        "privateKeyName": "",
        "provider": "",
        "publicKeyName": "",
        "secureRandomName": "",
        "signatureHeaderName": "",
        "basicPropertyBinding": "false",
        "bufferSize": "2048",
        "certificate": "",
        "clearHeaders": "true",
        "configuration": "",
        "keyStoreParameters": "",
        "publicKey": "",
        "secureRandom": "",
        "password": "",
        "cryptoOperation": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "algorithm": "SHA256withRSA",
        "alias": "",
        "certificateName": "",
        "keystore": "",
        "keystoreName": "",
        "lazyStartProducer": "false",
        "privateKey": "",
        "privateKeyName": "",
        "provider": "",
        "publicKeyName": "",
        "secureRandomName": "",
        "signatureHeaderName": "",
        "basicPropertyBinding": "false",
        "bufferSize": "2048",
        "certificate": "",
        "clearHeaders": "true",
        "configuration": "",
        "keyStoreParameters": "",
        "publicKey": "",
        "secureRandom": "",
        "password": "",
        "cryptoOperation": "",
        "synchronous": "false"
      }
    }
  },
  "grpc": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "service": "",
        "flowControlWindow": "1048576",
        "maxMessageSize": "4194304",
        "consumerStrategy": "PROPAGATION",
        "forwardOnCompleted": "false",
        "forwardOnError": "false",
        "maxConcurrentCallsPer{zwsp}Connection": "2147483647",
        "exceptionHandler": "",
        "exchangePattern": "",
        "producerStrategy": "SIMPLE",
        "streamRepliesTo": "",
        "userAgent": "",
        "synchronous": "false",
        "authenticationType": "NONE",
        "jwtAlgorithm": "HMAC256",
        "jwtIssuer": "",
        "jwtSecret": "",
        "jwtSubject": "",
        "keyCertChainResource": "",
        "keyPassword": "",
        "keyResource": "",
        "negotiationType": "PLAINTEXT",
        "serviceAccountResource": "",
        "trustCertCollectionResource": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "service": "",
        "flowControlWindow": "1048576",
        "maxMessageSize": "4194304",
        "consumerStrategy": "PROPAGATION",
        "forwardOnCompleted": "false",
        "forwardOnError": "false",
        "maxConcurrentCallsPer{zwsp}Connection": "2147483647",
        "exceptionHandler": "",
        "exchangePattern": "",
        "producerStrategy": "SIMPLE",
        "streamRepliesTo": "",
        "userAgent": "",
        "synchronous": "false",
        "authenticationType": "NONE",
        "jwtAlgorithm": "HMAC256",
        "jwtIssuer": "",
        "jwtSecret": "",
        "jwtSubject": "",
        "keyCertChainResource": "",
        "keyPassword": "",
        "keyResource": "",
        "negotiationType": "PLAINTEXT",
        "serviceAccountResource": "",
        "trustCertCollectionResource": ""
      }
    }
  },
  "nitrite": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "database": "",
        "collection": "",
        "repositoryClass": "",
        "repositoryName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "password": "",
        "username": "",
        "Header constant": "Type",
        "NitriteConstants.CHANGE_TIMESTAMP": "Long",
        "NitriteConstants.CHANGE_TYPE": "org.dizitart.no2.event.ChangeType",
        "NitriteConstants.OPERATION": "AbstractNitriteOperation",
        "NitriteConstants.WRITE_RESULT": "org.dizitart.no2.WriteResult",
        "Class": "Parameters",
        "FindCollectionOperation": "Filter(optional), FindOptions(optional)",
        "RemoveCollectionOperation": "Filter(required), RemoveOptions(optional)",
        "UpdateCollectionOperation": "Filter(required), UpdateOptions(optional), Document(optional)",
        "CreateIndexOperation": "field:String(required), IndexOptions(required)",
        "DropIndexOperation": "field:String(required)",
        "ExportDatabaseOperation": "ExportOptions(optional)",
        "GetAttributesOperation": "",
        "GetByIdOperation": "NitriteId",
        "ImportDatabaseOperation": "",
        "InsertOperation": "payload(optional)",
        "ListIndicesOperation": "",
        "RebuildIndexOperation": "field (required), async (optional)",
        "UpdateOperation": "payload(optional)",
        "UpsertOperation": "payload(optional)",
        "FindRepositoryOperation": "ObjectFilter(optional), FindOptions(optional)",
        "RemoveRepositoryOperation": "ObjectFilter(required), RepoveOptions(optional)",
        "UpdateRepositoryOperation": "ObjectFilter(required), UpdateOptions(optional), payload(optional)"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "database": "",
        "collection": "",
        "repositoryClass": "",
        "repositoryName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "password": "",
        "username": "",
        "Header constant": "Type",
        "NitriteConstants.CHANGE_TIMESTAMP": "Long",
        "NitriteConstants.CHANGE_TYPE": "org.dizitart.no2.event.ChangeType",
        "NitriteConstants.OPERATION": "AbstractNitriteOperation",
        "NitriteConstants.WRITE_RESULT": "org.dizitart.no2.WriteResult",
        "Class": "Parameters",
        "FindCollectionOperation": "Filter(optional), FindOptions(optional)",
        "RemoveCollectionOperation": "Filter(required), RemoveOptions(optional)",
        "UpdateCollectionOperation": "Filter(required), UpdateOptions(optional), Document(optional)",
        "CreateIndexOperation": "field:String(required), IndexOptions(required)",
        "DropIndexOperation": "field:String(required)",
        "ExportDatabaseOperation": "ExportOptions(optional)",
        "GetAttributesOperation": "",
        "GetByIdOperation": "NitriteId",
        "ImportDatabaseOperation": "",
        "InsertOperation": "payload(optional)",
        "ListIndicesOperation": "",
        "RebuildIndexOperation": "field (required), async (optional)",
        "UpdateOperation": "payload(optional)",
        "UpsertOperation": "payload(optional)",
        "FindRepositoryOperation": "ObjectFilter(optional), FindOptions(optional)",
        "RemoveRepositoryOperation": "ObjectFilter(required), RepoveOptions(optional)",
        "UpdateRepositoryOperation": "ObjectFilter(required), UpdateOptions(optional), payload(optional)"
      }
    }
  },
  "openstack-neutron": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "apiVersion": "V3",
        "config": "",
        "operation": "",
        "password": "",
        "project": "",
        "subsystem": "",
        "username": "",
        "synchronous": "false"
      }
    }
  },
  "debezium-postgres": {
    "Consumer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "internalKeyConverter": "org.apache.kafka.connect.json.JsonConverter",
        "internalValueConverter": "org.apache.kafka.connect.json.JsonConverter",
        "offsetCommitPolicy": "io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy",
        "offsetCommitTimeoutMs": "5s",
        "offsetFlushIntervalMs": "60s",
        "offsetStorage": "org.apache.kafka.connect.storage.FileOffsetBackingStore",
        "offsetStorageFileName": "",
        "offsetStoragePartitions": "",
        "offsetStorageReplicationFactor": "",
        "offsetStorageTopic": "",
        "basicPropertyBinding": "false",
        "binaryHandlingMode": "bytes",
        "columnBlacklist": "",
        "columnExcludeList": "",
        "columnIncludeList": "",
        "columnPropagateSourceType": "",
        "columnWhitelist": "",
        "converters": "",
        "databaseDbname": "",
        "databaseHistoryFileFilename": "",
        "databaseHostname": "",
        "databaseInitialStatements": "",
        "databasePassword": "",
        "databasePort": "5432",
        "databaseServerName": "",
        "databaseSslcert": "",
        "databaseSslfactory": "",
        "databaseSslkey": "",
        "databaseSslmode": "disable",
        "databaseSslpassword": "",
        "databaseSslrootcert": "",
        "databaseTcpkeepalive": "true",
        "databaseUser": "",
        "datatypePropagateSourceType": "",
        "decimalHandlingMode": "precise",
        "eventProcessingFailureHandling{zwsp}Mode": "fail",
        "heartbeatActionQuery": "",
        "heartbeatIntervalMs": "0ms",
        "heartbeatTopicsPrefix": "__debezium-heartbeat",
        "hstoreHandlingMode": "json",
        "includeUnknownDatatypes": "false",
        "intervalHandlingMode": "numeric",
        "maxBatchSize": "2048",
        "maxQueueSize": "8192",
        "messageKeyColumns": "",
        "pluginName": "decoderbufs",
        "pollIntervalMs": "500ms",
        "provideTransactionMetadata": "false",
        "publicationAutocreateMode": "all_tables",
        "publicationName": "dbz_publication",
        "queryFetchSize": "0",
        "retriableRestartConnectorWait{zwsp}Ms": "10s",
        "sanitizeFieldNames": "false",
        "schemaBlacklist": "",
        "schemaExcludeList": "",
        "schemaIncludeList": "",
        "schemaRefreshMode": "columns_diff",
        "schemaWhitelist": "",
        "skippedOperations": "",
        "slotDropOnStop": "false",
        "slotMaxRetries": "6",
        "slotName": "debezium",
        "slotRetryDelayMs": "10s",
        "slotStreamParams": "",
        "snapshotCustomClass": "",
        "snapshotDelayMs": "0ms",
        "snapshotFetchSize": "",
        "snapshotLockTimeoutMs": "10s",
        "snapshotMode": "initial",
        "snapshotSelectStatement{zwsp}Overrides": "",
        "sourceStructVersion": "v2",
        "statusUpdateIntervalMs": "10s",
        "tableBlacklist": "",
        "tableExcludeList": "",
        "tableIgnoreBuiltin": "true",
        "tableIncludeList": "",
        "tableWhitelist": "",
        "timePrecisionMode": "adaptive",
        "toastedValuePlaceholder": "__debezium_unavailable_value",
        "tombstonesOnDelete": "false",
        "xminFetchIntervalMs": "0ms",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "DebeziumConstants.HEADER_IDENTIFIER": "String",
        "DebeziumConstants.HEADER_KEY": "Struct",
        "DebeziumConstants.HEADER_SOURCE_METADATA": "Map",
        "DebeziumConstants.HEADER_OPERATION": "String",
        "DebeziumConstants.HEADER_TIMESTAMP": "Long",
        "DebeziumConstants.HEADER_BEFORE": "Struct"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "additionalProperties": "",
        "bridgeErrorHandler": "false",
        "configuration": "",
        "internalKeyConverter": "org.apache.kafka.connect.json.JsonConverter",
        "internalValueConverter": "org.apache.kafka.connect.json.JsonConverter",
        "offsetCommitPolicy": "io.debezium.embedded.spi.OffsetCommitPolicy.PeriodicCommitOffsetPolicy",
        "offsetCommitTimeoutMs": "5s",
        "offsetFlushIntervalMs": "60s",
        "offsetStorage": "org.apache.kafka.connect.storage.FileOffsetBackingStore",
        "offsetStorageFileName": "",
        "offsetStoragePartitions": "",
        "offsetStorageReplicationFactor": "",
        "offsetStorageTopic": "",
        "basicPropertyBinding": "false",
        "binaryHandlingMode": "bytes",
        "columnBlacklist": "",
        "columnExcludeList": "",
        "columnIncludeList": "",
        "columnPropagateSourceType": "",
        "columnWhitelist": "",
        "converters": "",
        "databaseDbname": "",
        "databaseHistoryFileFilename": "",
        "databaseHostname": "",
        "databaseInitialStatements": "",
        "databasePassword": "",
        "databasePort": "5432",
        "databaseServerName": "",
        "databaseSslcert": "",
        "databaseSslfactory": "",
        "databaseSslkey": "",
        "databaseSslmode": "disable",
        "databaseSslpassword": "",
        "databaseSslrootcert": "",
        "databaseTcpkeepalive": "true",
        "databaseUser": "",
        "datatypePropagateSourceType": "",
        "decimalHandlingMode": "precise",
        "eventProcessingFailureHandling{zwsp}Mode": "fail",
        "heartbeatActionQuery": "",
        "heartbeatIntervalMs": "0ms",
        "heartbeatTopicsPrefix": "__debezium-heartbeat",
        "hstoreHandlingMode": "json",
        "includeUnknownDatatypes": "false",
        "intervalHandlingMode": "numeric",
        "maxBatchSize": "2048",
        "maxQueueSize": "8192",
        "messageKeyColumns": "",
        "pluginName": "decoderbufs",
        "pollIntervalMs": "500ms",
        "provideTransactionMetadata": "false",
        "publicationAutocreateMode": "all_tables",
        "publicationName": "dbz_publication",
        "queryFetchSize": "0",
        "retriableRestartConnectorWait{zwsp}Ms": "10s",
        "sanitizeFieldNames": "false",
        "schemaBlacklist": "",
        "schemaExcludeList": "",
        "schemaIncludeList": "",
        "schemaRefreshMode": "columns_diff",
        "schemaWhitelist": "",
        "skippedOperations": "",
        "slotDropOnStop": "false",
        "slotMaxRetries": "6",
        "slotName": "debezium",
        "slotRetryDelayMs": "10s",
        "slotStreamParams": "",
        "snapshotCustomClass": "",
        "snapshotDelayMs": "0ms",
        "snapshotFetchSize": "",
        "snapshotLockTimeoutMs": "10s",
        "snapshotMode": "initial",
        "snapshotSelectStatement{zwsp}Overrides": "",
        "sourceStructVersion": "v2",
        "statusUpdateIntervalMs": "10s",
        "tableBlacklist": "",
        "tableExcludeList": "",
        "tableIgnoreBuiltin": "true",
        "tableIncludeList": "",
        "tableWhitelist": "",
        "timePrecisionMode": "adaptive",
        "toastedValuePlaceholder": "__debezium_unavailable_value",
        "tombstonesOnDelete": "false",
        "xminFetchIntervalMs": "0ms",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Header constant": "Type",
        "DebeziumConstants.HEADER_IDENTIFIER": "String",
        "DebeziumConstants.HEADER_KEY": "Struct",
        "DebeziumConstants.HEADER_SOURCE_METADATA": "Map",
        "DebeziumConstants.HEADER_OPERATION": "String",
        "DebeziumConstants.HEADER_TIMESTAMP": "Long",
        "DebeziumConstants.HEADER_BEFORE": "Struct"
      }
    }
  },
  "gora": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dataStoreClass": "",
        "keyClass": "",
        "valueClass": "",
        "concurrentConsumers": "1",
        "endKey": "",
        "endTime": "",
        "fields": "",
        "keyRangeFrom": "",
        "keyRangeTo": "",
        "limit": "",
        "startKey": "",
        "startTime": "",
        "timeRangeFrom": "",
        "timeRangeTo": "",
        "timestamp": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "flushOnEveryOperation": "true",
        "hadoopConfiguration": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "dataStoreClass": "",
        "keyClass": "",
        "valueClass": "",
        "concurrentConsumers": "1",
        "endKey": "",
        "endTime": "",
        "fields": "",
        "keyRangeFrom": "",
        "keyRangeTo": "",
        "limit": "",
        "startKey": "",
        "startTime": "",
        "timeRangeFrom": "",
        "timeRangeTo": "",
        "timestamp": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "flushOnEveryOperation": "true",
        "hadoopConfiguration": "",
        "synchronous": "false"
      }
    }
  },
  "openshift-builds": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "operation": "",
        "portName": "",
        "portProtocol": "tcp",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "atmos": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uri": "",
        "fullTokenId": "",
        "secretKey": "",
        "sslValidation": "false",
        "operation": "",
        "localPath": "",
        "newRemotePath": "",
        "query": "",
        "remotePath": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uri": "",
        "fullTokenId": "",
        "secretKey": "",
        "sslValidation": "false",
        "operation": "",
        "localPath": "",
        "newRemotePath": "",
        "query": "",
        "remotePath": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "rest-openapi": {
    "Consumer": {
      "endpoint_parameters": {
        "basePath": "",
        "componentName": "",
        "consumes": "",
        "host": "",
        "lazyStartProducer": "false",
        "produces": "",
        "specificationUri": "openapi.json",
        "basicPropertyBinding": "false",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "operationId": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "basePath": "",
        "componentName": "",
        "consumes": "",
        "host": "",
        "lazyStartProducer": "false",
        "produces": "",
        "specificationUri": "openapi.json",
        "basicPropertyBinding": "false",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "operationId": "",
        "synchronous": "false"
      }
    }
  },
  "twitter-search": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "accessToken": "",
        "accessTokenSecret": "",
        "consumerKey": "",
        "consumerSecret": "",
        "keywords": "",
        "sendEmptyMessageWhenIdle": "false",
        "type": "polling",
        "distanceMetric": "km",
        "exceptionHandler": "",
        "exchangePattern": "",
        "extendedMode": "true",
        "latitude": "",
        "locations": "",
        "longitude": "",
        "pollStrategy": "",
        "radius": "",
        "synchronous": "false",
        "count": "5",
        "filterOld": "true",
        "lang": "",
        "numberOfPages": "1",
        "sinceId": "1",
        "userIds": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "30000",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "sortById": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "accessToken": "",
        "accessTokenSecret": "",
        "consumerKey": "",
        "consumerSecret": "",
        "keywords": "",
        "sendEmptyMessageWhenIdle": "false",
        "type": "polling",
        "distanceMetric": "km",
        "exceptionHandler": "",
        "exchangePattern": "",
        "extendedMode": "true",
        "latitude": "",
        "locations": "",
        "longitude": "",
        "pollStrategy": "",
        "radius": "",
        "synchronous": "false",
        "count": "5",
        "filterOld": "true",
        "lang": "",
        "numberOfPages": "1",
        "sinceId": "1",
        "userIds": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "30000",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "sortById": "true"
      }
    }
  },
  "milo-client": {
    "Consumer": {
      "endpoint_parameters": {
        "clientId": "",
        "configuration": "",
        "discoveryEndpointSuffix": "",
        "discoveryEndpointUri": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "allowedSecurityPolicies": "",
        "applicationName": "Apache Camel adapter for Eclipse Milo",
        "applicationUri": "http://camel.apache.org/EclipseMilo/Client",
        "channelLifetime": "",
        "keyAlias": "",
        "keyPassword": "",
        "keyStorePassword": "",
        "keyStoreType": "",
        "keyStoreUrl": "",
        "maxPendingPublishRequests": "",
        "maxResponseMessageSize": "",
        "overrideHost": "false",
        "productUri": "http://camel.apache.org/EclipseMilo",
        "requestedPublishingInterval": "1_000.0",
        "requestTimeout": "",
        "sessionName": "",
        "sessionTimeout": "",
        "endpointUri": "",
        "defaultAwaitWrites": "false",
        "node": "",
        "samplingInterval": "0.0",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Key": "Description",
        "ns": "Numeric namespace index",
        "nsu": "Namespace URI",
        "s": "String node ID",
        "i": "Numeric node ID",
        "g": "GUID/UUID node ID",
        "b": "Base64 encoded string for opaque node ID"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "clientId": "",
        "configuration": "",
        "discoveryEndpointSuffix": "",
        "discoveryEndpointUri": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "allowedSecurityPolicies": "",
        "applicationName": "Apache Camel adapter for Eclipse Milo",
        "applicationUri": "http://camel.apache.org/EclipseMilo/Client",
        "channelLifetime": "",
        "keyAlias": "",
        "keyPassword": "",
        "keyStorePassword": "",
        "keyStoreType": "",
        "keyStoreUrl": "",
        "maxPendingPublishRequests": "",
        "maxResponseMessageSize": "",
        "overrideHost": "false",
        "productUri": "http://camel.apache.org/EclipseMilo",
        "requestedPublishingInterval": "1_000.0",
        "requestTimeout": "",
        "sessionName": "",
        "sessionTimeout": "",
        "endpointUri": "",
        "defaultAwaitWrites": "false",
        "node": "",
        "samplingInterval": "0.0",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "Key": "Description",
        "ns": "Numeric namespace index",
        "nsu": "Namespace URI",
        "s": "String node ID",
        "i": "Numeric node ID",
        "g": "GUID/UUID node ID",
        "b": "Base64 encoded string for opaque node ID"
      }
    }
  },
  "atomix-set": {
    "Consumer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "ADD",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "ttl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "atomix": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "ADD",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "ttl": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "cmis": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "sessionFacadeFactory": "",
        "cmsUrl": "",
        "pageSize": "100",
        "readContent": "false",
        "readCount": "",
        "repositoryId": "",
        "query": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "queryMode": "false",
        "synchronous": "false",
        "password": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "sessionFacadeFactory": "",
        "cmsUrl": "",
        "pageSize": "100",
        "readContent": "false",
        "readCount": "",
        "repositoryId": "",
        "query": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "queryMode": "false",
        "synchronous": "false",
        "password": "",
        "username": ""
      }
    }
  },
  "facebook": {
    "Consumer": {
      "endpoint_parameters": {
        "clientURL": "",
        "clientVersion": "",
        "debugEnabled": "false",
        "gzipEnabled": "true",
        "httpConnectionTimeout": "20000",
        "httpDefaultMaxPerRoute": "2",
        "httpMaxTotalConnections": "20",
        "httpReadTimeout": "120000",
        "httpRetryCount": "0",
        "httpRetryIntervalSeconds": "5",
        "httpStreamingReadTimeout": "40000",
        "jsonStoreEnabled": "false",
        "mbeanEnabled": "false",
        "prettyDebugEnabled": "false",
        "restBaseURL": "https://graph.facebook.com/",
        "useSSL": "true",
        "videoBaseURL": "https://graph-video.facebook.com/",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "oAuthAccessToken": "",
        "oAuthAccessTokenURL": "https://graph.facebook.com/oauth/access_token",
        "oAuthAppId": "",
        "oAuthAppSecret": "",
        "oAuthAuthorizationURL": "https://www.facebook.com/dialog/oauth",
        "oAuthPermissions": "",
        "achievementURL": "",
        "albumId": "",
        "albumUpdate": "",
        "appId": "",
        "center": "",
        "checkinId": "",
        "checkinUpdate": "",
        "commentId": "",
        "commentUpdate": "",
        "description": "",
        "distance": "",
        "domainId": "",
        "domainName": "",
        "domainNames": "",
        "eventId": "",
        "eventUpdate": "",
        "friendId": "",
        "friendlistId": "",
        "friendlistName": "",
        "friendUserId": "",
        "groupId": "",
        "ids": "",
        "inBody": "",
        "includeRead": "",
        "isHidden": "",
        "link": "",
        "linkId": "",
        "locale": "",
        "message": "",
        "messageId": "",
        "metric": "",
        "milestoneId": "",
        "noteId": "",
        "notificationId": "",
        "objectId": "",
        "offerId": "",
        "optionDescription": "",
        "pageId": "",
        "permissionName": "",
        "permissions": "",
        "photoId": "",
        "pictureId": "",
        "pictureId2": "",
        "pictureSize": "",
        "placeId": "",
        "postId": "",
        "postUpdate": "",
        "queries": "",
        "query": "",
        "questionId": "",
        "reading": "",
        "readingOptions": "",
        "scoreValue": "",
        "size": "",
        "source": "",
        "subject": "",
        "tabId": "",
        "tagUpdate": "",
        "testUser1": "",
        "testUser2": "",
        "testUserId": "",
        "title": "",
        "toUserId": "",
        "toUserIds": "",
        "userId": "",
        "userId1": "",
        "userId2": "",
        "userIds": "",
        "userLocale": "",
        "videoId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "clientURL": "",
        "clientVersion": "",
        "debugEnabled": "false",
        "gzipEnabled": "true",
        "httpConnectionTimeout": "20000",
        "httpDefaultMaxPerRoute": "2",
        "httpMaxTotalConnections": "20",
        "httpReadTimeout": "120000",
        "httpRetryCount": "0",
        "httpRetryIntervalSeconds": "5",
        "httpStreamingReadTimeout": "40000",
        "jsonStoreEnabled": "false",
        "mbeanEnabled": "false",
        "prettyDebugEnabled": "false",
        "restBaseURL": "https://graph.facebook.com/",
        "useSSL": "true",
        "videoBaseURL": "https://graph-video.facebook.com/",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "oAuthAccessToken": "",
        "oAuthAccessTokenURL": "https://graph.facebook.com/oauth/access_token",
        "oAuthAppId": "",
        "oAuthAppSecret": "",
        "oAuthAuthorizationURL": "https://www.facebook.com/dialog/oauth",
        "oAuthPermissions": "",
        "achievementURL": "",
        "albumId": "",
        "albumUpdate": "",
        "appId": "",
        "center": "",
        "checkinId": "",
        "checkinUpdate": "",
        "commentId": "",
        "commentUpdate": "",
        "description": "",
        "distance": "",
        "domainId": "",
        "domainName": "",
        "domainNames": "",
        "eventId": "",
        "eventUpdate": "",
        "friendId": "",
        "friendlistId": "",
        "friendlistName": "",
        "friendUserId": "",
        "groupId": "",
        "ids": "",
        "inBody": "",
        "includeRead": "",
        "isHidden": "",
        "link": "",
        "linkId": "",
        "locale": "",
        "message": "",
        "messageId": "",
        "metric": "",
        "milestoneId": "",
        "noteId": "",
        "notificationId": "",
        "objectId": "",
        "offerId": "",
        "optionDescription": "",
        "pageId": "",
        "permissionName": "",
        "permissions": "",
        "photoId": "",
        "pictureId": "",
        "pictureId2": "",
        "pictureSize": "",
        "placeId": "",
        "postId": "",
        "postUpdate": "",
        "queries": "",
        "query": "",
        "questionId": "",
        "reading": "",
        "readingOptions": "",
        "scoreValue": "",
        "size": "",
        "source": "",
        "subject": "",
        "tabId": "",
        "tagUpdate": "",
        "testUser1": "",
        "testUser2": "",
        "testUserId": "",
        "title": "",
        "toUserId": "",
        "toUserIds": "",
        "userId": "",
        "userId1": "",
        "userId2": "",
        "userIds": "",
        "userLocale": "",
        "videoId": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "hazelcast-multimap": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "graphql": {
    "Consumer": {
      "endpoint_parameters": {
        "httpUri": "",
        "lazyStartProducer": "false",
        "operationName": "",
        "proxyHost": "",
        "query": "",
        "queryFile": "",
        "variables": "",
        "basicPropertyBinding": "false",
        "synchronous": "false",
        "accessToken": "",
        "password": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "httpUri": "",
        "lazyStartProducer": "false",
        "operationName": "",
        "proxyHost": "",
        "query": "",
        "queryFile": "",
        "variables": "",
        "basicPropertyBinding": "false",
        "synchronous": "false",
        "accessToken": "",
        "password": "",
        "username": ""
      }
    }
  },
  "resteasy": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "proxyConsumersClasses": "",
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "headerFilterStrategy": "",
        "httpUri": "",
        "chunked": "true",
        "disableStreamCache": "false",
        "resteasyMethod": "GET",
        "servletName": "",
        "transferException": "false",
        "async": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "responseBufferSize": "",
        "eagerCheckContentAvailable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "optionsEnabled": "false",
        "traceEnabled": "false",
        "bridgeEndpoint": "false",
        "clearExpiredCookies": "true",
        "connectionClose": "false",
        "copyHeaders": "true",
        "customHostHeader": "",
        "httpMethod": "",
        "ignoreResponseBody": "false",
        "preserveHostHeader": "false",
        "throwExceptionOnFailure": "true",
        "cookieHandler": "",
        "deleteWithBody": "false",
        "getWithBody": "false",
        "okStatusCodeRange": "200-299",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "setHttpResponseDuring{zwsp}Processing": "",
        "skipServletProcessing": "",
        "synchronous": "false",
        "useSystemProperties": "false",
        "proxyClientClass": "",
        "password": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "proxyConsumersClasses": "",
        "lazyStartProducer": "false",
        "allowJavaSerializedObject": "false",
        "basicPropertyBinding": "false",
        "headerFilterStrategy": "",
        "httpUri": "",
        "chunked": "true",
        "disableStreamCache": "false",
        "resteasyMethod": "GET",
        "servletName": "",
        "transferException": "false",
        "async": "false",
        "httpMethodRestrict": "",
        "matchOnUriPrefix": "false",
        "muteException": "false",
        "responseBufferSize": "",
        "eagerCheckContentAvailable": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "optionsEnabled": "false",
        "traceEnabled": "false",
        "bridgeEndpoint": "false",
        "clearExpiredCookies": "true",
        "connectionClose": "false",
        "copyHeaders": "true",
        "customHostHeader": "",
        "httpMethod": "",
        "ignoreResponseBody": "false",
        "preserveHostHeader": "false",
        "throwExceptionOnFailure": "true",
        "cookieHandler": "",
        "deleteWithBody": "false",
        "getWithBody": "false",
        "okStatusCodeRange": "200-299",
        "mapHttpMessageBody": "true",
        "mapHttpMessageFormUrlEncoded{zwsp}Body": "true",
        "mapHttpMessageHeaders": "true",
        "setHttpResponseDuring{zwsp}Processing": "",
        "skipServletProcessing": "",
        "synchronous": "false",
        "useSystemProperties": "false",
        "proxyClientClass": "",
        "password": "",
        "username": ""
      }
    }
  },
  "ftps": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "host": "",
        "port": "",
        "directoryName": "",
        "binary": "false",
        "charset": "",
        "disconnect": "false",
        "doneFileName": "",
        "fileName": "",
        "passiveMode": "false",
        "separator": "UNIX",
        "transferLoggingIntervalSeconds": "5",
        "transferLoggingLevel": "DEBUG",
        "transferLoggingVerbose": "false",
        "fastExistsCheck": "false",
        "delete": "false",
        "moveFailed": "",
        "noop": "false",
        "preMove": "",
        "preSort": "false",
        "recursive": "false",
        "resumeDownload": "false",
        "sendEmptyMessageWhenIdle": "false",
        "streamDownload": "false",
        "download": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "handleDirectoryParserAbsolute{zwsp}Result": "false",
        "ignoreFileNotFoundOrPermission{zwsp}Error": "false",
        "inProgressRepository": "",
        "localWorkDirectory": "",
        "onCompletionExceptionHandler": "",
        "pollStrategy": "",
        "processStrategy": "",
        "useList": "true",
        "fileExist": "Override",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "moveExisting": "",
        "tempFileName": "",
        "tempPrefix": "",
        "allowNullBody": "false",
        "chmod": "",
        "disconnectOnBatchComplete": "false",
        "eagerDeleteTargetFile": "true",
        "keepLastModified": "false",
        "moveExistingFileStrategy": "",
        "sendNoop": "true",
        "activePortRange": "",
        "autoCreate": "true",
        "bufferSize": "131072",
        "connectTimeout": "10000",
        "ftpClient": "",
        "ftpClientConfig": "",
        "ftpClientConfigParameters": "",
        "ftpClientParameters": "",
        "maximumReconnectAttempts": "",
        "reconnectDelay": "",
        "siteCommand": "",
        "soTimeout": "5m",
        "stepwise": "true",
        "synchronous": "false",
        "throwExceptionOnConnectFailed": "false",
        "timeout": "30s",
        "antExclude": "",
        "antFilterCaseSensitive": "true",
        "antInclude": "",
        "eagerMaxMessagesPerPoll": "true",
        "exclude": "",
        "filter": "",
        "filterDirectory": "",
        "filterFile": "",
        "idempotent": "false",
        "idempotentKey": "",
        "idempotentRepository": "",
        "include": "",
        "maxDepth": "2147483647",
        "maxMessagesPerPoll": "",
        "minDepth": "",
        "move": "",
        "exclusiveReadLockStrategy": "",
        "readLock": "none",
        "readLockCheckInterval": "1000",
        "readLockDeleteOrphanLockFiles": "true",
        "readLockLoggingLevel": "DEBUG",
        "readLockMarkerFile": "true",
        "readLockMinAge": "0",
        "readLockMinLength": "1",
        "readLockRemoveOnCommit": "false",
        "readLockRemoveOnRollback": "true",
        "readLockTimeout": "10000",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "account": "",
        "disableSecureDataChannel{zwsp}Defaults": "false",
        "execPbsz": "",
        "execProt": "",
        "ftpClientKeyStoreParameters": "",
        "ftpClientTrustStoreParameters": "",
        "implicit": "false",
        "password": "",
        "securityProtocol": "TLSv1.2",
        "sslContextParameters": "",
        "username": "",
        "shuffle": "false",
        "sortBy": "",
        "sorter": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "host": "",
        "port": "",
        "directoryName": "",
        "binary": "false",
        "charset": "",
        "disconnect": "false",
        "doneFileName": "",
        "fileName": "",
        "passiveMode": "false",
        "separator": "UNIX",
        "transferLoggingIntervalSeconds": "5",
        "transferLoggingLevel": "DEBUG",
        "transferLoggingVerbose": "false",
        "fastExistsCheck": "false",
        "delete": "false",
        "moveFailed": "",
        "noop": "false",
        "preMove": "",
        "preSort": "false",
        "recursive": "false",
        "resumeDownload": "false",
        "sendEmptyMessageWhenIdle": "false",
        "streamDownload": "false",
        "download": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "handleDirectoryParserAbsolute{zwsp}Result": "false",
        "ignoreFileNotFoundOrPermission{zwsp}Error": "false",
        "inProgressRepository": "",
        "localWorkDirectory": "",
        "onCompletionExceptionHandler": "",
        "pollStrategy": "",
        "processStrategy": "",
        "useList": "true",
        "fileExist": "Override",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "moveExisting": "",
        "tempFileName": "",
        "tempPrefix": "",
        "allowNullBody": "false",
        "chmod": "",
        "disconnectOnBatchComplete": "false",
        "eagerDeleteTargetFile": "true",
        "keepLastModified": "false",
        "moveExistingFileStrategy": "",
        "sendNoop": "true",
        "activePortRange": "",
        "autoCreate": "true",
        "bufferSize": "131072",
        "connectTimeout": "10000",
        "ftpClient": "",
        "ftpClientConfig": "",
        "ftpClientConfigParameters": "",
        "ftpClientParameters": "",
        "maximumReconnectAttempts": "",
        "reconnectDelay": "",
        "siteCommand": "",
        "soTimeout": "5m",
        "stepwise": "true",
        "synchronous": "false",
        "throwExceptionOnConnectFailed": "false",
        "timeout": "30s",
        "antExclude": "",
        "antFilterCaseSensitive": "true",
        "antInclude": "",
        "eagerMaxMessagesPerPoll": "true",
        "exclude": "",
        "filter": "",
        "filterDirectory": "",
        "filterFile": "",
        "idempotent": "false",
        "idempotentKey": "",
        "idempotentRepository": "",
        "include": "",
        "maxDepth": "2147483647",
        "maxMessagesPerPoll": "",
        "minDepth": "",
        "move": "",
        "exclusiveReadLockStrategy": "",
        "readLock": "none",
        "readLockCheckInterval": "1000",
        "readLockDeleteOrphanLockFiles": "true",
        "readLockLoggingLevel": "DEBUG",
        "readLockMarkerFile": "true",
        "readLockMinAge": "0",
        "readLockMinLength": "1",
        "readLockRemoveOnCommit": "false",
        "readLockRemoveOnRollback": "true",
        "readLockTimeout": "10000",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "account": "",
        "disableSecureDataChannel{zwsp}Defaults": "false",
        "execPbsz": "",
        "execProt": "",
        "ftpClientKeyStoreParameters": "",
        "ftpClientTrustStoreParameters": "",
        "implicit": "false",
        "password": "",
        "securityProtocol": "TLSv1.2",
        "sslContextParameters": "",
        "username": "",
        "shuffle": "false",
        "sortBy": "",
        "sorter": ""
      }
    }
  },
  "ahc": {
    "Consumer": {
      "endpoint_parameters": {
        "httpUri": "",
        "bridgeEndpoint": "false",
        "bufferSize": "4096",
        "connectionClose": "false",
        "cookieHandler": "",
        "headerFilterStrategy": "",
        "lazyStartProducer": "false",
        "throwExceptionOnFailure": "true",
        "transferException": "false",
        "basicPropertyBinding": "false",
        "binding": "",
        "clientConfig": "",
        "clientConfigOptions": "",
        "synchronous": "false",
        "clientConfigRealmOptions": "",
        "sslContextParameters": "",
        "allowJavaSerializedObject": "false",
        "client": "",
        "useGlobalSslContextParameters": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "httpUri": "",
        "bridgeEndpoint": "false",
        "bufferSize": "4096",
        "connectionClose": "false",
        "cookieHandler": "",
        "headerFilterStrategy": "",
        "lazyStartProducer": "false",
        "throwExceptionOnFailure": "true",
        "transferException": "false",
        "basicPropertyBinding": "false",
        "binding": "",
        "clientConfig": "",
        "clientConfigOptions": "",
        "synchronous": "false",
        "clientConfigRealmOptions": "",
        "sslContextParameters": "",
        "allowJavaSerializedObject": "false",
        "client": "",
        "useGlobalSslContextParameters": "false"
      }
    }
  },
  "json-validator": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "contentCache": "false",
        "failOnNullBody": "true",
        "failOnNullHeader": "true",
        "headerName": "",
        "errorHandler": "",
        "schemaLoader": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "contentCache": "false",
        "failOnNullBody": "true",
        "failOnNullHeader": "true",
        "headerName": "",
        "errorHandler": "",
        "schemaLoader": "",
        "synchronous": "false"
      }
    }
  },
  "cql": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "beanRef": "",
        "hosts": "",
        "port": "",
        "keyspace": "",
        "clusterName": "",
        "consistencyLevel": "",
        "cql": "",
        "datacenter": "datacenter1",
        "loadBalancingPolicyClass": "",
        "password": "",
        "prepareStatements": "true",
        "resultSetConversionStrategy": "",
        "session": "",
        "username": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "beanRef": "",
        "hosts": "",
        "port": "",
        "keyspace": "",
        "clusterName": "",
        "consistencyLevel": "",
        "cql": "",
        "datacenter": "datacenter1",
        "loadBalancingPolicyClass": "",
        "password": "",
        "prepareStatements": "true",
        "resultSetConversionStrategy": "",
        "session": "",
        "username": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "aws2-cw": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonCwClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "timestamp": "",
        "trustAllCertificates": "false",
        "unit": "",
        "value": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "namespace": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonCwClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "timestamp": "",
        "trustAllCertificates": "false",
        "unit": "",
        "value": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "namespace": "",
        "synchronous": "false"
      }
    }
  },
  "vertx-websocket": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "router": "",
        "vertx": "",
        "vertxOptions": "",
        "useGlobalSslContextParameters": "false",
        "host": "0.0.0.0",
        "port": "0",
        "path": "/",
        "allowedOriginPattern": "",
        "serverOptions": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "clientOptions": "",
        "sendToAll": "false",
        "synchronous": "false",
        "sslContextParameters": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "router": "",
        "vertx": "",
        "vertxOptions": "",
        "useGlobalSslContextParameters": "false",
        "host": "0.0.0.0",
        "port": "0",
        "path": "/",
        "allowedOriginPattern": "",
        "serverOptions": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "clientOptions": "",
        "sendToAll": "false",
        "synchronous": "false",
        "sslContextParameters": ""
      }
    }
  },
  "etcd-watch": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "configuration": "",
        "recursive": "false",
        "servicePath": "/services/",
        "timeout": "",
        "uris": "http://localhost:2379,http://localhost:4001",
        "sendEmptyExchangeOnTimeout": "false",
        "fromIndex": "0",
        "basicPropertyBinding": "false",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "path": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "configuration": "",
        "recursive": "false",
        "servicePath": "/services/",
        "timeout": "",
        "uris": "http://localhost:2379,http://localhost:4001",
        "sendEmptyExchangeOnTimeout": "false",
        "fromIndex": "0",
        "basicPropertyBinding": "false",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "userName": "",
        "path": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "freemarker": {
    "Consumer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "templateUpdateDelay": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "allowContextMapAll": "false",
        "allowTemplateFromHeader": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "resourceUri": "",
        "contentCache": "false",
        "encoding": "",
        "templateUpdateDelay": "",
        "synchronous": "false"
      }
    }
  },
  "ironmq": {
    "Consumer": {
      "endpoint_parameters": {
        "queueName": "",
        "client": "",
        "ironMQCloud": "https://mq-aws-us-east-1-1.iron.io",
        "preserveHeaders": "false",
        "projectId": "",
        "token": "",
        "batchDelete": "false",
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "maxMessagesPerPoll": "1",
        "sendEmptyMessageWhenIdle": "false",
        "timeout": "60",
        "wait": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "lazyStartProducer": "false",
        "visibilityDelay": "",
        "basicPropertyBinding": "false",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "queueName": "",
        "client": "",
        "ironMQCloud": "https://mq-aws-us-east-1-1.iron.io",
        "preserveHeaders": "false",
        "projectId": "",
        "token": "",
        "batchDelete": "false",
        "bridgeErrorHandler": "false",
        "concurrentConsumers": "1",
        "maxMessagesPerPoll": "1",
        "sendEmptyMessageWhenIdle": "false",
        "timeout": "60",
        "wait": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "lazyStartProducer": "false",
        "visibilityDelay": "",
        "basicPropertyBinding": "false",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "rest": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "consumerComponentName": "",
        "apiDoc": "",
        "componentName": "",
        "host": "",
        "lazyStartProducer": "false",
        "producerComponentName": "",
        "basicPropertyBinding": "false",
        "path": "",
        "uriTemplate": "",
        "consumes": "",
        "inType": "",
        "outType": "",
        "produces": "",
        "routeId": "",
        "description": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "bindingMode": "",
        "queryParameters": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "consumerComponentName": "",
        "apiDoc": "",
        "componentName": "",
        "host": "",
        "lazyStartProducer": "false",
        "producerComponentName": "",
        "basicPropertyBinding": "false",
        "path": "",
        "uriTemplate": "",
        "consumes": "",
        "inType": "",
        "outType": "",
        "produces": "",
        "routeId": "",
        "description": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "bindingMode": "",
        "queryParameters": "",
        "synchronous": "false"
      }
    }
  },
  "pgevent": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "localhost",
        "port": "5432",
        "database": "",
        "channel": "",
        "datasource": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "pass": "",
        "user": "postgres"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "localhost",
        "port": "5432",
        "database": "",
        "channel": "",
        "datasource": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false",
        "pass": "",
        "user": "postgres"
      }
    }
  },
  "iota": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "depth": "9",
        "minWeightMagnitude": "14",
        "operation": "",
        "tag": "",
        "url": "",
        "synchronous": "false",
        "securityLevel": "1"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "depth": "9",
        "minWeightMagnitude": "14",
        "operation": "",
        "tag": "",
        "url": "",
        "synchronous": "false",
        "securityLevel": "1"
      }
    }
  },
  "kubernetes-hpa": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "atomix-messaging": {
    "Consumer": {
      "endpoint_parameters": {
        "atomix": "",
        "broadcastType": "ALL",
        "channelName": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "DIRECT",
        "memberName": "",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "atomix": "",
        "broadcastType": "ALL",
        "channelName": "",
        "configuration": "",
        "configurationUri": "",
        "defaultAction": "DIRECT",
        "memberName": "",
        "nodes": "",
        "resultHeader": "",
        "transportClassName": "io.atomix.catalyst.transport.netty.NettyTransport",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "defaultResourceConfig": "",
        "defaultResourceOptions": "",
        "ephemeral": "false",
        "readConsistency": "",
        "resourceConfigs": "",
        "resourceOptions": "",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "aws-cw": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonCwClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "timestamp": "",
        "unit": "",
        "value": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "namespace": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonCwClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "timestamp": "",
        "unit": "",
        "value": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "namespace": "",
        "synchronous": "false"
      }
    }
  },
  "kubernetes-job": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "hazelcast-ringbuffer": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "hazelcastInstance": "",
        "hazelcastMode": "node",
        "cacheName": "",
        "defaultOperation": "",
        "hazelcastInstanceName": "",
        "synchronous": "false"
      }
    }
  },
  "aws2-ec2": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "amazonEc2Client": "",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "amazonEc2Client": "",
        "configuration": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "trustAllCertificates": "false",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "aws-s3": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonS3Client": "",
        "autoCreateBucket": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "endpointConfiguration": "",
        "pathStyleAccess": "false",
        "policy": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "useIAMCredentials": "false",
        "encryptionMaterials": "",
        "useEncryption": "false",
        "bridgeErrorHandler": "false",
        "deleteAfterRead": "true",
        "delimiter": "",
        "fileName": "",
        "includeBody": "true",
        "prefix": "",
        "autocloseBody": "true",
        "deleteAfterWrite": "false",
        "keyName": "",
        "lazyStartProducer": "false",
        "multiPartUpload": "false",
        "operation": "",
        "partSize": "26214400",
        "serverSideEncryption": "",
        "storageClass": "",
        "awsKMSKeyId": "",
        "useAwsKMS": "false",
        "accelerateModeEnabled": "false",
        "chunkedEncodingDisabled": "false",
        "dualstackEnabled": "false",
        "forceGlobalBucketAccessEnabled": "false",
        "payloadSigningEnabled": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "bucketNameOrArn": "",
        "maxConnections": "60",
        "maxMessagesPerPoll": "10",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonS3Client": "",
        "autoCreateBucket": "true",
        "autoDiscoverClient": "true",
        "configuration": "",
        "endpointConfiguration": "",
        "pathStyleAccess": "false",
        "policy": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "useIAMCredentials": "false",
        "encryptionMaterials": "",
        "useEncryption": "false",
        "bridgeErrorHandler": "false",
        "deleteAfterRead": "true",
        "delimiter": "",
        "fileName": "",
        "includeBody": "true",
        "prefix": "",
        "autocloseBody": "true",
        "deleteAfterWrite": "false",
        "keyName": "",
        "lazyStartProducer": "false",
        "multiPartUpload": "false",
        "operation": "",
        "partSize": "26214400",
        "serverSideEncryption": "",
        "storageClass": "",
        "awsKMSKeyId": "",
        "useAwsKMS": "false",
        "accelerateModeEnabled": "false",
        "chunkedEncodingDisabled": "false",
        "dualstackEnabled": "false",
        "forceGlobalBucketAccessEnabled": "false",
        "payloadSigningEnabled": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "bucketNameOrArn": "",
        "maxConnections": "60",
        "maxMessagesPerPoll": "10",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "coap": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uri": "",
        "alias": "",
        "cipherSuites": "",
        "clientAuthentication": "",
        "privateKey": "",
        "pskStore": "",
        "publicKey": "",
        "recommendedCipherSuitesOnly": "true",
        "sslContextParameters": "",
        "trustedRpkStore": "",
        "coapMethodRestrict": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uri": "",
        "alias": "",
        "cipherSuites": "",
        "clientAuthentication": "",
        "privateKey": "",
        "pskStore": "",
        "publicKey": "",
        "recommendedCipherSuitesOnly": "true",
        "sslContextParameters": "",
        "trustedRpkStore": "",
        "coapMethodRestrict": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "avro": {
    "Consumer": {
      "endpoint_parameters": {
        "protocol": "",
        "protocolClassName": "",
        "protocolLocation": "",
        "reflectionProtocol": "false",
        "singleParameter": "false",
        "uriAuthority": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "transport": "",
        "port": "",
        "host": "",
        "messageName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "protocol": "",
        "protocolClassName": "",
        "protocolLocation": "",
        "reflectionProtocol": "false",
        "singleParameter": "false",
        "uriAuthority": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "configuration": "",
        "transport": "",
        "port": "",
        "host": "",
        "messageName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "aws-ses": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonSESClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "replyToAddresses": "",
        "returnPath": "",
        "subject": "",
        "to": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "from": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonSESClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "lazyStartProducer": "false",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "replyToAddresses": "",
        "returnPath": "",
        "subject": "",
        "to": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "from": "",
        "synchronous": "false"
      }
    }
  },
  "google-sheets-stream": {
    "Consumer": {
      "endpoint_parameters": {
        "applicationName": "",
        "bridgeErrorHandler": "false",
        "clientId": "",
        "configuration": "",
        "includeGridData": "false",
        "majorDimension": "ROWS",
        "maxResults": "",
        "range": "",
        "scopes": "",
        "splitResults": "false",
        "spreadsheetId": "",
        "valueRenderOption": "FORMATTED_VALUE",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "data": "The values collection of methods",
        "spreadsheets": "The spreadsheets collection of methods",
        "append": "The com.google.api.services.sheets.v4.model.ValueRange",
        "batchClear": "The ID of the spreadsheet to update",
        "batchClearByDataFilter": "The ID of the spreadsheet to update",
        "batchGet": "The ID of the spreadsheet to retrieve data from",
        "batchGetByDataFilter": "The ID of the spreadsheet to retrieve data from",
        "batchUpdate": "The spreadsheet to apply the updates to",
        "batchUpdateByDataFilter": "The ID of the spreadsheet to update",
        "clear": "The ID of the spreadsheet to update",
        "get": "The spreadsheet to request",
        "update": "The com.google.api.services.sheets.v4.model.ValueRange",
        "create": "The com.google.api.services.sheets.v4.model.Spreadsheet",
        "getByDataFilter": "The spreadsheet to request"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "applicationName": "",
        "bridgeErrorHandler": "false",
        "clientId": "",
        "configuration": "",
        "includeGridData": "false",
        "majorDimension": "ROWS",
        "maxResults": "",
        "range": "",
        "scopes": "",
        "splitResults": "false",
        "spreadsheetId": "",
        "valueRenderOption": "FORMATTED_VALUE",
        "basicPropertyBinding": "false",
        "clientFactory": "",
        "accessToken": "",
        "clientSecret": "",
        "refreshToken": "",
        "apiName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "data": "The values collection of methods",
        "spreadsheets": "The spreadsheets collection of methods",
        "append": "The com.google.api.services.sheets.v4.model.ValueRange",
        "batchClear": "The ID of the spreadsheet to update",
        "batchClearByDataFilter": "The ID of the spreadsheet to update",
        "batchGet": "The ID of the spreadsheet to retrieve data from",
        "batchGetByDataFilter": "The ID of the spreadsheet to retrieve data from",
        "batchUpdate": "The spreadsheet to apply the updates to",
        "batchUpdateByDataFilter": "The ID of the spreadsheet to update",
        "clear": "The ID of the spreadsheet to update",
        "get": "The spreadsheet to request",
        "update": "The com.google.api.services.sheets.v4.model.ValueRange",
        "create": "The com.google.api.services.sheets.v4.model.Spreadsheet",
        "getByDataFilter": "The spreadsheet to request"
      }
    }
  },
  "spring-event": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "nsq": {
    "Consumer": {
      "endpoint_parameters": {
        "servers": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "topic": "",
        "userAgent": "",
        "autoFinish": "true",
        "channel": "",
        "customNSQLookup": "",
        "lookupInterval": "5000",
        "lookupServerPort": "4161",
        "messageTimeout": "-1",
        "poolSize": "10",
        "requeueInterval": "-1",
        "exceptionHandler": "",
        "exchangePattern": "",
        "port": "4150",
        "synchronous": "false",
        "secure": "false",
        "sslContextParameters": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "servers": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "useGlobalSslContextParameters": "false",
        "topic": "",
        "userAgent": "",
        "autoFinish": "true",
        "channel": "",
        "customNSQLookup": "",
        "lookupInterval": "5000",
        "lookupServerPort": "4161",
        "messageTimeout": "-1",
        "poolSize": "10",
        "requeueInterval": "-1",
        "exceptionHandler": "",
        "exchangePattern": "",
        "port": "4150",
        "synchronous": "false",
        "secure": "false",
        "sslContextParameters": ""
      }
    }
  },
  "mina": {
    "Consumer": {
      "endpoint_parameters": {
        "disconnect": "false",
        "minaLogger": "false",
        "sync": "true",
        "timeout": "30000",
        "writeTimeout": "10000",
        "bridgeErrorHandler": "false",
        "clientMode": "false",
        "disconnectOnNoReply": "true",
        "noReplyLogLevel": "WARN",
        "lazyStartProducer": "false",
        "cachedAddress": "true",
        "lazySessionCreation": "true",
        "basicPropertyBinding": "false",
        "configuration": "",
        "maximumPoolSize": "16",
        "orderedThreadPoolExecutor": "true",
        "transferExchange": "false",
        "allowDefaultCodec": "true",
        "codec": "",
        "decoderMaxLineLength": "1024",
        "encoderMaxLineLength": "-1",
        "encoding": "",
        "filters": "",
        "textline": "false",
        "textlineDelimiter": "",
        "autoStartTls": "true",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "protocol": "",
        "host": "",
        "port": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "disconnect": "false",
        "minaLogger": "false",
        "sync": "true",
        "timeout": "30000",
        "writeTimeout": "10000",
        "bridgeErrorHandler": "false",
        "clientMode": "false",
        "disconnectOnNoReply": "true",
        "noReplyLogLevel": "WARN",
        "lazyStartProducer": "false",
        "cachedAddress": "true",
        "lazySessionCreation": "true",
        "basicPropertyBinding": "false",
        "configuration": "",
        "maximumPoolSize": "16",
        "orderedThreadPoolExecutor": "true",
        "transferExchange": "false",
        "allowDefaultCodec": "true",
        "codec": "",
        "decoderMaxLineLength": "1024",
        "encoderMaxLineLength": "-1",
        "encoding": "",
        "filters": "",
        "textline": "false",
        "textlineDelimiter": "",
        "autoStartTls": "true",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "protocol": "",
        "host": "",
        "port": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "kubernetes-namespaces": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "masterUrl": "",
        "apiVersion": "",
        "dnsDomain": "",
        "kubernetesClient": "",
        "portName": "",
        "portProtocol": "tcp",
        "labelKey": "",
        "labelValue": "",
        "namespace": "",
        "poolSize": "1",
        "resourceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "operation": "",
        "connectionTimeout": "",
        "synchronous": "false",
        "caCertData": "",
        "caCertFile": "",
        "clientCertData": "",
        "clientCertFile": "",
        "clientKeyAlgo": "",
        "clientKeyData": "",
        "clientKeyFile": "",
        "clientKeyPassphrase": "",
        "oauthToken": "",
        "password": "",
        "trustCerts": "",
        "username": ""
      }
    }
  },
  "mail": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "closeFolder": "true",
        "copyTo": "",
        "delete": "false",
        "disconnect": "false",
        "handleFailedMessage": "false",
        "mimeDecodeHeaders": "false",
        "moveTo": "",
        "peek": "true",
        "skipFailedMessage": "false",
        "unseen": "true",
        "fetchSize": "-1",
        "folderName": "INBOX",
        "mapMailMessage": "true",
        "bcc": "",
        "cc": "",
        "from": "camel@localhost",
        "lazyStartProducer": "false",
        "replyTo": "",
        "subject": "",
        "to": "",
        "javaMailSender": "",
        "additionalJavaMailProperties": "",
        "alternativeBodyHeader": "CamelMailAlternativeBody",
        "attachmentsContentTransfer{zwsp}EncodingResolver": "",
        "authenticator": "",
        "basicPropertyBinding": "false",
        "configuration": "",
        "connectionTimeout": "30000",
        "contentType": "text/plain",
        "contentTypeResolver": "",
        "debugMode": "false",
        "ignoreUnsupportedCharset": "false",
        "ignoreUriScheme": "false",
        "javaMailProperties": "",
        "session": "",
        "useInlineAttachments": "false",
        "headerFilterStrategy": "",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "username": "",
        "host": "",
        "port": "",
        "maxMessagesPerPoll": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "mailUidGenerator": "",
        "pollStrategy": "",
        "postProcessAction": "",
        "binding": "",
        "synchronous": "false",
        "idempotentRepository": "",
        "idempotentRepositoryRemoveOn{zwsp}Commit": "true",
        "searchTerm": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "60000",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "sortTerm": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "closeFolder": "true",
        "copyTo": "",
        "delete": "false",
        "disconnect": "false",
        "handleFailedMessage": "false",
        "mimeDecodeHeaders": "false",
        "moveTo": "",
        "peek": "true",
        "skipFailedMessage": "false",
        "unseen": "true",
        "fetchSize": "-1",
        "folderName": "INBOX",
        "mapMailMessage": "true",
        "bcc": "",
        "cc": "",
        "from": "camel@localhost",
        "lazyStartProducer": "false",
        "replyTo": "",
        "subject": "",
        "to": "",
        "javaMailSender": "",
        "additionalJavaMailProperties": "",
        "alternativeBodyHeader": "CamelMailAlternativeBody",
        "attachmentsContentTransfer{zwsp}EncodingResolver": "",
        "authenticator": "",
        "basicPropertyBinding": "false",
        "configuration": "",
        "connectionTimeout": "30000",
        "contentType": "text/plain",
        "contentTypeResolver": "",
        "debugMode": "false",
        "ignoreUnsupportedCharset": "false",
        "ignoreUriScheme": "false",
        "javaMailProperties": "",
        "session": "",
        "useInlineAttachments": "false",
        "headerFilterStrategy": "",
        "password": "",
        "sslContextParameters": "",
        "useGlobalSslContextParameters": "false",
        "username": "",
        "host": "",
        "port": "",
        "maxMessagesPerPoll": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "mailUidGenerator": "",
        "pollStrategy": "",
        "postProcessAction": "",
        "binding": "",
        "synchronous": "false",
        "idempotentRepository": "",
        "idempotentRepositoryRemoveOn{zwsp}Commit": "true",
        "searchTerm": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "60000",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "sortTerm": ""
      }
    }
  },
  "mongodb": {
    "Consumer": {
      "endpoint_parameters": {
        "mongoConnection": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionBean": "",
        "collection": "",
        "collectionIndex": "",
        "createCollection": "true",
        "database": "",
        "operation": "",
        "outputType": "",
        "consumerType": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "cursorRegenerationDelay": "1000",
        "dynamicity": "false",
        "readPreference": "PRIMARY",
        "synchronous": "false",
        "writeConcern": "ACKNOWLEDGED",
        "writeResultAsHeader": "false",
        "streamFilter": "",
        "persistentId": "",
        "persistentTailTracking": "false",
        "tailTrackCollection": "",
        "tailTrackDb": "",
        "tailTrackField": "",
        "tailTrackIncreasingField": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "mongoConnection": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "connectionBean": "",
        "collection": "",
        "collectionIndex": "",
        "createCollection": "true",
        "database": "",
        "operation": "",
        "outputType": "",
        "consumerType": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "cursorRegenerationDelay": "1000",
        "dynamicity": "false",
        "readPreference": "PRIMARY",
        "synchronous": "false",
        "writeConcern": "ACKNOWLEDGED",
        "writeResultAsHeader": "false",
        "streamFilter": "",
        "persistentId": "",
        "persistentTailTracking": "false",
        "tailTrackCollection": "",
        "tailTrackDb": "",
        "tailTrackField": "",
        "tailTrackIncreasingField": ""
      }
    }
  },
  "language": {
    "Consumer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "languageName": "",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "binary": "false",
        "cacheScript": "false",
        "contentCache": "true",
        "script": "",
        "transform": "true",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "languageName": "",
        "resourceUri": "",
        "allowContextMapAll": "false",
        "binary": "false",
        "cacheScript": "false",
        "contentCache": "true",
        "script": "",
        "transform": "true",
        "synchronous": "false"
      }
    }
  },
  "twitter-directmessage": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "accessToken": "",
        "accessTokenSecret": "",
        "consumerKey": "",
        "consumerSecret": "",
        "user": "",
        "sendEmptyMessageWhenIdle": "false",
        "type": "polling",
        "distanceMetric": "km",
        "exceptionHandler": "",
        "exchangePattern": "",
        "extendedMode": "true",
        "latitude": "",
        "locations": "",
        "longitude": "",
        "pollStrategy": "",
        "radius": "",
        "synchronous": "false",
        "count": "5",
        "filterOld": "true",
        "lang": "",
        "numberOfPages": "1",
        "sinceId": "1",
        "userIds": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "30000",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "sortById": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "httpProxyHost": "",
        "httpProxyPassword": "",
        "httpProxyPort": "",
        "httpProxyUser": "",
        "accessToken": "",
        "accessTokenSecret": "",
        "consumerKey": "",
        "consumerSecret": "",
        "user": "",
        "sendEmptyMessageWhenIdle": "false",
        "type": "polling",
        "distanceMetric": "km",
        "exceptionHandler": "",
        "exchangePattern": "",
        "extendedMode": "true",
        "latitude": "",
        "locations": "",
        "longitude": "",
        "pollStrategy": "",
        "radius": "",
        "synchronous": "false",
        "count": "5",
        "filterOld": "true",
        "lang": "",
        "numberOfPages": "1",
        "sinceId": "1",
        "userIds": "",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "30000",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "sortById": "true"
      }
    }
  },
  "netty": {
    "Consumer": {
      "endpoint_parameters": {
        "configuration": "",
        "disconnect": "false",
        "keepAlive": "true",
        "reuseAddress": "true",
        "reuseChannel": "false",
        "sync": "true",
        "tcpNoDelay": "true",
        "bridgeErrorHandler": "false",
        "broadcast": "false",
        "clientMode": "false",
        "reconnect": "true",
        "reconnectInterval": "10000",
        "backlog": "",
        "bossCount": "1",
        "bossGroup": "",
        "disconnectOnNoReply": "true",
        "executorService": "",
        "maximumPoolSize": "",
        "nettyServerBootstrapFactory": "",
        "networkInterface": "",
        "noReplyLogLevel": "WARN",
        "serverClosedChannelException{zwsp}CaughtLogLevel": "DEBUG",
        "serverExceptionCaughtLogLevel": "WARN",
        "serverInitializerFactory": "",
        "usingExecutorService": "true",
        "connectTimeout": "10000",
        "lazyStartProducer": "false",
        "requestTimeout": "",
        "clientInitializerFactory": "",
        "correlationManager": "",
        "lazyChannelCreation": "true",
        "producerPoolEnabled": "true",
        "producerPoolMaxActive": "-1",
        "producerPoolMaxIdle": "100",
        "producerPoolMinEvictableIdle": "300000",
        "producerPoolMinIdle": "",
        "udpConnectionlessSending": "false",
        "useByteBuf": "false",
        "allowSerializedHeaders": "false",
        "basicPropertyBinding": "false",
        "channelGroup": "",
        "nativeTransport": "false",
        "options": "",
        "receiveBufferSize": "65536",
        "receiveBufferSizePredictor": "",
        "sendBufferSize": "65536",
        "transferExchange": "false",
        "udpByteArrayCodec": "false",
        "workerCount": "",
        "workerGroup": "",
        "allowDefaultCodec": "true",
        "autoAppendDelimiter": "true",
        "decoderMaxLineLength": "1024",
        "decoders": "",
        "delimiter": "LINE",
        "encoders": "",
        "encoding": "",
        "textline": "false",
        "enabledProtocols": "TLSv1,TLSv1.1,TLSv1.2",
        "keyStoreFile": "",
        "keyStoreFormat": "",
        "keyStoreResource": "",
        "needClientAuth": "false",
        "passphrase": "",
        "securityProvider": "",
        "ssl": "false",
        "sslClientCertHeaders": "false",
        "sslContextParameters": "",
        "sslHandler": "",
        "trustStoreFile": "",
        "trustStoreResource": "",
        "useGlobalSslContextParameters": "false",
        "protocol": "",
        "host": "",
        "port": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configuration": "",
        "disconnect": "false",
        "keepAlive": "true",
        "reuseAddress": "true",
        "reuseChannel": "false",
        "sync": "true",
        "tcpNoDelay": "true",
        "bridgeErrorHandler": "false",
        "broadcast": "false",
        "clientMode": "false",
        "reconnect": "true",
        "reconnectInterval": "10000",
        "backlog": "",
        "bossCount": "1",
        "bossGroup": "",
        "disconnectOnNoReply": "true",
        "executorService": "",
        "maximumPoolSize": "",
        "nettyServerBootstrapFactory": "",
        "networkInterface": "",
        "noReplyLogLevel": "WARN",
        "serverClosedChannelException{zwsp}CaughtLogLevel": "DEBUG",
        "serverExceptionCaughtLogLevel": "WARN",
        "serverInitializerFactory": "",
        "usingExecutorService": "true",
        "connectTimeout": "10000",
        "lazyStartProducer": "false",
        "requestTimeout": "",
        "clientInitializerFactory": "",
        "correlationManager": "",
        "lazyChannelCreation": "true",
        "producerPoolEnabled": "true",
        "producerPoolMaxActive": "-1",
        "producerPoolMaxIdle": "100",
        "producerPoolMinEvictableIdle": "300000",
        "producerPoolMinIdle": "",
        "udpConnectionlessSending": "false",
        "useByteBuf": "false",
        "allowSerializedHeaders": "false",
        "basicPropertyBinding": "false",
        "channelGroup": "",
        "nativeTransport": "false",
        "options": "",
        "receiveBufferSize": "65536",
        "receiveBufferSizePredictor": "",
        "sendBufferSize": "65536",
        "transferExchange": "false",
        "udpByteArrayCodec": "false",
        "workerCount": "",
        "workerGroup": "",
        "allowDefaultCodec": "true",
        "autoAppendDelimiter": "true",
        "decoderMaxLineLength": "1024",
        "decoders": "",
        "delimiter": "LINE",
        "encoders": "",
        "encoding": "",
        "textline": "false",
        "enabledProtocols": "TLSv1,TLSv1.1,TLSv1.2",
        "keyStoreFile": "",
        "keyStoreFormat": "",
        "keyStoreResource": "",
        "needClientAuth": "false",
        "passphrase": "",
        "securityProvider": "",
        "ssl": "false",
        "sslClientCertHeaders": "false",
        "sslContextParameters": "",
        "sslHandler": "",
        "trustStoreFile": "",
        "trustStoreResource": "",
        "useGlobalSslContextParameters": "false",
        "protocol": "",
        "host": "",
        "port": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "ftp": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "directoryName": "",
        "binary": "false",
        "charset": "",
        "disconnect": "false",
        "doneFileName": "",
        "fileName": "",
        "passiveMode": "false",
        "separator": "UNIX",
        "transferLoggingIntervalSeconds": "5",
        "transferLoggingLevel": "DEBUG",
        "transferLoggingVerbose": "false",
        "fastExistsCheck": "false",
        "delete": "false",
        "moveFailed": "",
        "noop": "false",
        "preMove": "",
        "preSort": "false",
        "recursive": "false",
        "resumeDownload": "false",
        "sendEmptyMessageWhenIdle": "false",
        "streamDownload": "false",
        "download": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "handleDirectoryParserAbsolute{zwsp}Result": "false",
        "ignoreFileNotFoundOrPermission{zwsp}Error": "false",
        "inProgressRepository": "",
        "localWorkDirectory": "",
        "onCompletionExceptionHandler": "",
        "pollStrategy": "",
        "processStrategy": "",
        "useList": "true",
        "fileExist": "Override",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "moveExisting": "",
        "tempFileName": "",
        "tempPrefix": "",
        "allowNullBody": "false",
        "chmod": "",
        "disconnectOnBatchComplete": "false",
        "eagerDeleteTargetFile": "true",
        "keepLastModified": "false",
        "moveExistingFileStrategy": "",
        "sendNoop": "true",
        "activePortRange": "",
        "autoCreate": "true",
        "bufferSize": "131072",
        "connectTimeout": "10000",
        "ftpClient": "",
        "ftpClientConfig": "",
        "ftpClientConfigParameters": "",
        "ftpClientParameters": "",
        "maximumReconnectAttempts": "",
        "reconnectDelay": "",
        "siteCommand": "",
        "soTimeout": "5m",
        "stepwise": "true",
        "synchronous": "false",
        "throwExceptionOnConnectFailed": "false",
        "timeout": "30s",
        "antExclude": "",
        "antFilterCaseSensitive": "true",
        "antInclude": "",
        "eagerMaxMessagesPerPoll": "true",
        "exclude": "",
        "filter": "",
        "filterDirectory": "",
        "filterFile": "",
        "idempotent": "false",
        "idempotentKey": "",
        "idempotentRepository": "",
        "include": "",
        "maxDepth": "2147483647",
        "maxMessagesPerPoll": "",
        "minDepth": "",
        "move": "",
        "exclusiveReadLockStrategy": "",
        "readLock": "none",
        "readLockCheckInterval": "1000",
        "readLockDeleteOrphanLockFiles": "true",
        "readLockLoggingLevel": "DEBUG",
        "readLockMarkerFile": "true",
        "readLockMinAge": "0",
        "readLockMinLength": "1",
        "readLockRemoveOnCommit": "false",
        "readLockRemoveOnRollback": "true",
        "readLockTimeout": "10000",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "account": "",
        "password": "",
        "username": "",
        "shuffle": "false",
        "sortBy": "",
        "sorter": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "port": "",
        "directoryName": "",
        "binary": "false",
        "charset": "",
        "disconnect": "false",
        "doneFileName": "",
        "fileName": "",
        "passiveMode": "false",
        "separator": "UNIX",
        "transferLoggingIntervalSeconds": "5",
        "transferLoggingLevel": "DEBUG",
        "transferLoggingVerbose": "false",
        "fastExistsCheck": "false",
        "delete": "false",
        "moveFailed": "",
        "noop": "false",
        "preMove": "",
        "preSort": "false",
        "recursive": "false",
        "resumeDownload": "false",
        "sendEmptyMessageWhenIdle": "false",
        "streamDownload": "false",
        "download": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "handleDirectoryParserAbsolute{zwsp}Result": "false",
        "ignoreFileNotFoundOrPermission{zwsp}Error": "false",
        "inProgressRepository": "",
        "localWorkDirectory": "",
        "onCompletionExceptionHandler": "",
        "pollStrategy": "",
        "processStrategy": "",
        "useList": "true",
        "fileExist": "Override",
        "flatten": "false",
        "jailStartingDirectory": "true",
        "moveExisting": "",
        "tempFileName": "",
        "tempPrefix": "",
        "allowNullBody": "false",
        "chmod": "",
        "disconnectOnBatchComplete": "false",
        "eagerDeleteTargetFile": "true",
        "keepLastModified": "false",
        "moveExistingFileStrategy": "",
        "sendNoop": "true",
        "activePortRange": "",
        "autoCreate": "true",
        "bufferSize": "131072",
        "connectTimeout": "10000",
        "ftpClient": "",
        "ftpClientConfig": "",
        "ftpClientConfigParameters": "",
        "ftpClientParameters": "",
        "maximumReconnectAttempts": "",
        "reconnectDelay": "",
        "siteCommand": "",
        "soTimeout": "5m",
        "stepwise": "true",
        "synchronous": "false",
        "throwExceptionOnConnectFailed": "false",
        "timeout": "30s",
        "antExclude": "",
        "antFilterCaseSensitive": "true",
        "antInclude": "",
        "eagerMaxMessagesPerPoll": "true",
        "exclude": "",
        "filter": "",
        "filterDirectory": "",
        "filterFile": "",
        "idempotent": "false",
        "idempotentKey": "",
        "idempotentRepository": "",
        "include": "",
        "maxDepth": "2147483647",
        "maxMessagesPerPoll": "",
        "minDepth": "",
        "move": "",
        "exclusiveReadLockStrategy": "",
        "readLock": "none",
        "readLockCheckInterval": "1000",
        "readLockDeleteOrphanLockFiles": "true",
        "readLockLoggingLevel": "DEBUG",
        "readLockMarkerFile": "true",
        "readLockMinAge": "0",
        "readLockMinLength": "1",
        "readLockRemoveOnCommit": "false",
        "readLockRemoveOnRollback": "true",
        "readLockTimeout": "10000",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true",
        "account": "",
        "password": "",
        "username": "",
        "shuffle": "false",
        "sortBy": "",
        "sorter": ""
      }
    }
  },
  "ipfs": {
    "Consumer": {
      "endpoint_parameters": {
        "ipfsHost": "127.0.0.1",
        "ipfsPort": "5001",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "ipfsCmd": "",
        "outdir": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "ipfsHost": "127.0.0.1",
        "ipfsPort": "5001",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "ipfsCmd": "",
        "outdir": "",
        "synchronous": "false"
      }
    }
  },
  "sip": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uri": "",
        "cacheConnections": "false",
        "contentSubType": "plain",
        "contentType": "text",
        "eventHeaderName": "",
        "eventId": "",
        "fromHost": "",
        "fromPort": "",
        "fromUser": "",
        "msgExpiration": "3600",
        "receiveTimeoutMillis": "10000",
        "stackName": "NAME_NOT_SET",
        "toHost": "",
        "toPort": "",
        "toUser": "",
        "transport": "tcp",
        "consumer": "false",
        "presenceAgent": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "addressFactory": "",
        "callIdHeader": "",
        "contactHeader": "",
        "contentTypeHeader": "",
        "eventHeader": "",
        "expiresHeader": "",
        "extensionHeader": "",
        "fromHeader": "",
        "headerFactory": "",
        "listeningPoint": "",
        "maxForwardsHeader": "",
        "maxMessageSize": "1048576",
        "messageFactory": "",
        "sipFactory": "",
        "sipStack": "",
        "sipUri": "",
        "synchronous": "false",
        "toHeader": "",
        "viaHeaders": "",
        "implementationDebugLogFile": "",
        "implementationServerLogFile": "",
        "implementationTraceLevel": "0",
        "maxForwards": "",
        "useRouterForAllUris": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "uri": "",
        "cacheConnections": "false",
        "contentSubType": "plain",
        "contentType": "text",
        "eventHeaderName": "",
        "eventId": "",
        "fromHost": "",
        "fromPort": "",
        "fromUser": "",
        "msgExpiration": "3600",
        "receiveTimeoutMillis": "10000",
        "stackName": "NAME_NOT_SET",
        "toHost": "",
        "toPort": "",
        "toUser": "",
        "transport": "tcp",
        "consumer": "false",
        "presenceAgent": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "addressFactory": "",
        "callIdHeader": "",
        "contactHeader": "",
        "contentTypeHeader": "",
        "eventHeader": "",
        "expiresHeader": "",
        "extensionHeader": "",
        "fromHeader": "",
        "headerFactory": "",
        "listeningPoint": "",
        "maxForwardsHeader": "",
        "maxMessageSize": "1048576",
        "messageFactory": "",
        "sipFactory": "",
        "sipStack": "",
        "sipUri": "",
        "synchronous": "false",
        "toHeader": "",
        "viaHeaders": "",
        "implementationDebugLogFile": "",
        "implementationServerLogFile": "",
        "implementationTraceLevel": "0",
        "maxForwards": "",
        "useRouterForAllUris": "false"
      }
    }
  },
  "aws-kinesis": {
    "Consumer": {
      "endpoint_parameters": {
        "amazonKinesisClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "bridgeErrorHandler": "false",
        "iteratorType": "TRIM_HORIZON",
        "maxResultsPerRequest": "1",
        "sequenceNumber": "",
        "shardClosed": "ignore",
        "shardId": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "streamName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "amazonKinesisClient": "",
        "autoDiscoverClient": "true",
        "configuration": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "bridgeErrorHandler": "false",
        "iteratorType": "TRIM_HORIZON",
        "maxResultsPerRequest": "1",
        "sequenceNumber": "",
        "shardClosed": "ignore",
        "shardId": "",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "streamName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "minio": {
    "Consumer": {
      "endpoint_parameters": {
        "autoCreateBucket": "true",
        "configuration": "",
        "customHttpClient": "",
        "endpoint": "",
        "minioClient": "",
        "objectLock": "false",
        "policy": "",
        "proxyPort": "",
        "region": "",
        "secure": "false",
        "serverSideEncryption": "",
        "serverSideEncryptionCustomer{zwsp}Key": "",
        "autoCloseBody": "true",
        "bridgeErrorHandler": "false",
        "bypassGovernanceMode": "false",
        "deleteAfterRead": "true",
        "delimiter": "",
        "destinationBucketName": "",
        "destinationObjectName": "",
        "includeBody": "true",
        "includeFolders": "false",
        "includeUserMetadata": "false",
        "includeVersions": "false",
        "length": "",
        "matchETag": "",
        "maxConnections": "60",
        "maxMessagesPerPoll": "10",
        "modifiedSince": "",
        "moveAfterRead": "false",
        "notMatchETag": "",
        "objectName": "",
        "offset": "",
        "prefix": "",
        "recursive": "false",
        "startAfter": "",
        "unModifiedSince": "",
        "useVersion1": "false",
        "versionId": "",
        "deleteAfterWrite": "false",
        "keyName": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "storageClass": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "bucketName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoCreateBucket": "true",
        "configuration": "",
        "customHttpClient": "",
        "endpoint": "",
        "minioClient": "",
        "objectLock": "false",
        "policy": "",
        "proxyPort": "",
        "region": "",
        "secure": "false",
        "serverSideEncryption": "",
        "serverSideEncryptionCustomer{zwsp}Key": "",
        "autoCloseBody": "true",
        "bridgeErrorHandler": "false",
        "bypassGovernanceMode": "false",
        "deleteAfterRead": "true",
        "delimiter": "",
        "destinationBucketName": "",
        "destinationObjectName": "",
        "includeBody": "true",
        "includeFolders": "false",
        "includeUserMetadata": "false",
        "includeVersions": "false",
        "length": "",
        "matchETag": "",
        "maxConnections": "60",
        "maxMessagesPerPoll": "10",
        "modifiedSince": "",
        "moveAfterRead": "false",
        "notMatchETag": "",
        "objectName": "",
        "offset": "",
        "prefix": "",
        "recursive": "false",
        "startAfter": "",
        "unModifiedSince": "",
        "useVersion1": "false",
        "versionId": "",
        "deleteAfterWrite": "false",
        "keyName": "",
        "lazyStartProducer": "false",
        "operation": "",
        "pojoRequest": "false",
        "storageClass": "",
        "basicPropertyBinding": "false",
        "accessKey": "",
        "secretKey": "",
        "bucketName": "",
        "sendEmptyMessageWhenIdle": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "pollStrategy": "",
        "synchronous": "false",
        "backoffErrorThreshold": "",
        "backoffIdleThreshold": "",
        "backoffMultiplier": "",
        "delay": "500",
        "greedy": "false",
        "initialDelay": "1000",
        "repeatCount": "0",
        "runLoggingLevel": "TRACE",
        "scheduledExecutorService": "",
        "scheduler": "none",
        "schedulerProperties": "",
        "startScheduler": "true",
        "timeUnit": "MILLISECONDS",
        "useFixedDelay": "true"
      }
    }
  },
  "aws-ecs": {
    "Consumer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "ecsClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "autoDiscoverClient": "true",
        "accessKey": "",
        "configuration": "",
        "ecsClient": "",
        "lazyStartProducer": "false",
        "operation": "",
        "proxyHost": "",
        "proxyPort": "",
        "proxyProtocol": "HTTPS",
        "region": "",
        "secretKey": "",
        "basicPropertyBinding": "false",
        "label": "",
        "synchronous": "false"
      }
    }
  },
  "azure-blob": {
    "Consumer": {
      "endpoint_parameters": {
        "azureBlobClient": "",
        "blobOffset": "0",
        "blobType": "blockblob",
        "closeStreamAfterRead": "true",
        "credentials": "",
        "dataLength": "",
        "fileDir": "",
        "publicForRead": "false",
        "streamReadSize": "",
        "validateClientURI": "true",
        "bridgeErrorHandler": "false",
        "blobMetadata": "",
        "blobPrefix": "",
        "closeStreamAfterWrite": "true",
        "lazyStartProducer": "false",
        "operation": "listBlobs",
        "streamWriteSize": "",
        "useFlatListing": "true",
        "basicPropertyBinding": "false",
        "configuration": "",
        "credentialsAccountKey": "",
        "credentialsAccountName": "",
        "containerOrBlobUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "azureBlobClient": "",
        "blobOffset": "0",
        "blobType": "blockblob",
        "closeStreamAfterRead": "true",
        "credentials": "",
        "dataLength": "",
        "fileDir": "",
        "publicForRead": "false",
        "streamReadSize": "",
        "validateClientURI": "true",
        "bridgeErrorHandler": "false",
        "blobMetadata": "",
        "blobPrefix": "",
        "closeStreamAfterWrite": "true",
        "lazyStartProducer": "false",
        "operation": "listBlobs",
        "streamWriteSize": "",
        "useFlatListing": "true",
        "basicPropertyBinding": "false",
        "configuration": "",
        "credentialsAccountKey": "",
        "credentialsAccountName": "",
        "containerOrBlobUri": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  },
  "disruptor": {
    "Consumer": {
      "endpoint_parameters": {
        "bufferSize": "1024",
        "bridgeErrorHandler": "false",
        "defaultConcurrentConsumers": "1",
        "defaultMultipleConsumers": "false",
        "defaultWaitStrategy": "Blocking",
        "defaultBlockWhenFull": "true",
        "defaultProducerType": "Multi",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "size": "1024",
        "concurrentConsumers": "1",
        "multipleConsumers": "false",
        "waitStrategy": "Blocking",
        "exceptionHandler": "",
        "exchangePattern": "",
        "blockWhenFull": "false",
        "producerType": "Multi",
        "timeout": "30000",
        "waitForTaskToComplete": "IfReplyExpected",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bufferSize": "1024",
        "bridgeErrorHandler": "false",
        "defaultConcurrentConsumers": "1",
        "defaultMultipleConsumers": "false",
        "defaultWaitStrategy": "Blocking",
        "defaultBlockWhenFull": "true",
        "defaultProducerType": "Multi",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "size": "1024",
        "concurrentConsumers": "1",
        "multipleConsumers": "false",
        "waitStrategy": "Blocking",
        "exceptionHandler": "",
        "exchangePattern": "",
        "blockWhenFull": "false",
        "producerType": "Multi",
        "timeout": "30000",
        "waitForTaskToComplete": "IfReplyExpected",
        "synchronous": "false"
      }
    }
  },
  "timer": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "timerName": "",
        "delay": "1s",
        "fixedRate": "false",
        "includeMetadata": "true",
        "period": "1s",
        "repeatCount": "0",
        "exceptionHandler": "",
        "exchangePattern": "",
        "daemon": "true",
        "pattern": "",
        "synchronous": "false",
        "time": "",
        "timer": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "basicPropertyBinding": "false",
        "timerName": "",
        "delay": "1s",
        "fixedRate": "false",
        "includeMetadata": "true",
        "period": "1s",
        "repeatCount": "0",
        "exceptionHandler": "",
        "exchangePattern": "",
        "daemon": "true",
        "pattern": "",
        "synchronous": "false",
        "time": "",
        "timer": ""
      }
    }
  },
  "ignite-messaging": {
    "Consumer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "topic": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "clusterGroupExpression": "",
        "sendMode": "UNORDERED",
        "timeout": "",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteMessagingTopic": "String",
        "CamelIgniteMessagingUUID": "UUID"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "configurationResource": "",
        "ignite": "",
        "igniteConfiguration": "",
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "topic": "",
        "propagateIncomingBodyIfNo{zwsp}ReturnValue": "true",
        "treatCollectionsAsCacheObjects": "false",
        "exceptionHandler": "",
        "exchangePattern": "",
        "clusterGroupExpression": "",
        "sendMode": "UNORDERED",
        "timeout": "",
        "synchronous": "false",
        "Header name": "Expected type",
        "CamelIgniteMessagingTopic": "String",
        "CamelIgniteMessagingUUID": "UUID"
      }
    }
  },
  "azure-eventhubs": {
    "Consumer": {
      "endpoint_parameters": {
        "namespace": "",
        "eventHubName": "",
        "amqpRetryOptions": "",
        "amqpTransportType": "AMQP",
        "autoDiscoverClient": "true",
        "blobAccessKey": "",
        "blobAccountName": "",
        "blobContainerName": "",
        "blobStorageSharedKeyCredential": "",
        "bridgeErrorHandler": "false",
        "checkpointStore": "BlobCheckpointStore",
        "consumerGroupName": "$Default",
        "eventPosition": "",
        "prefetchCount": "500",
        "exceptionHandler": "",
        "exchangePattern": "",
        "lazyStartProducer": "false",
        "partitionId": "",
        "partitionKey": "",
        "producerAsyncClient": "",
        "basicPropertyBinding": "false",
        "synchronous": "false",
        "connectionString": "",
        "sharedAccessKey": "",
        "sharedAccessName": "",
        "configuration": ""
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "namespace": "",
        "eventHubName": "",
        "amqpRetryOptions": "",
        "amqpTransportType": "AMQP",
        "autoDiscoverClient": "true",
        "blobAccessKey": "",
        "blobAccountName": "",
        "blobContainerName": "",
        "blobStorageSharedKeyCredential": "",
        "bridgeErrorHandler": "false",
        "checkpointStore": "BlobCheckpointStore",
        "consumerGroupName": "$Default",
        "eventPosition": "",
        "prefetchCount": "500",
        "exceptionHandler": "",
        "exchangePattern": "",
        "lazyStartProducer": "false",
        "partitionId": "",
        "partitionKey": "",
        "producerAsyncClient": "",
        "basicPropertyBinding": "false",
        "synchronous": "false",
        "connectionString": "",
        "sharedAccessKey": "",
        "sharedAccessName": "",
        "configuration": ""
      }
    }
  },
  "jcr": {
    "Consumer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "base": "",
        "deep": "false",
        "eventTypes": "",
        "nodeTypeNames": "",
        "noLocal": "false",
        "password": "",
        "sessionLiveCheckInterval": "60000",
        "sessionLiveCheckIntervalOn{zwsp}Start": "3000",
        "username": "",
        "uuids": "",
        "workspaceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    },
    "Producer": {
      "endpoint_parameters": {
        "bridgeErrorHandler": "false",
        "lazyStartProducer": "false",
        "basicPropertyBinding": "false",
        "host": "",
        "base": "",
        "deep": "false",
        "eventTypes": "",
        "nodeTypeNames": "",
        "noLocal": "false",
        "password": "",
        "sessionLiveCheckInterval": "60000",
        "sessionLiveCheckIntervalOn{zwsp}Start": "3000",
        "username": "",
        "uuids": "",
        "workspaceName": "",
        "exceptionHandler": "",
        "exchangePattern": "",
        "synchronous": "false"
      }
    }
  }
}